
alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004338  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  080044c0  080044c0  000144c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004a40  08004a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004a44  08004a44  00014a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08004a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          000003b0  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003c4  200003c4  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000191d6  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ce4  00000000  00000000  0003921a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009bc3  00000000  00000000  0003befe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d60  00000000  00000000  00045ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000de8  00000000  00000000  00046828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000675e  00000000  00000000  00047610  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004445  00000000  00000000  0004dd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000521b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002740  00000000  00000000  00052230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044a8 	.word	0x080044a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080044a8 	.word	0x080044a8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b510      	push	{r4, lr}
 8000b5e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_InitTick+0x40>)
 8000b62:	7818      	ldrb	r0, [r3, #0]
 8000b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b68:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_InitTick+0x44>)
 8000b6e:	6810      	ldr	r0, [r2, #0]
 8000b70:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b74:	f000 f89e 	bl	8000cb4 <HAL_SYSTICK_Config>
 8000b78:	b968      	cbnz	r0, 8000b96 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	2c0f      	cmp	r4, #15
 8000b7c:	d901      	bls.n	8000b82 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b7e:	2001      	movs	r0, #1
  }
   /* Return function status */
  return HAL_OK;
}
 8000b80:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b82:	2200      	movs	r2, #0
 8000b84:	4621      	mov	r1, r4
 8000b86:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8a:	f000 f857 	bl	8000c3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_InitTick+0x48>)
 8000b90:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000b92:	2000      	movs	r0, #0
 8000b94:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b96:	2001      	movs	r0, #1
 8000b98:	bd10      	pop	{r4, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000010 	.word	0x20000010
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_Init>:
{
 8000ba8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000baa:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_Init+0x20>)
 8000bac:	6813      	ldr	r3, [r2, #0]
 8000bae:	f043 0310 	orr.w	r3, r3, #16
 8000bb2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f82f 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff ffce 	bl	8000b5c <HAL_InitTick>
  HAL_MspInit();
 8000bc0:	f002 fa78 	bl	80030b4 <HAL_MspInit>
}
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	bd08      	pop	{r3, pc}
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bcc:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <HAL_IncTick+0x10>)
 8000bce:	6811      	ldr	r1, [r2, #0]
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_IncTick+0x14>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	440b      	add	r3, r1
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000038 	.word	0x20000038
 8000be0:	20000000 	.word	0x20000000

08000be4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000be4:	4b01      	ldr	r3, [pc, #4]	; (8000bec <HAL_GetTick+0x8>)
 8000be6:	6818      	ldr	r0, [r3, #0]
}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000038 	.word	0x20000038

08000bf0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b538      	push	{r3, r4, r5, lr}
 8000bf2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff6 	bl	8000be4 <HAL_GetTick>
 8000bf8:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000bfe:	d002      	beq.n	8000c06 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <HAL_Delay+0x24>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c06:	f7ff ffed 	bl	8000be4 <HAL_GetTick>
 8000c0a:	1b40      	subs	r0, r0, r5
 8000c0c:	4284      	cmp	r4, r0
 8000c0e:	d8fa      	bhi.n	8000c06 <HAL_Delay+0x16>
  {
  }
}
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
 8000c12:	bf00      	nop
 8000c14:	20000000 	.word	0x20000000

08000c18 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c1a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c20:	041b      	lsls	r3, r3, #16
 8000c22:	0c1b      	lsrs	r3, r3, #16
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c2c:	0200      	lsls	r0, r0, #8
 8000c2e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c32:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c34:	60d3      	str	r3, [r2, #12]
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_NVIC_SetPriority+0x58>)
 8000c40:	68dc      	ldr	r4, [r3, #12]
 8000c42:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c46:	f1c4 0307 	rsb	r3, r4, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c50:	1d25      	adds	r5, r4, #4
 8000c52:	2d06      	cmp	r5, #6
 8000c54:	bf8c      	ite	hi
 8000c56:	1ee5      	subhi	r5, r4, #3
 8000c58:	2500      	movls	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5a:	2401      	movs	r4, #1
 8000c5c:	fa04 f303 	lsl.w	r3, r4, r3
 8000c60:	3b01      	subs	r3, #1
 8000c62:	4019      	ands	r1, r3
 8000c64:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c66:	40ac      	lsls	r4, r5
 8000c68:	3c01      	subs	r4, #1
 8000c6a:	4022      	ands	r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) < 0)
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	db09      	blt.n	8000c86 <HAL_NVIC_SetPriority+0x4a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	0109      	lsls	r1, r1, #4
 8000c74:	b2c9      	uxtb	r1, r1
 8000c76:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c7a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c7e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c82:	bc30      	pop	{r4, r5}
 8000c84:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	f000 000f 	and.w	r0, r0, #15
 8000c8a:	0109      	lsls	r1, r1, #4
 8000c8c:	b2c9      	uxtb	r1, r1
 8000c8e:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <HAL_NVIC_SetPriority+0x5c>)
 8000c90:	5419      	strb	r1, [r3, r0]
 8000c92:	e7f6      	b.n	8000c82 <HAL_NVIC_SetPriority+0x46>
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	e000ed14 	.word	0xe000ed14

08000c9c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c9c:	0942      	lsrs	r2, r0, #5
 8000c9e:	f000 001f 	and.w	r0, r0, #31
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	fa03 f000 	lsl.w	r0, r3, r0
 8000ca8:	4b01      	ldr	r3, [pc, #4]	; (8000cb0 <HAL_NVIC_EnableIRQ+0x14>)
 8000caa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	3801      	subs	r0, #1
 8000cb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cba:	d20a      	bcs.n	8000cd2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_SYSTICK_Config+0x24>)
 8000cbe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	21f0      	movs	r1, #240	; 0xf0
 8000cc2:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_SYSTICK_Config+0x28>)
 8000cc4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	2000      	movs	r0, #0
 8000cca:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ce0:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000ce4:	6813      	ldr	r3, [r2, #0]
 8000ce6:	bf0c      	ite	eq
 8000ce8:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cec:	f023 0304 	bicne.w	r3, r3, #4
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cf8:	4770      	bx	lr

08000cfa <HAL_SYSTICK_IRQHandler>:
{
 8000cfa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000cfc:	f7ff fffc 	bl	8000cf8 <HAL_SYSTICK_Callback>
 8000d00:	bd08      	pop	{r3, pc}

08000d02 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8000d02:	b170      	cbz	r0, 8000d22 <HAL_DAC_Init+0x20>
{ 
 8000d04:	b510      	push	{r4, lr}
 8000d06:	4604      	mov	r4, r0
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000d08:	7903      	ldrb	r3, [r0, #4]
 8000d0a:	b133      	cbz	r3, 8000d1a <HAL_DAC_Init+0x18>
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d10:	2000      	movs	r0, #0
 8000d12:	6120      	str	r0, [r4, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d14:	2301      	movs	r3, #1
 8000d16:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000d18:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8000d1a:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8000d1c:	f002 fa12 	bl	8003144 <HAL_DAC_MspInit>
 8000d20:	e7f4      	b.n	8000d0c <HAL_DAC_Init+0xa>
     return HAL_ERROR;
 8000d22:	2001      	movs	r0, #1
 8000d24:	4770      	bx	lr

08000d26 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8000d26:	b410      	push	{r4}
 8000d28:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0U;
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	9401      	str	r4, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8000d2e:	6800      	ldr	r0, [r0, #0]
 8000d30:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8000d32:	b151      	cbz	r1, 8000d4a <HAL_DAC_SetValue+0x24>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000d34:	9901      	ldr	r1, [sp, #4]
 8000d36:	3114      	adds	r1, #20
 8000d38:	440a      	add	r2, r1
 8000d3a:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000d3c:	9a01      	ldr	r2, [sp, #4]
 8000d3e:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8000d40:	2000      	movs	r0, #0
 8000d42:	b003      	add	sp, #12
 8000d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d48:	4770      	bx	lr
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000d4a:	9901      	ldr	r1, [sp, #4]
 8000d4c:	3108      	adds	r1, #8
 8000d4e:	440a      	add	r2, r1
 8000d50:	9201      	str	r2, [sp, #4]
 8000d52:	e7f3      	b.n	8000d3c <HAL_DAC_SetValue+0x16>

08000d54 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000d54:	7943      	ldrb	r3, [r0, #5]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d029      	beq.n	8000dae <HAL_DAC_Start+0x5a>
{
 8000d5a:	b410      	push	{r4}
  __HAL_LOCK(hdac);
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	7143      	strb	r3, [r0, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d60:	2202      	movs	r2, #2
 8000d62:	7102      	strb	r2, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000d64:	6802      	ldr	r2, [r0, #0]
 8000d66:	6814      	ldr	r4, [r2, #0]
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	4323      	orrs	r3, r4
 8000d6c:	6013      	str	r3, [r2, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8000d6e:	b991      	cbnz	r1, 8000d96 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8000d70:	6802      	ldr	r2, [r0, #0]
 8000d72:	6813      	ldr	r3, [r2, #0]
 8000d74:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000d78:	2b3c      	cmp	r3, #60	; 0x3c
 8000d7a:	d007      	beq.n	8000d8c <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d80:	2300      	movs	r3, #0
 8000d82:	7143      	strb	r3, [r0, #5]
    
  /* Return function status */
  return HAL_OK;
 8000d84:	4618      	mov	r0, r3
}
 8000d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d8a:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000d8c:	6853      	ldr	r3, [r2, #4]
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6053      	str	r3, [r2, #4]
 8000d94:	e7f2      	b.n	8000d7c <HAL_DAC_Start+0x28>
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8000d96:	6802      	ldr	r2, [r0, #0]
 8000d98:	6813      	ldr	r3, [r2, #0]
 8000d9a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000d9e:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8000da2:	d1eb      	bne.n	8000d7c <HAL_DAC_Start+0x28>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000da4:	6853      	ldr	r3, [r2, #4]
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6053      	str	r3, [r2, #4]
 8000dac:	e7e6      	b.n	8000d7c <HAL_DAC_Start+0x28>
  __HAL_LOCK(hdac);
 8000dae:	2002      	movs	r0, #2
 8000db0:	4770      	bx	lr
	...

08000db4 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000db4:	7943      	ldrb	r3, [r0, #5]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d02d      	beq.n	8000e16 <HAL_DAC_ConfigChannel+0x62>
{
 8000dba:	b470      	push	{r4, r5, r6}
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000dbc:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hdac);
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	7143      	strb	r3, [r0, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000dc6:	6833      	ldr	r3, [r6, #0]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000dc8:	4c14      	ldr	r4, [pc, #80]	; (8000e1c <HAL_DAC_ConfigChannel+0x68>)
 8000dca:	42a6      	cmp	r6, r4
 8000dcc:	d019      	beq.n	8000e02 <HAL_DAC_ConfigChannel+0x4e>
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8000dce:	f640 75fe 	movw	r5, #4094	; 0xffe
 8000dd2:	4095      	lsls	r5, r2
 8000dd4:	ea23 0505 	bic.w	r5, r3, r5
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000dd8:	680b      	ldr	r3, [r1, #0]
 8000dda:	6889      	ldr	r1, [r1, #8]
 8000ddc:	430b      	orrs	r3, r1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000dde:	4093      	lsls	r3, r2
 8000de0:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000de2:	6033      	str	r3, [r6, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000de4:	6804      	ldr	r4, [r0, #0]
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	21c0      	movs	r1, #192	; 0xc0
 8000dea:	fa01 f202 	lsl.w	r2, r1, r2
 8000dee:	ea23 0202 	bic.w	r2, r3, r2
 8000df2:	6022      	str	r2, [r4, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000df4:	2301      	movs	r3, #1
 8000df6:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	7143      	strb	r3, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
 8000dfc:	4618      	mov	r0, r3
}
 8000dfe:	bc70      	pop	{r4, r5, r6}
 8000e00:	4770      	bx	lr
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d1e3      	bne.n	8000dce <HAL_DAC_ConfigChannel+0x1a>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000e06:	f423 657f 	bic.w	r5, r3, #4080	; 0xff0
 8000e0a:	f025 050e 	bic.w	r5, r5, #14
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8000e0e:	680c      	ldr	r4, [r1, #0]
 8000e10:	684b      	ldr	r3, [r1, #4]
 8000e12:	4323      	orrs	r3, r4
 8000e14:	e7e3      	b.n	8000dde <HAL_DAC_ConfigChannel+0x2a>
  __HAL_LOCK(hdac);
 8000e16:	2002      	movs	r0, #2
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40007400 	.word	0x40007400

08000e20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e22:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d003      	beq.n	8000e32 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e2e:	2001      	movs	r0, #1
 8000e30:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e32:	6802      	ldr	r2, [r0, #0]
 8000e34:	6813      	ldr	r3, [r2, #0]
 8000e36:	f023 030e 	bic.w	r3, r3, #14
 8000e3a:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e3c:	6802      	ldr	r2, [r0, #0]
 8000e3e:	6813      	ldr	r3, [r2, #0]
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e46:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000e48:	2201      	movs	r2, #1
 8000e4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e52:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e56:	2300      	movs	r3, #0
 8000e58:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e5e:	b113      	cbz	r3, 8000e66 <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 8000e60:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000e62:	2000      	movs	r0, #0
 8000e64:	bd08      	pop	{r3, pc}
 8000e66:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 8000e68:	bd08      	pop	{r3, pc}
	...

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e70:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e72:	680c      	ldr	r4, [r1, #0]
 8000e74:	2c00      	cmp	r4, #0
 8000e76:	f000 80b7 	beq.w	8000fe8 <HAL_GPIO_Init+0x17c>
 8000e7a:	2600      	movs	r6, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e7c:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e80:	f04f 0903 	mov.w	r9, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e84:	f8df c170 	ldr.w	ip, [pc, #368]	; 8000ff8 <HAL_GPIO_Init+0x18c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e88:	f04f 0a0f 	mov.w	sl, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8c:	4f58      	ldr	r7, [pc, #352]	; (8000ff0 <HAL_GPIO_Init+0x184>)
 8000e8e:	e053      	b.n	8000f38 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3];
 8000e90:	08f2      	lsrs	r2, r6, #3
 8000e92:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e96:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e98:	f006 0307 	and.w	r3, r6, #7
 8000e9c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8000ea0:	fa0a f30b 	lsl.w	r3, sl, fp
 8000ea4:	ea24 0403 	bic.w	r4, r4, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea8:	690b      	ldr	r3, [r1, #16]
 8000eaa:	fa03 f30b 	lsl.w	r3, r3, fp
 8000eae:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3] = temp;
 8000eb0:	6213      	str	r3, [r2, #32]
 8000eb2:	e04b      	b.n	8000f4c <HAL_GPIO_Init+0xe0>
        temp = GPIOx->OSPEEDR;
 8000eb4:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb6:	ea02 0b03 	and.w	fp, r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eba:	68cb      	ldr	r3, [r1, #12]
 8000ebc:	40a3      	lsls	r3, r4
 8000ebe:	ea43 030b 	orr.w	r3, r3, fp
        GPIOx->OSPEEDR = temp;
 8000ec2:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ec4:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec6:	ea23 0b05 	bic.w	fp, r3, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eca:	684b      	ldr	r3, [r1, #4]
 8000ecc:	f3c3 1500 	ubfx	r5, r3, #4, #1
 8000ed0:	40b5      	lsls	r5, r6
 8000ed2:	ea45 050b 	orr.w	r5, r5, fp
        GPIOx->OTYPER = temp;
 8000ed6:	6045      	str	r5, [r0, #4]
 8000ed8:	e04c      	b.n	8000f74 <HAL_GPIO_Init+0x108>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eda:	2200      	movs	r2, #0
 8000edc:	40a2      	lsls	r2, r4
 8000ede:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ee0:	609a      	str	r2, [r3, #8]
        temp = EXTI->IMR;
 8000ee2:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	ea6f 0408 	mvn.w	r4, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee8:	684a      	ldr	r2, [r1, #4]
 8000eea:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000eee:	bf0c      	ite	eq
 8000ef0:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8000ef2:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR = temp;
 8000ef6:	603b      	str	r3, [r7, #0]

        temp = EXTI->EMR;
 8000ef8:	687a      	ldr	r2, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000efa:	684b      	ldr	r3, [r1, #4]
 8000efc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f00:	bf0c      	ite	eq
 8000f02:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 8000f04:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->EMR = temp;
 8000f08:	607a      	str	r2, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0a:	68ba      	ldr	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f0c:	684b      	ldr	r3, [r1, #4]
 8000f0e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f12:	bf0c      	ite	eq
 8000f14:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 8000f16:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR = temp;
 8000f1a:	60ba      	str	r2, [r7, #8]

        temp = EXTI->FTSR;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f1e:	684a      	ldr	r2, [r1, #4]
 8000f20:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000f24:	bf0c      	ite	eq
 8000f26:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8000f28:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR = temp;
 8000f2c:	60fb      	str	r3, [r7, #12]
      }
    }
    
    position++;
 8000f2e:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f30:	680c      	ldr	r4, [r1, #0]
 8000f32:	fa34 f306 	lsrs.w	r3, r4, r6
 8000f36:	d057      	beq.n	8000fe8 <HAL_GPIO_Init+0x17c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f38:	fa0e f506 	lsl.w	r5, lr, r6
    if(iocurrent)
 8000f3c:	ea15 0804 	ands.w	r8, r5, r4
 8000f40:	d0f5      	beq.n	8000f2e <HAL_GPIO_Init+0xc2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f42:	684b      	ldr	r3, [r1, #4]
 8000f44:	f023 0310 	bic.w	r3, r3, #16
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d0a1      	beq.n	8000e90 <HAL_GPIO_Init+0x24>
      temp = GPIOx->MODER;
 8000f4c:	6803      	ldr	r3, [r0, #0]
 8000f4e:	0074      	lsls	r4, r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f50:	fa09 f204 	lsl.w	r2, r9, r4
 8000f54:	43d2      	mvns	r2, r2
 8000f56:	ea03 0b02 	and.w	fp, r3, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5a:	684b      	ldr	r3, [r1, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	40a3      	lsls	r3, r4
 8000f62:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 8000f66:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f68:	684b      	ldr	r3, [r1, #4]
 8000f6a:	f023 0310 	bic.w	r3, r3, #16
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d99f      	bls.n	8000eb4 <HAL_GPIO_Init+0x48>
      temp = GPIOx->PUPDR;
 8000f74:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f76:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	688b      	ldr	r3, [r1, #8]
 8000f7a:	fa03 f404 	lsl.w	r4, r3, r4
 8000f7e:	4314      	orrs	r4, r2
      GPIOx->PUPDR = temp;
 8000f80:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f82:	684b      	ldr	r3, [r1, #4]
 8000f84:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f88:	d0d1      	beq.n	8000f2e <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	f8cc 3018 	str.w	r3, [ip, #24]
 8000f96:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	9b01      	ldr	r3, [sp, #4]
 8000fa2:	f026 0303 	bic.w	r3, r6, #3
 8000fa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000faa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 8000fae:	689d      	ldr	r5, [r3, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000fb0:	f006 0203 	and.w	r2, r6, #3
 8000fb4:	0094      	lsls	r4, r2, #2
 8000fb6:	fa0a f204 	lsl.w	r2, sl, r4
 8000fba:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fbe:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000fc2:	d08a      	beq.n	8000eda <HAL_GPIO_Init+0x6e>
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_GPIO_Init+0x188>)
 8000fc6:	4290      	cmp	r0, r2
 8000fc8:	d00a      	beq.n	8000fe0 <HAL_GPIO_Init+0x174>
 8000fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fce:	4290      	cmp	r0, r2
 8000fd0:	d008      	beq.n	8000fe4 <HAL_GPIO_Init+0x178>
 8000fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fd6:	4290      	cmp	r0, r2
 8000fd8:	bf0c      	ite	eq
 8000fda:	2203      	moveq	r2, #3
 8000fdc:	2205      	movne	r2, #5
 8000fde:	e77d      	b.n	8000edc <HAL_GPIO_Init+0x70>
 8000fe0:	4672      	mov	r2, lr
 8000fe2:	e77b      	b.n	8000edc <HAL_GPIO_Init+0x70>
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	e779      	b.n	8000edc <HAL_GPIO_Init+0x70>
  }
}
 8000fe8:	b003      	add	sp, #12
 8000fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fee:	bf00      	nop
 8000ff0:	40010400 	.word	0x40010400
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	b90a      	cbnz	r2, 8001002 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffe:	6281      	str	r1, [r0, #40]	; 0x28
 8001000:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001002:	6181      	str	r1, [r0, #24]
 8001004:	4770      	bx	lr
	...

08001008 <HAL_OPAMP_Init>:
{ 
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if((hopamp == NULL) || (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED) \
 8001008:	2800      	cmp	r0, #0
 800100a:	d061      	beq.n	80010d0 <HAL_OPAMP_Init+0xc8>
{ 
 800100c:	b510      	push	{r4, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	4604      	mov	r4, r0
  if((hopamp == NULL) || (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED) \
 8001012:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b05      	cmp	r3, #5
 800101a:	d05b      	beq.n	80010d4 <HAL_OPAMP_Init+0xcc>
                      || (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY))
 800101c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d058      	beq.n	80010d8 <HAL_OPAMP_Init+0xd0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }
 
    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_OPAMP_Init+0xd8>)
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	619a      	str	r2, [r3, #24]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	9b01      	ldr	r3, [sp, #4]
    
    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 800103a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800103e:	b90b      	cbnz	r3, 8001044 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8001040:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    }

    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8001044:	4620      	mov	r0, r4
 8001046:	f002 f89f 	bl	8003188 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */
    
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800104a:	6863      	ldr	r3, [r4, #4]
 800104c:	f023 0220 	bic.w	r2, r3, #32
 8001050:	2a40      	cmp	r2, #64	; 0x40
 8001052:	d024      	beq.n	800109e <HAL_OPAMP_Init+0x96>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }    
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8001054:	6822      	ldr	r2, [r4, #0]
 8001056:	6811      	ldr	r1, [r2, #0]
 8001058:	68a0      	ldr	r0, [r4, #8]
 800105a:	4303      	orrs	r3, r0
 800105c:	68e0      	ldr	r0, [r4, #12]
 800105e:	4303      	orrs	r3, r0
 8001060:	6920      	ldr	r0, [r4, #16]
 8001062:	4303      	orrs	r3, r0
 8001064:	6960      	ldr	r0, [r4, #20]
 8001066:	4303      	orrs	r3, r0
 8001068:	69a0      	ldr	r0, [r4, #24]
 800106a:	4303      	orrs	r3, r0
 800106c:	69e0      	ldr	r0, [r4, #28]
 800106e:	4303      	orrs	r3, r0
 8001070:	6a20      	ldr	r0, [r4, #32]
 8001072:	4303      	orrs	r3, r0
 8001074:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001076:	4303      	orrs	r3, r0
 8001078:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800107a:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 800107e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001080:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001084:	4817      	ldr	r0, [pc, #92]	; (80010e4 <HAL_OPAMP_Init+0xdc>)
 8001086:	4008      	ands	r0, r1
 8001088:	4303      	orrs	r3, r0
 800108a:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    } 
    
    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800108c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8001090:	bb23      	cbnz	r3, 80010dc <HAL_OPAMP_Init+0xd4>
    {
      /* From RESET state to READY State */
    hopamp->State = HAL_OPAMP_STATE_READY;
 8001092:	2301      	movs	r3, #1
 8001094:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
  
    return status;
 8001098:	2000      	movs	r0, #0
    }
}
 800109a:	b002      	add	sp, #8
 800109c:	bd10      	pop	{r4, pc}
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 800109e:	6821      	ldr	r1, [r4, #0]
 80010a0:	6808      	ldr	r0, [r1, #0]
 80010a2:	68e2      	ldr	r2, [r4, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	6922      	ldr	r2, [r4, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	69a2      	ldr	r2, [r4, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	69e2      	ldr	r2, [r4, #28]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	6a22      	ldr	r2, [r4, #32]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010b8:	4313      	orrs	r3, r2
 80010ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010bc:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 80010c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_OPAMP_Init+0xdc>)
 80010c8:	4002      	ands	r2, r0
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
 80010ce:	e7dd      	b.n	800108c <HAL_OPAMP_Init+0x84>
    return HAL_ERROR;
 80010d0:	2001      	movs	r0, #1
 80010d2:	4770      	bx	lr
 80010d4:	2001      	movs	r0, #1
 80010d6:	e7e0      	b.n	800109a <HAL_OPAMP_Init+0x92>
 80010d8:	2001      	movs	r0, #1
 80010da:	e7de      	b.n	800109a <HAL_OPAMP_Init+0x92>
    return status;
 80010dc:	2000      	movs	r0, #0
 80010de:	e7dc      	b.n	800109a <HAL_OPAMP_Init+0x92>
 80010e0:	40021000 	.word	0x40021000
 80010e4:	e0003811 	.word	0xe0003811

080010e8 <HAL_OPAMP_Start>:
{ 
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if((hopamp == NULL) || (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED))
 80010e8:	b1a8      	cbz	r0, 8001116 <HAL_OPAMP_Start+0x2e>
 80010ea:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d012      	beq.n	800111a <HAL_OPAMP_Start+0x32>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));
    
    if(hopamp->State == HAL_OPAMP_STATE_READY)
 80010f4:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d001      	beq.n	8001102 <HAL_OPAMP_Start+0x1a>
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;   
    }
    else
    {
      status = HAL_ERROR;
 80010fe:	2001      	movs	r0, #1
    }
    
    
   }
  return status;
}
 8001100:	4770      	bx	lr
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8001102:	6801      	ldr	r1, [r0, #0]
 8001104:	680b      	ldr	r3, [r1, #0]
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	600b      	str	r3, [r1, #0]
      hopamp->State = HAL_OPAMP_STATE_BUSY;   
 800110c:	2304      	movs	r3, #4
 800110e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  HAL_StatusTypeDef status = HAL_OK;
 8001112:	2000      	movs	r0, #0
 8001114:	4770      	bx	lr
    status = HAL_ERROR;
 8001116:	2001      	movs	r0, #1
 8001118:	4770      	bx	lr
 800111a:	2001      	movs	r0, #1
 800111c:	4770      	bx	lr

0800111e <HAL_OPAMP_SelfCalibrate>:
  uint32_t trimmingvaluep = 0U;
  uint32_t delta;
  
  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if((hopamp == NULL) || (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED))
 800111e:	2800      	cmp	r0, #0
 8001120:	f000 80b4 	beq.w	800128c <HAL_OPAMP_SelfCalibrate+0x16e>
{ 
 8001124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001128:	4604      	mov	r4, r0
  if((hopamp == NULL) || (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED))
 800112a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b05      	cmp	r3, #5
 8001132:	f000 80ad 	beq.w	8001290 <HAL_OPAMP_SelfCalibrate+0x172>
  }
  else
  {
  
    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if(hopamp->State ==  HAL_OPAMP_STATE_READY)
 8001136:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d002      	beq.n	8001146 <HAL_OPAMP_SelfCalibrate+0x28>
    }

    else
    {
      /* OPAMP can not be calibrated from this mode */ 
      status = HAL_ERROR;
 8001140:	2001      	movs	r0, #1
    }   
  }
  return status;
}
 8001142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8001146:	6802      	ldr	r2, [r0, #0]
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	6013      	str	r3, [r2, #0]
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8001150:	6802      	ldr	r2, [r0, #0]
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800115a:	6802      	ldr	r2, [r0, #0]
 800115c:	6813      	ldr	r3, [r2, #0]
 800115e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001162:	6013      	str	r3, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8001164:	6802      	ldr	r2, [r0, #0]
 8001166:	6813      	ldr	r3, [r2, #0]
 8001168:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800116c:	6013      	str	r3, [r2, #0]
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800116e:	6802      	ldr	r2, [r0, #0]
 8001170:	6813      	ldr	r3, [r2, #0]
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	2704      	movs	r7, #4
      delta = 8U;
 800117a:	2608      	movs	r6, #8
      trimmingvaluen = 16U; 
 800117c:	2510      	movs	r5, #16
        HAL_Delay(2U);
 800117e:	f04f 0802 	mov.w	r8, #2
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen<<OPAMP_INPUT_INVERTING);
 8001182:	6822      	ldr	r2, [r4, #0]
 8001184:	6813      	ldr	r3, [r2, #0]
 8001186:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800118a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800118e:	6013      	str	r3, [r2, #0]
        HAL_Delay(2U);
 8001190:	4640      	mov	r0, r8
 8001192:	f7ff fd2d 	bl	8000bf0 <HAL_Delay>
        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
          trimmingvaluen += delta;
 800119e:	bf14      	ite	ne
 80011a0:	19ad      	addne	r5, r5, r6
          trimmingvaluen -= delta;
 80011a2:	1bad      	subeq	r5, r5, r6
        delta >>= 1U;
 80011a4:	0876      	lsrs	r6, r6, #1
      while (delta != 0U)
 80011a6:	3f01      	subs	r7, #1
 80011a8:	d1eb      	bne.n	8001182 <HAL_OPAMP_SelfCalibrate+0x64>
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen<<OPAMP_INPUT_INVERTING);
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 80011b0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80011b4:	601a      	str	r2, [r3, #0]
       HAL_Delay(2U);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f7ff fd1a 	bl	8000bf0 <HAL_Delay>
      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET) 
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 80011c4:	d006      	beq.n	80011d4 <HAL_OPAMP_SelfCalibrate+0xb6>
        trimmingvaluen++;
 80011c6:	3501      	adds	r5, #1
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen<<OPAMP_INPUT_INVERTING);
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 80011ce:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80011d2:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 80011d4:	6822      	ldr	r2, [r4, #0]
 80011d6:	6813      	ldr	r3, [r2, #0]
 80011d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	f04f 0804 	mov.w	r8, #4
      delta = 8U;
 80011e6:	2708      	movs	r7, #8
      trimmingvaluep = 16U; 
 80011e8:	2610      	movs	r6, #16
        HAL_Delay(2U);
 80011ea:	f04f 0902 	mov.w	r9, #2
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 80011ee:	6822      	ldr	r2, [r4, #0]
 80011f0:	6813      	ldr	r3, [r2, #0]
 80011f2:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 80011f6:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80011fa:	6013      	str	r3, [r2, #0]
        HAL_Delay(2U);
 80011fc:	4648      	mov	r0, r9
 80011fe:	f7ff fcf7 	bl	8000bf0 <HAL_Delay>
        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET) 
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
          trimmingvaluep += delta;
 800120a:	bf14      	ite	ne
 800120c:	19f6      	addne	r6, r6, r7
          trimmingvaluep -= delta;
 800120e:	1bf6      	subeq	r6, r6, r7
        delta >>= 1U;
 8001210:	087f      	lsrs	r7, r7, #1
      while (delta != 0U)
 8001212:	f1b8 0801 	subs.w	r8, r8, #1
 8001216:	d1ea      	bne.n	80011ee <HAL_OPAMP_SelfCalibrate+0xd0>
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 800121e:	ea42 42c6 	orr.w	r2, r2, r6, lsl #19
 8001222:	601a      	str	r2, [r3, #0]
       HAL_Delay(2U);
 8001224:	2002      	movs	r0, #2
 8001226:	f7ff fce3 	bl	8000bf0 <HAL_Delay>
      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 8001232:	d006      	beq.n	8001242 <HAL_OPAMP_SelfCalibrate+0x124>
        trimmingvaluep++;
 8001234:	3601      	adds	r6, #1
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 800123c:	ea42 42c6 	orr.w	r2, r2, r6, lsl #19
 8001240:	601a      	str	r2, [r3, #0]
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8001242:	6822      	ldr	r2, [r4, #0]
 8001244:	6813      	ldr	r3, [r2, #0]
 8001246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800124a:	6013      	str	r3, [r2, #0]
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800124c:	6822      	ldr	r2, [r4, #0]
 800124e:	6813      	ldr	r3, [r2, #0]
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	6813      	ldr	r3, [r2, #0]
 800125a:	f023 0302 	bic.w	r3, r3, #2
 800125e:	6013      	str	r3, [r2, #0]
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 8001260:	62e5      	str	r5, [r4, #44]	; 0x2c
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 8001262:	62a6      	str	r6, [r4, #40]	; 0x28
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8001264:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001268:	6263      	str	r3, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	6813      	ldr	r3, [r2, #0]
 800126e:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8001272:	ea43 46c6 	orr.w	r6, r3, r6, lsl #19
 8001276:	6016      	str	r6, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen<<OPAMP_INPUT_INVERTING);
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001280:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 8001284:	6015      	str	r5, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001286:	2000      	movs	r0, #0
 8001288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    status = HAL_ERROR;
 800128c:	2001      	movs	r0, #1
 800128e:	4770      	bx	lr
 8001290:	2001      	movs	r0, #1
 8001292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001298 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	2800      	cmp	r0, #0
 800129a:	f000 82e4 	beq.w	8001866 <HAL_RCC_OscConfig+0x5ce>
{
 800129e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	6803      	ldr	r3, [r0, #0]
 80012a8:	f013 0f01 	tst.w	r3, #1
 80012ac:	d062      	beq.n	8001374 <HAL_RCC_OscConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012ae:	4bb3      	ldr	r3, [pc, #716]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d045      	beq.n	8001346 <HAL_RCC_OscConfig+0xae>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ba:	4bb0      	ldr	r3, [pc, #704]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d03a      	beq.n	800133c <HAL_RCC_OscConfig+0xa4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c6:	6863      	ldr	r3, [r4, #4]
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012cc:	f000 808d 	beq.w	80013ea <HAL_RCC_OscConfig+0x152>
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f040 8090 	bne.w	80013f6 <HAL_RCC_OscConfig+0x15e>
 80012d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012ec:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ee:	4aa3      	ldr	r2, [pc, #652]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 80012f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80012f2:	f023 030f 	bic.w	r3, r3, #15
 80012f6:	68a1      	ldr	r1, [r4, #8]
 80012f8:	430b      	orrs	r3, r1
 80012fa:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012fc:	6863      	ldr	r3, [r4, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8093 	beq.w	800142a <HAL_RCC_OscConfig+0x192>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fc6e 	bl	8000be4 <HAL_GetTick>
 8001308:	4680      	mov	r8, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4f9b      	ldr	r7, [pc, #620]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 8001310:	2601      	movs	r6, #1
 8001312:	fa95 f3a5 	rbit	r3, r5
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	fa95 f3a5 	rbit	r3, r5
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	fa06 f303 	lsl.w	r3, r6, r3
 8001328:	4213      	tst	r3, r2
 800132a:	d123      	bne.n	8001374 <HAL_RCC_OscConfig+0xdc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fc5a 	bl	8000be4 <HAL_GetTick>
 8001330:	eba0 0008 	sub.w	r0, r0, r8
 8001334:	2864      	cmp	r0, #100	; 0x64
 8001336:	d9ec      	bls.n	8001312 <HAL_RCC_OscConfig+0x7a>
          {
            return HAL_TIMEOUT;
 8001338:	2003      	movs	r0, #3
 800133a:	e29d      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133c:	4b8f      	ldr	r3, [pc, #572]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001344:	d0bf      	beq.n	80012c6 <HAL_RCC_OscConfig+0x2e>
 8001346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134a:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134e:	4b8b      	ldr	r3, [pc, #556]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 8001350:	6819      	ldr	r1, [r3, #0]
 8001352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	fab3 f383 	clz	r3, r3
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	2201      	movs	r2, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	420b      	tst	r3, r1
 800136a:	d003      	beq.n	8001374 <HAL_RCC_OscConfig+0xdc>
 800136c:	6863      	ldr	r3, [r4, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 827b 	beq.w	800186a <HAL_RCC_OscConfig+0x5d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	f013 0f02 	tst.w	r3, #2
 800137a:	f000 809a 	beq.w	80014b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800137e:	4b7f      	ldr	r3, [pc, #508]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f013 0f0c 	tst.w	r3, #12
 8001386:	d071      	beq.n	800146c <HAL_RCC_OscConfig+0x1d4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001388:	4b7c      	ldr	r3, [pc, #496]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d066      	beq.n	8001462 <HAL_RCC_OscConfig+0x1ca>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001394:	6923      	ldr	r3, [r4, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80c9 	beq.w	800152e <HAL_RCC_OscConfig+0x296>
 800139c:	2201      	movs	r2, #1
 800139e:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fc17 	bl	8000be4 <HAL_GetTick>
 80013b6:	4680      	mov	r8, r0
 80013b8:	2502      	movs	r5, #2
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	4f70      	ldr	r7, [pc, #448]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 80013bc:	2601      	movs	r6, #1
 80013be:	fa95 f3a5 	rbit	r3, r5
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	fa95 f3a5 	rbit	r3, r5
 80013c8:	fab3 f383 	clz	r3, r3
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	fa06 f303 	lsl.w	r3, r6, r3
 80013d4:	4213      	tst	r3, r2
 80013d6:	f040 809c 	bne.w	8001512 <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fc03 	bl	8000be4 <HAL_GetTick>
 80013de:	eba0 0008 	sub.w	r0, r0, r8
 80013e2:	2802      	cmp	r0, #2
 80013e4:	d9eb      	bls.n	80013be <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80013e6:	2003      	movs	r0, #3
 80013e8:	e246      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ea:	4a64      	ldr	r2, [pc, #400]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 80013ec:	6813      	ldr	r3, [r2, #0]
 80013ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e77b      	b.n	80012ee <HAL_RCC_OscConfig+0x56>
 80013f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fa:	d009      	beq.n	8001410 <HAL_RCC_OscConfig+0x178>
 80013fc:	4b5f      	ldr	r3, [pc, #380]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e76e      	b.n	80012ee <HAL_RCC_OscConfig+0x56>
 8001410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001414:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	e761      	b.n	80012ee <HAL_RCC_OscConfig+0x56>
        tickstart = HAL_GetTick();
 800142a:	f7ff fbdb 	bl	8000be4 <HAL_GetTick>
 800142e:	4680      	mov	r8, r0
 8001430:	f44f 3500 	mov.w	r5, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001434:	4f51      	ldr	r7, [pc, #324]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 8001436:	2601      	movs	r6, #1
 8001438:	fa95 f3a5 	rbit	r3, r5
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	fa95 f3a5 	rbit	r3, r5
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	fa06 f303 	lsl.w	r3, r6, r3
 800144e:	4213      	tst	r3, r2
 8001450:	d090      	beq.n	8001374 <HAL_RCC_OscConfig+0xdc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001452:	f7ff fbc7 	bl	8000be4 <HAL_GetTick>
 8001456:	eba0 0008 	sub.w	r0, r0, r8
 800145a:	2864      	cmp	r0, #100	; 0x64
 800145c:	d9ec      	bls.n	8001438 <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 800145e:	2003      	movs	r0, #3
 8001460:	e20a      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001462:	4b46      	ldr	r3, [pc, #280]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800146a:	d193      	bne.n	8001394 <HAL_RCC_OscConfig+0xfc>
 800146c:	2302      	movs	r3, #2
 800146e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	4b42      	ldr	r3, [pc, #264]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	2302      	movs	r3, #2
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	2201      	movs	r2, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	420b      	tst	r3, r1
 800148c:	d004      	beq.n	8001498 <HAL_RCC_OscConfig+0x200>
 800148e:	6923      	ldr	r3, [r4, #16]
 8001490:	4293      	cmp	r3, r2
 8001492:	d001      	beq.n	8001498 <HAL_RCC_OscConfig+0x200>
        return HAL_ERROR;
 8001494:	2001      	movs	r0, #1
 8001496:	e1ef      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4838      	ldr	r0, [pc, #224]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 800149a:	6801      	ldr	r1, [r0, #0]
 800149c:	23f8      	movs	r3, #248	; 0xf8
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	fab3 f283 	clz	r2, r3
 80014a6:	6963      	ldr	r3, [r4, #20]
 80014a8:	4093      	lsls	r3, r2
 80014aa:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80014ae:	4313      	orrs	r3, r2
 80014b0:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f013 0f08 	tst.w	r3, #8
 80014b8:	f000 808d 	beq.w	80015d6 <HAL_RCC_OscConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014bc:	69a3      	ldr	r3, [r4, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d060      	beq.n	8001584 <HAL_RCC_OscConfig+0x2ec>
 80014c2:	2101      	movs	r1, #1
 80014c4:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c8:	fab2 f282 	clz	r2, r2
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <HAL_RCC_OscConfig+0x2e8>)
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d4:	f7ff fb86 	bl	8000be4 <HAL_GetTick>
 80014d8:	4680      	mov	r8, r0
 80014da:	2502      	movs	r5, #2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014dc:	4f27      	ldr	r7, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 80014de:	2601      	movs	r6, #1
 80014e0:	fa95 f3a5 	rbit	r3, r5
 80014e4:	fa95 f3a5 	rbit	r3, r5
 80014e8:	fa95 f3a5 	rbit	r3, r5
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	fa95 f3a5 	rbit	r3, r5
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	fa06 f303 	lsl.w	r3, r6, r3
 80014fe:	4213      	tst	r3, r2
 8001500:	d169      	bne.n	80015d6 <HAL_RCC_OscConfig+0x33e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff fb6f 	bl	8000be4 <HAL_GetTick>
 8001506:	eba0 0008 	sub.w	r0, r0, r8
 800150a:	2802      	cmp	r0, #2
 800150c:	d9e8      	bls.n	80014e0 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 800150e:	2003      	movs	r0, #3
 8001510:	e1b2      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	481a      	ldr	r0, [pc, #104]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 8001514:	6801      	ldr	r1, [r0, #0]
 8001516:	23f8      	movs	r3, #248	; 0xf8
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	fab3 f283 	clz	r2, r3
 8001520:	6963      	ldr	r3, [r4, #20]
 8001522:	4093      	lsls	r3, r2
 8001524:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001528:	4313      	orrs	r3, r2
 800152a:	6003      	str	r3, [r0, #0]
 800152c:	e7c1      	b.n	80014b2 <HAL_RCC_OscConfig+0x21a>
 800152e:	2301      	movs	r3, #1
 8001530:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800153c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001546:	f7ff fb4d 	bl	8000be4 <HAL_GetTick>
 800154a:	4680      	mov	r8, r0
 800154c:	2502      	movs	r5, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	4f0b      	ldr	r7, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 8001550:	2601      	movs	r6, #1
 8001552:	fa95 f3a5 	rbit	r3, r5
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	fa95 f3a5 	rbit	r3, r5
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	fa06 f303 	lsl.w	r3, r6, r3
 8001568:	4213      	tst	r3, r2
 800156a:	d0a2      	beq.n	80014b2 <HAL_RCC_OscConfig+0x21a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fb3a 	bl	8000be4 <HAL_GetTick>
 8001570:	eba0 0008 	sub.w	r0, r0, r8
 8001574:	2802      	cmp	r0, #2
 8001576:	d9ec      	bls.n	8001552 <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 8001578:	2003      	movs	r0, #3
 800157a:	e17d      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
 800157c:	40021000 	.word	0x40021000
 8001580:	10908120 	.word	0x10908120
 8001584:	2201      	movs	r2, #1
 8001586:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158a:	fab2 f282 	clz	r2, r2
 800158e:	4bbd      	ldr	r3, [pc, #756]	; (8001884 <HAL_RCC_OscConfig+0x5ec>)
 8001590:	4413      	add	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7ff fb24 	bl	8000be4 <HAL_GetTick>
 800159c:	4680      	mov	r8, r0
 800159e:	2502      	movs	r5, #2
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	4fb9      	ldr	r7, [pc, #740]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 80015a2:	2601      	movs	r6, #1
 80015a4:	fa95 f3a5 	rbit	r3, r5
 80015a8:	fa95 f3a5 	rbit	r3, r5
 80015ac:	fa95 f3a5 	rbit	r3, r5
 80015b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b2:	fa95 f3a5 	rbit	r3, r5
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	fa06 f303 	lsl.w	r3, r6, r3
 80015c2:	4213      	tst	r3, r2
 80015c4:	d007      	beq.n	80015d6 <HAL_RCC_OscConfig+0x33e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fb0d 	bl	8000be4 <HAL_GetTick>
 80015ca:	eba0 0008 	sub.w	r0, r0, r8
 80015ce:	2802      	cmp	r0, #2
 80015d0:	d9e8      	bls.n	80015a4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80015d2:	2003      	movs	r0, #3
 80015d4:	e150      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	f013 0f04 	tst.w	r3, #4
 80015dc:	f000 80aa 	beq.w	8001734 <HAL_RCC_OscConfig+0x49c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e0:	4ba9      	ldr	r3, [pc, #676]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80015e8:	d12b      	bne.n	8001642 <HAL_RCC_OscConfig+0x3aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4ba7      	ldr	r3, [pc, #668]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015f2:	61da      	str	r2, [r3, #28]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015fe:	f04f 0901 	mov.w	r9, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	4ba2      	ldr	r3, [pc, #648]	; (800188c <HAL_RCC_OscConfig+0x5f4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f413 7f80 	tst.w	r3, #256	; 0x100
 800160a:	d01d      	beq.n	8001648 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160c:	68e3      	ldr	r3, [r4, #12]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d02e      	beq.n	8001670 <HAL_RCC_OscConfig+0x3d8>
 8001612:	2b00      	cmp	r3, #0
 8001614:	d132      	bne.n	800167c <HAL_RCC_OscConfig+0x3e4>
 8001616:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800161a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	f022 0201 	bic.w	r2, r2, #1
 8001624:	621a      	str	r2, [r3, #32]
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	f022 0204 	bic.w	r2, r2, #4
 800162c:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162e:	68e3      	ldr	r3, [r4, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d057      	beq.n	80016e4 <HAL_RCC_OscConfig+0x44c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff fad6 	bl	8000be4 <HAL_GetTick>
 8001638:	4680      	mov	r8, r0
 800163a:	2502      	movs	r5, #2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163c:	4f92      	ldr	r7, [pc, #584]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 800163e:	2601      	movs	r6, #1
 8001640:	e046      	b.n	80016d0 <HAL_RCC_OscConfig+0x438>
    FlagStatus       pwrclkchanged = RESET;
 8001642:	f04f 0900 	mov.w	r9, #0
 8001646:	e7dc      	b.n	8001602 <HAL_RCC_OscConfig+0x36a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001648:	4a90      	ldr	r2, [pc, #576]	; (800188c <HAL_RCC_OscConfig+0x5f4>)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001652:	f7ff fac7 	bl	8000be4 <HAL_GetTick>
 8001656:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	4d8c      	ldr	r5, [pc, #560]	; (800188c <HAL_RCC_OscConfig+0x5f4>)
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001660:	d1d4      	bne.n	800160c <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff fabf 	bl	8000be4 <HAL_GetTick>
 8001666:	1b80      	subs	r0, r0, r6
 8001668:	2864      	cmp	r0, #100	; 0x64
 800166a:	d9f6      	bls.n	800165a <HAL_RCC_OscConfig+0x3c2>
          return HAL_TIMEOUT;
 800166c:	2003      	movs	r0, #3
 800166e:	e103      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	4a85      	ldr	r2, [pc, #532]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 8001672:	6a13      	ldr	r3, [r2, #32]
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	e7d8      	b.n	800162e <HAL_RCC_OscConfig+0x396>
 800167c:	2b05      	cmp	r3, #5
 800167e:	d009      	beq.n	8001694 <HAL_RCC_OscConfig+0x3fc>
 8001680:	4b81      	ldr	r3, [pc, #516]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 8001682:	6a1a      	ldr	r2, [r3, #32]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	621a      	str	r2, [r3, #32]
 800168a:	6a1a      	ldr	r2, [r3, #32]
 800168c:	f022 0204 	bic.w	r2, r2, #4
 8001690:	621a      	str	r2, [r3, #32]
 8001692:	e7cc      	b.n	800162e <HAL_RCC_OscConfig+0x396>
 8001694:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 8001696:	6a1a      	ldr	r2, [r3, #32]
 8001698:	f042 0204 	orr.w	r2, r2, #4
 800169c:	621a      	str	r2, [r3, #32]
 800169e:	6a1a      	ldr	r2, [r3, #32]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	621a      	str	r2, [r3, #32]
 80016a6:	e7c2      	b.n	800162e <HAL_RCC_OscConfig+0x396>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a8:	6a3a      	ldr	r2, [r7, #32]
 80016aa:	fa95 f3a5 	rbit	r3, r5
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	fa06 f303 	lsl.w	r3, r6, r3
 80016ba:	4213      	tst	r3, r2
 80016bc:	d137      	bne.n	800172e <HAL_RCC_OscConfig+0x496>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff fa91 	bl	8000be4 <HAL_GetTick>
 80016c2:	eba0 0008 	sub.w	r0, r0, r8
 80016c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80016ca:	4298      	cmp	r0, r3
 80016cc:	f200 80cf 	bhi.w	800186e <HAL_RCC_OscConfig+0x5d6>
 80016d0:	fa95 f3a5 	rbit	r3, r5
 80016d4:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e5      	bne.n	80016a8 <HAL_RCC_OscConfig+0x410>
 80016dc:	fa95 f3a5 	rbit	r3, r5
 80016e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e2:	e7e2      	b.n	80016aa <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fa7e 	bl	8000be4 <HAL_GetTick>
 80016e8:	4680      	mov	r8, r0
 80016ea:	2502      	movs	r5, #2
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ec:	4f66      	ldr	r7, [pc, #408]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 80016ee:	2601      	movs	r6, #1
 80016f0:	e013      	b.n	800171a <HAL_RCC_OscConfig+0x482>
 80016f2:	6a3a      	ldr	r2, [r7, #32]
 80016f4:	fa95 f3a5 	rbit	r3, r5
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	fa06 f303 	lsl.w	r3, r6, r3
 8001704:	4213      	tst	r3, r2
 8001706:	d012      	beq.n	800172e <HAL_RCC_OscConfig+0x496>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff fa6c 	bl	8000be4 <HAL_GetTick>
 800170c:	eba0 0008 	sub.w	r0, r0, r8
 8001710:	f241 3388 	movw	r3, #5000	; 0x1388
 8001714:	4298      	cmp	r0, r3
 8001716:	f200 80ac 	bhi.w	8001872 <HAL_RCC_OscConfig+0x5da>
 800171a:	fa95 f3a5 	rbit	r3, r5
 800171e:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1e5      	bne.n	80016f2 <HAL_RCC_OscConfig+0x45a>
 8001726:	fa95 f3a5 	rbit	r3, r5
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172c:	e7e2      	b.n	80016f4 <HAL_RCC_OscConfig+0x45c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800172e:	f1b9 0f00 	cmp.w	r9, #0
 8001732:	d134      	bne.n	800179e <HAL_RCC_OscConfig+0x506>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001734:	69e3      	ldr	r3, [r4, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 809d 	beq.w	8001876 <HAL_RCC_OscConfig+0x5de>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 800173e:	6852      	ldr	r2, [r2, #4]
 8001740:	f002 020c 	and.w	r2, r2, #12
 8001744:	2a08      	cmp	r2, #8
 8001746:	f000 809a 	beq.w	800187e <HAL_RCC_OscConfig+0x5e6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174a:	2b02      	cmp	r3, #2
 800174c:	d02d      	beq.n	80017aa <HAL_RCC_OscConfig+0x512>
 800174e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001752:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800175e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fa3c 	bl	8000be4 <HAL_GetTick>
 800176c:	4607      	mov	r7, r0
 800176e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001772:	4e45      	ldr	r6, [pc, #276]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 8001774:	2501      	movs	r5, #1
 8001776:	fa94 f3a4 	rbit	r3, r4
 800177a:	6832      	ldr	r2, [r6, #0]
 800177c:	fa94 f3a4 	rbit	r3, r4
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	fa05 f303 	lsl.w	r3, r5, r3
 800178c:	4213      	tst	r3, r2
 800178e:	d068      	beq.n	8001862 <HAL_RCC_OscConfig+0x5ca>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fa28 	bl	8000be4 <HAL_GetTick>
 8001794:	1bc0      	subs	r0, r0, r7
 8001796:	2802      	cmp	r0, #2
 8001798:	d9ed      	bls.n	8001776 <HAL_RCC_OscConfig+0x4de>
          {
            return HAL_TIMEOUT;
 800179a:	2003      	movs	r0, #3
 800179c:	e06c      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_PWR_CLK_DISABLE();
 800179e:	4a3a      	ldr	r2, [pc, #232]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 80017a0:	69d3      	ldr	r3, [r2, #28]
 80017a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a6:	61d3      	str	r3, [r2, #28]
 80017a8:	e7c4      	b.n	8001734 <HAL_RCC_OscConfig+0x49c>
 80017aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017ae:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017c4:	f7ff fa0e 	bl	8000be4 <HAL_GetTick>
 80017c8:	4680      	mov	r8, r0
 80017ca:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	4f2e      	ldr	r7, [pc, #184]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 80017d0:	2601      	movs	r6, #1
 80017d2:	fa95 f3a5 	rbit	r3, r5
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	fa95 f3a5 	rbit	r3, r5
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	fa06 f303 	lsl.w	r3, r6, r3
 80017e8:	4213      	tst	r3, r2
 80017ea:	d007      	beq.n	80017fc <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff f9fa 	bl	8000be4 <HAL_GetTick>
 80017f0:	eba0 0008 	sub.w	r0, r0, r8
 80017f4:	2802      	cmp	r0, #2
 80017f6:	d9ec      	bls.n	80017d2 <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 80017f8:	2003      	movs	r0, #3
 80017fa:	e03d      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fc:	4922      	ldr	r1, [pc, #136]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 80017fe:	684a      	ldr	r2, [r1, #4]
 8001800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001802:	6a20      	ldr	r0, [r4, #32]
 8001804:	4303      	orrs	r3, r0
 8001806:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
 800180e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001812:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001828:	f7ff f9dc 	bl	8000be4 <HAL_GetTick>
 800182c:	4607      	mov	r7, r0
 800182e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001832:	4e15      	ldr	r6, [pc, #84]	; (8001888 <HAL_RCC_OscConfig+0x5f0>)
 8001834:	2501      	movs	r5, #1
 8001836:	fa94 f3a4 	rbit	r3, r4
 800183a:	6832      	ldr	r2, [r6, #0]
 800183c:	fa94 f3a4 	rbit	r3, r4
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	fa05 f303 	lsl.w	r3, r5, r3
 800184c:	4213      	tst	r3, r2
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x5c6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff f9c8 	bl	8000be4 <HAL_GetTick>
 8001854:	1bc0      	subs	r0, r0, r7
 8001856:	2802      	cmp	r0, #2
 8001858:	d9ed      	bls.n	8001836 <HAL_RCC_OscConfig+0x59e>
            return HAL_TIMEOUT;
 800185a:	2003      	movs	r0, #3
 800185c:	e00c      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800185e:	2000      	movs	r0, #0
 8001860:	e00a      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
 8001862:	2000      	movs	r0, #0
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
    return HAL_ERROR;
 8001866:	2001      	movs	r0, #1
 8001868:	4770      	bx	lr
        return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
 800186c:	e004      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
          return HAL_TIMEOUT;
 800186e:	2003      	movs	r0, #3
 8001870:	e002      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
          return HAL_TIMEOUT;
 8001872:	2003      	movs	r0, #3
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 8001876:	2000      	movs	r0, #0
}
 8001878:	b003      	add	sp, #12
 800187a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 800187e:	2001      	movs	r0, #1
 8001880:	e7fa      	b.n	8001878 <HAL_RCC_OscConfig+0x5e0>
 8001882:	bf00      	nop
 8001884:	10908120 	.word	0x10908120
 8001888:	40021000 	.word	0x40021000
 800188c:	40007000 	.word	0x40007000

08001890 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	460d      	mov	r5, r1
 8001896:	4616      	mov	r6, r2
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	9302      	str	r3, [sp, #8]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	9304      	str	r3, [sp, #16]
  gpio.Pull      = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	9303      	str	r3, [sp, #12]
  gpio.Pin       = MCO1_PIN;
 80018a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a8:	9201      	str	r2, [sp, #4]
  gpio.Alternate = GPIO_AF0_MCO;
 80018aa:	9305      	str	r3, [sp, #20]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80018ac:	4c0b      	ldr	r4, [pc, #44]	; (80018dc <HAL_RCC_MCOConfig+0x4c>)
 80018ae:	6963      	ldr	r3, [r4, #20]
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	6163      	str	r3, [r4, #20]
 80018b6:	6963      	ldr	r3, [r4, #20]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	9b00      	ldr	r3, [sp, #0]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80018c0:	a901      	add	r1, sp, #4
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c6:	f7ff fad1 	bl	8000e6c <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80018ca:	6861      	ldr	r1, [r4, #4]
 80018cc:	f021 41ee 	bic.w	r1, r1, #1996488704	; 0x77000000
 80018d0:	4331      	orrs	r1, r6
 80018d2:	4329      	orrs	r1, r5
 80018d4:	6061      	str	r1, [r4, #4]
}
 80018d6:	b006      	add	sp, #24
 80018d8:	bd70      	pop	{r4, r5, r6, pc}
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_RCC_GetSysClockFreq+0x54>)
 80018e2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e4:	f003 020c 	and.w	r2, r3, #12
 80018e8:	2a08      	cmp	r2, #8
 80018ea:	d121      	bne.n	8001930 <HAL_RCC_GetSysClockFreq+0x50>
 80018ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80018f0:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018f4:	fab2 f282 	clz	r2, r2
 80018f8:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80018fc:	fa21 f202 	lsr.w	r2, r1, r2
 8001900:	490d      	ldr	r1, [pc, #52]	; (8001938 <HAL_RCC_GetSysClockFreq+0x58>)
 8001902:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_RCC_GetSysClockFreq+0x54>)
 8001906:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001908:	210f      	movs	r1, #15
 800190a:	fa91 f1a1 	rbit	r1, r1
 800190e:	fab1 f181 	clz	r1, r1
 8001912:	f002 020f 	and.w	r2, r2, #15
 8001916:	40ca      	lsrs	r2, r1
 8001918:	4908      	ldr	r1, [pc, #32]	; (800193c <HAL_RCC_GetSysClockFreq+0x5c>)
 800191a:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800191c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001920:	bf1a      	itte	ne
 8001922:	4b07      	ldrne	r3, [pc, #28]	; (8001940 <HAL_RCC_GetSysClockFreq+0x60>)
 8001924:	fbb3 f3f2 	udivne	r3, r3, r2
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001928:	4b06      	ldreq	r3, [pc, #24]	; (8001944 <HAL_RCC_GetSysClockFreq+0x64>)
 800192a:	fb03 f000 	mul.w	r0, r3, r0
 800192e:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001932:	4770      	bx	lr
 8001934:	40021000 	.word	0x40021000
 8001938:	080044c0 	.word	0x080044c0
 800193c:	080044d0 	.word	0x080044d0
 8001940:	007a1200 	.word	0x007a1200
 8001944:	003d0900 	.word	0x003d0900

08001948 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001948:	2800      	cmp	r0, #0
 800194a:	f000 80c8 	beq.w	8001ade <HAL_RCC_ClockConfig+0x196>
{
 800194e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001952:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	428b      	cmp	r3, r1
 800195e:	d20d      	bcs.n	800197c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001960:	4a61      	ldr	r2, [pc, #388]	; (8001ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8001962:	6813      	ldr	r3, [r2, #0]
 8001964:	f023 0307 	bic.w	r3, r3, #7
 8001968:	430b      	orrs	r3, r1
 800196a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	4299      	cmp	r1, r3
 8001974:	d002      	beq.n	800197c <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
 8001976:	2001      	movs	r0, #1
 8001978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	f013 0f02 	tst.w	r3, #2
 8001982:	d006      	beq.n	8001992 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4a59      	ldr	r2, [pc, #356]	; (8001aec <HAL_RCC_ClockConfig+0x1a4>)
 8001986:	6853      	ldr	r3, [r2, #4]
 8001988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800198c:	68a0      	ldr	r0, [r4, #8]
 800198e:	4303      	orrs	r3, r0
 8001990:	6053      	str	r3, [r2, #4]
 8001992:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	f013 0f01 	tst.w	r3, #1
 800199a:	d05e      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199c:	6862      	ldr	r2, [r4, #4]
 800199e:	2a01      	cmp	r2, #1
 80019a0:	d02f      	beq.n	8001a02 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a2:	2a02      	cmp	r2, #2
 80019a4:	d043      	beq.n	8001a2e <HAL_RCC_ClockConfig+0xe6>
 80019a6:	2302      	movs	r3, #2
 80019a8:	fa93 f3a3 	rbit	r3, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	4b4f      	ldr	r3, [pc, #316]	; (8001aec <HAL_RCC_ClockConfig+0x1a4>)
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	2302      	movs	r3, #2
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	4203      	tst	r3, r0
 80019c6:	f000 808c 	beq.w	8001ae2 <HAL_RCC_ClockConfig+0x19a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ca:	4948      	ldr	r1, [pc, #288]	; (8001aec <HAL_RCC_ClockConfig+0x1a4>)
 80019cc:	684b      	ldr	r3, [r1, #4]
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80019d6:	f7ff f905 	bl	8000be4 <HAL_GetTick>
 80019da:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019dc:	4e43      	ldr	r6, [pc, #268]	; (8001aec <HAL_RCC_ClockConfig+0x1a4>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019de:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	6873      	ldr	r3, [r6, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	6862      	ldr	r2, [r4, #4]
 80019ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019ee:	d034      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7ff f8f8 	bl	8000be4 <HAL_GetTick>
 80019f4:	eba0 0008 	sub.w	r0, r0, r8
 80019f8:	42b8      	cmp	r0, r7
 80019fa:	d9f2      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 80019fc:	2003      	movs	r0, #3
 80019fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a06:	fa93 f3a3 	rbit	r3, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <HAL_RCC_ClockConfig+0x1a4>)
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	2101      	movs	r1, #1
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	4203      	tst	r3, r0
 8001a26:	d1d0      	bne.n	80019ca <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
 8001a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a32:	fa93 f3a3 	rbit	r3, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_RCC_ClockConfig+0x1a4>)
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	4203      	tst	r3, r0
 8001a52:	d1ba      	bne.n	80019ca <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001a54:	2001      	movs	r0, #1
 8001a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	429d      	cmp	r5, r3
 8001a64:	d20d      	bcs.n	8001a82 <HAL_RCC_ClockConfig+0x13a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	f023 0307 	bic.w	r3, r3, #7
 8001a6e:	432b      	orrs	r3, r5
 8001a70:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	6813      	ldr	r3, [r2, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	429d      	cmp	r5, r3
 8001a7a:	d002      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001a7c:	2001      	movs	r0, #1
}
 8001a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	f013 0f04 	tst.w	r3, #4
 8001a88:	d006      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x150>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <HAL_RCC_ClockConfig+0x1a4>)
 8001a8c:	6853      	ldr	r3, [r2, #4]
 8001a8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a92:	68e1      	ldr	r1, [r4, #12]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	f013 0f08 	tst.w	r3, #8
 8001a9e:	d007      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x168>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa0:	4a12      	ldr	r2, [pc, #72]	; (8001aec <HAL_RCC_ClockConfig+0x1a4>)
 8001aa2:	6853      	ldr	r3, [r2, #4]
 8001aa4:	6921      	ldr	r1, [r4, #16]
 8001aa6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001aaa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001aae:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ab0:	f7ff ff16 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCC_ClockConfig+0x1a4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	22f0      	movs	r2, #240	; 0xf0
 8001aba:	fa92 f2a2 	rbit	r2, r2
 8001abe:	fab2 f282 	clz	r2, r2
 8001ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac6:	40d3      	lsrs	r3, r2
 8001ac8:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1a8>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	40d8      	lsrs	r0, r3
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x1ac>)
 8001ad0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f7ff f842 	bl	8000b5c <HAL_InitTick>
  return HAL_OK;
 8001ad8:	2000      	movs	r0, #0
 8001ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
 8001ae0:	4770      	bx	lr
        return HAL_ERROR;
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08004850 	.word	0x08004850
 8001af4:	20000010 	.word	0x20000010

08001af8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001af8:	4b01      	ldr	r3, [pc, #4]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x8>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000010 	.word	0x20000010

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b0c:	fa92 f2a2 	rbit	r2, r2
 8001b10:	fab2 f282 	clz	r2, r2
 8001b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b18:	40d3      	lsrs	r3, r2
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001b20:	6810      	ldr	r0, [r2, #0]
}    
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08004860 	.word	0x08004860
 8001b30:	20000010 	.word	0x20000010

08001b34 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b34:	6802      	ldr	r2, [r0, #0]
 8001b36:	68d3      	ldr	r3, [r2, #12]
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	60d3      	str	r3, [r2, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	6813      	ldr	r3, [r2, #0]
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001b48:	2000      	movs	r0, #0
 8001b4a:	4770      	bx	lr

08001b4c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001b4c:	4770      	bx	lr

08001b4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b4e:	4770      	bx	lr

08001b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	4770      	bx	lr

08001b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b52:	4770      	bx	lr

08001b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	4770      	bx	lr

08001b56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b56:	4770      	bx	lr

08001b58 <HAL_TIM_IRQHandler>:
{
 8001b58:	b510      	push	{r4, lr}
 8001b5a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b5c:	6803      	ldr	r3, [r0, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	f012 0f02 	tst.w	r2, #2
 8001b64:	d011      	beq.n	8001b8a <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	f012 0f02 	tst.w	r2, #2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b6e:	f06f 0202 	mvn.w	r2, #2
 8001b72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b78:	6803      	ldr	r3, [r0, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f013 0f03 	tst.w	r3, #3
 8001b80:	d079      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001b82:	f7ff ffe6 	bl	8001b52 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	2300      	movs	r3, #0
 8001b88:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b8a:	6823      	ldr	r3, [r4, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	f012 0f04 	tst.w	r2, #4
 8001b92:	d012      	beq.n	8001bba <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	f012 0f04 	tst.w	r2, #4
 8001b9a:	d00e      	beq.n	8001bba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b9c:	f06f 0204 	mvn.w	r2, #4
 8001ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001bae:	d068      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff ffce 	bl	8001b52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	f012 0f08 	tst.w	r2, #8
 8001bc2:	d012      	beq.n	8001bea <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	f012 0f08 	tst.w	r2, #8
 8001bca:	d00e      	beq.n	8001bea <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bcc:	f06f 0208 	mvn.w	r2, #8
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f013 0f03 	tst.w	r3, #3
 8001bde:	d057      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001be0:	4620      	mov	r0, r4
 8001be2:	f7ff ffb6 	bl	8001b52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be6:	2300      	movs	r3, #0
 8001be8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	f012 0f10 	tst.w	r2, #16
 8001bf2:	d012      	beq.n	8001c1a <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	f012 0f10 	tst.w	r2, #16
 8001bfa:	d00e      	beq.n	8001c1a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bfc:	f06f 0210 	mvn.w	r2, #16
 8001c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c02:	2308      	movs	r3, #8
 8001c04:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001c0e:	d046      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c10:	4620      	mov	r0, r4
 8001c12:	f7ff ff9e 	bl	8001b52 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c16:	2300      	movs	r3, #0
 8001c18:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	f012 0f01 	tst.w	r2, #1
 8001c22:	d003      	beq.n	8001c2c <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	f012 0f01 	tst.w	r2, #1
 8001c2a:	d13f      	bne.n	8001cac <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c34:	d003      	beq.n	8001c3e <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c3c:	d13d      	bne.n	8001cba <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001c46:	d003      	beq.n	8001c50 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c4e:	d13b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c60:	d139      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	f012 0f20 	tst.w	r2, #32
 8001c6a:	d003      	beq.n	8001c74 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	f012 0f20 	tst.w	r2, #32
 8001c72:	d137      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x18c>
 8001c74:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	f7ff ff6b 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f7ff ff6a 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c80:	e781      	b.n	8001b86 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	4620      	mov	r0, r4
 8001c84:	f7ff ff64 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f7ff ff63 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c8e:	e792      	b.n	8001bb6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7ff ff5d 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff ff5c 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c9c:	e7a3      	b.n	8001be6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7ff ff56 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7ff ff55 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
 8001caa:	e7b4      	b.n	8001c16 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cac:	f06f 0201 	mvn.w	r2, #1
 8001cb0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7ff ff4b 	bl	8001b4e <HAL_TIM_PeriodElapsedCallback>
 8001cb8:	e7b8      	b.n	8001c2c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cbe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f000 fb5a 	bl	800237a <HAL_TIMEx_BreakCallback>
 8001cc6:	e7ba      	b.n	8001c3e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001cc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ccc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f000 fb54 	bl	800237c <HAL_TIMEx_Break2Callback>
 8001cd4:	e7bc      	b.n	8001c50 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cda:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7ff ff3a 	bl	8001b56 <HAL_TIM_TriggerCallback>
 8001ce2:	e7be      	b.n	8001c62 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ce4:	f06f 0220 	mvn.w	r2, #32
 8001ce8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001cea:	4620      	mov	r0, r4
 8001cec:	f000 fb44 	bl	8002378 <HAL_TIMEx_CommutationCallback>
}
 8001cf0:	e7c0      	b.n	8001c74 <HAL_TIM_IRQHandler+0x11c>
	...

08001cf4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001cf4:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf6:	4a3c      	ldr	r2, [pc, #240]	; (8001de8 <TIM_Base_SetConfig+0xf4>)
 8001cf8:	4290      	cmp	r0, r2
 8001cfa:	d021      	beq.n	8001d40 <TIM_Base_SetConfig+0x4c>
 8001cfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d00:	d03f      	beq.n	8001d82 <TIM_Base_SetConfig+0x8e>
 8001d02:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d06:	4290      	cmp	r0, r2
 8001d08:	d015      	beq.n	8001d36 <TIM_Base_SetConfig+0x42>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d0a:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8001d0e:	4290      	cmp	r0, r2
 8001d10:	d03c      	beq.n	8001d8c <TIM_Base_SetConfig+0x98>
 8001d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d16:	4290      	cmp	r0, r2
 8001d18:	d04a      	beq.n	8001db0 <TIM_Base_SetConfig+0xbc>
 8001d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d1e:	4290      	cmp	r0, r2
 8001d20:	d054      	beq.n	8001dcc <TIM_Base_SetConfig+0xd8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d26:	694a      	ldr	r2, [r1, #20]
 8001d28:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001d2a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d2c:	688b      	ldr	r3, [r1, #8]
 8001d2e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d30:	680b      	ldr	r3, [r1, #0]
 8001d32:	6283      	str	r3, [r0, #40]	; 0x28
 8001d34:	e039      	b.n	8001daa <TIM_Base_SetConfig+0xb6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d3a:	684a      	ldr	r2, [r1, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	e003      	b.n	8001d48 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d44:	684a      	ldr	r2, [r1, #4]
 8001d46:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d4c:	68ca      	ldr	r2, [r1, #12]
 8001d4e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d54:	694a      	ldr	r2, [r1, #20]
 8001d56:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001d58:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d5a:	688b      	ldr	r3, [r1, #8]
 8001d5c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d5e:	680b      	ldr	r3, [r1, #0]
 8001d60:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001d62:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <TIM_Base_SetConfig+0xf4>)
 8001d64:	4298      	cmp	r0, r3
 8001d66:	d01e      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d68:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001d6c:	4298      	cmp	r0, r3
 8001d6e:	d01a      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d74:	4298      	cmp	r0, r3
 8001d76:	d016      	beq.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d7c:	4298      	cmp	r0, r3
 8001d7e:	d114      	bne.n	8001daa <TIM_Base_SetConfig+0xb6>
 8001d80:	e011      	b.n	8001da6 <TIM_Base_SetConfig+0xb2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d86:	684a      	ldr	r2, [r1, #4]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	e7dd      	b.n	8001d48 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d90:	68ca      	ldr	r2, [r1, #12]
 8001d92:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d98:	694a      	ldr	r2, [r1, #20]
 8001d9a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001d9c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d9e:	688b      	ldr	r3, [r1, #8]
 8001da0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001da2:	680b      	ldr	r3, [r1, #0]
 8001da4:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001da6:	690b      	ldr	r3, [r1, #16]
 8001da8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001daa:	2301      	movs	r3, #1
 8001dac:	6143      	str	r3, [r0, #20]
}
 8001dae:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8001db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001db4:	68ca      	ldr	r2, [r1, #12]
 8001db6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dbc:	694a      	ldr	r2, [r1, #20]
 8001dbe:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001dc0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc2:	688b      	ldr	r3, [r1, #8]
 8001dc4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001dc6:	680b      	ldr	r3, [r1, #0]
 8001dc8:	6283      	str	r3, [r0, #40]	; 0x28
 8001dca:	e7ec      	b.n	8001da6 <TIM_Base_SetConfig+0xb2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd0:	68ca      	ldr	r2, [r1, #12]
 8001dd2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dd8:	694a      	ldr	r2, [r1, #20]
 8001dda:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001ddc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dde:	688b      	ldr	r3, [r1, #8]
 8001de0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001de2:	680b      	ldr	r3, [r1, #0]
 8001de4:	6283      	str	r3, [r0, #40]	; 0x28
 8001de6:	e7de      	b.n	8001da6 <TIM_Base_SetConfig+0xb2>
 8001de8:	40012c00 	.word	0x40012c00

08001dec <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8001dec:	b1a8      	cbz	r0, 8001e1a <HAL_TIM_Base_Init+0x2e>
{ 
 8001dee:	b510      	push	{r4, lr}
 8001df0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8001df2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001df6:	b15b      	cbz	r3, 8001e10 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001dfe:	1d21      	adds	r1, r4, #4
 8001e00:	6820      	ldr	r0, [r4, #0]
 8001e02:	f7ff ff77 	bl	8001cf4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e06:	2301      	movs	r3, #1
 8001e08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e14:	f001 f9d0 	bl	80031b8 <HAL_TIM_Base_MspInit>
 8001e18:	e7ee      	b.n	8001df8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	4770      	bx	lr

08001e1e <HAL_TIM_OC_Init>:
  if(htim == NULL)
 8001e1e:	b1a8      	cbz	r0, 8001e4c <HAL_TIM_OC_Init+0x2e>
{
 8001e20:	b510      	push	{r4, lr}
 8001e22:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e24:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e28:	b15b      	cbz	r3, 8001e42 <HAL_TIM_OC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8001e30:	1d21      	adds	r1, r4, #4
 8001e32:	6820      	ldr	r0, [r4, #0]
 8001e34:	f7ff ff5e 	bl	8001cf4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e3e:	2000      	movs	r0, #0
 8001e40:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001e46:	f7ff fe81 	bl	8001b4c <HAL_TIM_OC_MspInit>
 8001e4a:	e7ee      	b.n	8001e2a <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	4770      	bx	lr

08001e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e50:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e52:	6a03      	ldr	r3, [r0, #32]
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e5a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001e5c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e5e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e64:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e68:	680d      	ldr	r5, [r1, #0]
 8001e6a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e6c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e70:	688d      	ldr	r5, [r1, #8]
 8001e72:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e74:	4d1b      	ldr	r5, [pc, #108]	; (8001ee4 <TIM_OC1_SetConfig+0x94>)
 8001e76:	42a8      	cmp	r0, r5
 8001e78:	d012      	beq.n	8001ea0 <TIM_OC1_SetConfig+0x50>
 8001e7a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001e7e:	42a8      	cmp	r0, r5
 8001e80:	d01b      	beq.n	8001eba <TIM_OC1_SetConfig+0x6a>
 8001e82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e86:	42a8      	cmp	r0, r5
 8001e88:	d01e      	beq.n	8001ec8 <TIM_OC1_SetConfig+0x78>
 8001e8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e8e:	42a8      	cmp	r0, r5
 8001e90:	d021      	beq.n	8001ed6 <TIM_OC1_SetConfig+0x86>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e92:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e94:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e96:	684a      	ldr	r2, [r1, #4]
 8001e98:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001e9a:	6203      	str	r3, [r0, #32]
} 
 8001e9c:	bc70      	pop	{r4, r5, r6}
 8001e9e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ea0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001ea4:	68cd      	ldr	r5, [r1, #12]
 8001ea6:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001eac:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001eb0:	694d      	ldr	r5, [r1, #20]
 8001eb2:	698e      	ldr	r6, [r1, #24]
 8001eb4:	4335      	orrs	r5, r6
 8001eb6:	432c      	orrs	r4, r5
 8001eb8:	e7eb      	b.n	8001e92 <TIM_OC1_SetConfig+0x42>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001eba:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001ebe:	68cd      	ldr	r5, [r1, #12]
 8001ec0:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ec2:	f023 0304 	bic.w	r3, r3, #4
 8001ec6:	e7f1      	b.n	8001eac <TIM_OC1_SetConfig+0x5c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ec8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001ecc:	68cd      	ldr	r5, [r1, #12]
 8001ece:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	e7ea      	b.n	8001eac <TIM_OC1_SetConfig+0x5c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ed6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001eda:	68cd      	ldr	r5, [r1, #12]
 8001edc:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ede:	f023 0304 	bic.w	r3, r3, #4
 8001ee2:	e7e3      	b.n	8001eac <TIM_OC1_SetConfig+0x5c>
 8001ee4:	40012c00 	.word	0x40012c00

08001ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ee8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eea:	6a03      	ldr	r3, [r0, #32]
 8001eec:	f023 0310 	bic.w	r3, r3, #16
 8001ef0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ef2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001ef4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ef6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ef8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001efc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f00:	680d      	ldr	r5, [r1, #0]
 8001f02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f06:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f0a:	688d      	ldr	r5, [r1, #8]
 8001f0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f10:	4d11      	ldr	r5, [pc, #68]	; (8001f58 <TIM_OC2_SetConfig+0x70>)
 8001f12:	42a8      	cmp	r0, r5
 8001f14:	d00a      	beq.n	8001f2c <TIM_OC2_SetConfig+0x44>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f16:	4d11      	ldr	r5, [pc, #68]	; (8001f5c <TIM_OC2_SetConfig+0x74>)
 8001f18:	42a8      	cmp	r0, r5
 8001f1a:	d00e      	beq.n	8001f3a <TIM_OC2_SetConfig+0x52>
 8001f1c:	4d10      	ldr	r5, [pc, #64]	; (8001f60 <TIM_OC2_SetConfig+0x78>)
 8001f1e:	42a8      	cmp	r0, r5
 8001f20:	d00b      	beq.n	8001f3a <TIM_OC2_SetConfig+0x52>
 8001f22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f26:	42a8      	cmp	r0, r5
 8001f28:	d10e      	bne.n	8001f48 <TIM_OC2_SetConfig+0x60>
 8001f2a:	e006      	b.n	8001f3a <TIM_OC2_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f30:	68cd      	ldr	r5, [r1, #12]
 8001f32:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f3a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f3e:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f40:	698e      	ldr	r6, [r1, #24]
 8001f42:	4335      	orrs	r5, r6
 8001f44:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f48:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f4a:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f4c:	684a      	ldr	r2, [r1, #4]
 8001f4e:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f50:	6203      	str	r3, [r0, #32]
}
 8001f52:	bc70      	pop	{r4, r5, r6}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40012c00 	.word	0x40012c00
 8001f5c:	40014000 	.word	0x40014000
 8001f60:	40014400 	.word	0x40014400

08001f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f64:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f66:	6a03      	ldr	r3, [r0, #32]
 8001f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f6c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f6e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001f70:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f72:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001f74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f78:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f7c:	680d      	ldr	r5, [r1, #0]
 8001f7e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f84:	688d      	ldr	r5, [r1, #8]
 8001f86:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f8a:	4d11      	ldr	r5, [pc, #68]	; (8001fd0 <TIM_OC3_SetConfig+0x6c>)
 8001f8c:	42a8      	cmp	r0, r5
 8001f8e:	d00a      	beq.n	8001fa6 <TIM_OC3_SetConfig+0x42>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f90:	4d10      	ldr	r5, [pc, #64]	; (8001fd4 <TIM_OC3_SetConfig+0x70>)
 8001f92:	42a8      	cmp	r0, r5
 8001f94:	d00e      	beq.n	8001fb4 <TIM_OC3_SetConfig+0x50>
 8001f96:	4d10      	ldr	r5, [pc, #64]	; (8001fd8 <TIM_OC3_SetConfig+0x74>)
 8001f98:	42a8      	cmp	r0, r5
 8001f9a:	d00b      	beq.n	8001fb4 <TIM_OC3_SetConfig+0x50>
 8001f9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001fa0:	42a8      	cmp	r0, r5
 8001fa2:	d10e      	bne.n	8001fc2 <TIM_OC3_SetConfig+0x5e>
 8001fa4:	e006      	b.n	8001fb4 <TIM_OC3_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001faa:	68cd      	ldr	r5, [r1, #12]
 8001fac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fb4:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fb8:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fba:	698e      	ldr	r6, [r1, #24]
 8001fbc:	4335      	orrs	r5, r6
 8001fbe:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fc4:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fc6:	684a      	ldr	r2, [r1, #4]
 8001fc8:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001fca:	6203      	str	r3, [r0, #32]
}
 8001fcc:	bc70      	pop	{r4, r5, r6}
 8001fce:	4770      	bx	lr
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40014000 	.word	0x40014000
 8001fd8:	40014400 	.word	0x40014400

08001fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fdc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fde:	6a03      	ldr	r3, [r0, #32]
 8001fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fe4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001fe8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fea:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff0:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ff4:	680d      	ldr	r5, [r1, #0]
 8001ff6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ffe:	688d      	ldr	r5, [r1, #8]
 8002000:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002004:	4d0d      	ldr	r5, [pc, #52]	; (800203c <TIM_OC4_SetConfig+0x60>)
 8002006:	42a8      	cmp	r0, r5
 8002008:	d00b      	beq.n	8002022 <TIM_OC4_SetConfig+0x46>
 800200a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800200e:	42a8      	cmp	r0, r5
 8002010:	d007      	beq.n	8002022 <TIM_OC4_SetConfig+0x46>
 8002012:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002016:	42a8      	cmp	r0, r5
 8002018:	d003      	beq.n	8002022 <TIM_OC4_SetConfig+0x46>
 800201a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800201e:	42a8      	cmp	r0, r5
 8002020:	d104      	bne.n	800202c <TIM_OC4_SetConfig+0x50>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002022:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002026:	694d      	ldr	r5, [r1, #20]
 8002028:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800202c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800202e:	61c3      	str	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002030:	684b      	ldr	r3, [r1, #4]
 8002032:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002034:	6202      	str	r2, [r0, #32]
}
 8002036:	bc30      	pop	{r4, r5}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40012c00 	.word	0x40012c00

08002040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002040:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002042:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002044:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002048:	430a      	orrs	r2, r1
 800204a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800204e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002050:	6083      	str	r3, [r0, #8]
} 
 8002052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002058:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800205c:	2b01      	cmp	r3, #1
 800205e:	f000 80c0 	beq.w	80021e2 <HAL_TIM_ConfigClockSource+0x18a>
{
 8002062:	b570      	push	{r4, r5, r6, lr}
 8002064:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002066:	2301      	movs	r3, #1
 8002068:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800206c:	2302      	movs	r3, #2
 800206e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002072:	6802      	ldr	r2, [r0, #0]
 8002074:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002076:	4b5c      	ldr	r3, [pc, #368]	; (80021e8 <HAL_TIM_ConfigClockSource+0x190>)
 8002078:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800207a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800207c:	680b      	ldr	r3, [r1, #0]
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	f000 8085 	beq.w	800218e <HAL_TIM_ConfigClockSource+0x136>
 8002084:	d921      	bls.n	80020ca <HAL_TIM_ConfigClockSource+0x72>
 8002086:	2b70      	cmp	r3, #112	; 0x70
 8002088:	d057      	beq.n	800213a <HAL_TIM_ConfigClockSource+0xe2>
 800208a:	d836      	bhi.n	80020fa <HAL_TIM_ConfigClockSource+0xa2>
 800208c:	2b50      	cmp	r3, #80	; 0x50
 800208e:	d064      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x102>
 8002090:	2b60      	cmp	r3, #96	; 0x60
 8002092:	d14b      	bne.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	684d      	ldr	r5, [r1, #4]
 8002098:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800209a:	6a18      	ldr	r0, [r3, #32]
 800209c:	f020 0010 	bic.w	r0, r0, #16
 80020a0:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80020a4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020a6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020aa:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80020b2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80020b6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80020b8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020ba:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80020bc:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020c2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 80020c6:	6093      	str	r3, [r2, #8]
 80020c8:	e030      	b.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
  switch (sClockSourceConfig->ClockSource)
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d079      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x16a>
 80020ce:	d90b      	bls.n	80020e8 <HAL_TIM_ConfigClockSource+0x90>
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d07e      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0x17a>
 80020d4:	2b30      	cmp	r3, #48	; 0x30
 80020d6:	d129      	bne.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80020d8:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80020da:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020e0:	f043 0337 	orr.w	r3, r3, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 80020e4:	6093      	str	r3, [r2, #8]
 80020e6:	e021      	b.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
  switch (sClockSourceConfig->ClockSource)
 80020e8:	bb03      	cbnz	r3, 800212c <HAL_TIM_ConfigClockSource+0xd4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80020ea:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80020ec:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020f2:	f043 0307 	orr.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80020f6:	6093      	str	r3, [r2, #8]
 80020f8:	e018      	b.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
  switch (sClockSourceConfig->ClockSource)
 80020fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fe:	d00e      	beq.n	800211e <HAL_TIM_ConfigClockSource+0xc6>
 8002100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002104:	d112      	bne.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
      TIM_ETR_SetConfig(htim->Instance, 
 8002106:	68cb      	ldr	r3, [r1, #12]
 8002108:	684a      	ldr	r2, [r1, #4]
 800210a:	6889      	ldr	r1, [r1, #8]
 800210c:	6820      	ldr	r0, [r4, #0]
 800210e:	f7ff ff97 	bl	8002040 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002112:	6822      	ldr	r2, [r4, #0]
 8002114:	6893      	ldr	r3, [r2, #8]
 8002116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211a:	6093      	str	r3, [r2, #8]
    break;
 800211c:	e006      	b.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800211e:	6822      	ldr	r2, [r4, #0]
 8002120:	6893      	ldr	r3, [r2, #8]
 8002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002126:	f023 0307 	bic.w	r3, r3, #7
 800212a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800212c:	2301      	movs	r3, #1
 800212e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002132:	2000      	movs	r0, #0
 8002134:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002138:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 800213a:	68cb      	ldr	r3, [r1, #12]
 800213c:	684a      	ldr	r2, [r1, #4]
 800213e:	6889      	ldr	r1, [r1, #8]
 8002140:	6820      	ldr	r0, [r4, #0]
 8002142:	f7ff ff7d 	bl	8002040 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002146:	6822      	ldr	r2, [r4, #0]
 8002148:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002152:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002156:	6093      	str	r3, [r2, #8]
    break;
 8002158:	e7e8      	b.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	6848      	ldr	r0, [r1, #4]
 800215e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002160:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002162:	6a1d      	ldr	r5, [r3, #32]
 8002164:	f025 0501 	bic.w	r5, r5, #1
 8002168:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800216a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800216c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002170:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002174:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002178:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800217a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800217c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800217e:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8002180:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002186:	f043 0357 	orr.w	r3, r3, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 800218a:	6093      	str	r3, [r2, #8]
 800218c:	e7ce      	b.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	6848      	ldr	r0, [r1, #4]
 8002192:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002194:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002196:	6a1d      	ldr	r5, [r3, #32]
 8002198:	f025 0501 	bic.w	r5, r5, #1
 800219c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800219e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021a4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021a8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80021ac:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80021ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b0:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021b2:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80021b4:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021ba:	f043 0347 	orr.w	r3, r3, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 80021be:	6093      	str	r3, [r2, #8]
 80021c0:	e7b4      	b.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80021c2:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80021c4:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021ca:	f043 0317 	orr.w	r3, r3, #23
   TIMx->SMCR = tmpsmcr;
 80021ce:	6093      	str	r3, [r2, #8]
 80021d0:	e7ac      	b.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80021d2:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80021d4:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021da:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 80021de:	6093      	str	r3, [r2, #8]
 80021e0:	e7a4      	b.n	800212c <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 80021e2:	2002      	movs	r0, #2
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	fffe0088 	.word	0xfffe0088

080021ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80021ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80021ee:	6a03      	ldr	r3, [r0, #32]
 80021f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021f6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80021f8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021fa:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80021fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002204:	680d      	ldr	r5, [r1, #0]
 8002206:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002208:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800220c:	688d      	ldr	r5, [r1, #8]
 800220e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002212:	4d0d      	ldr	r5, [pc, #52]	; (8002248 <TIM_OC5_SetConfig+0x5c>)
 8002214:	42a8      	cmp	r0, r5
 8002216:	d00b      	beq.n	8002230 <TIM_OC5_SetConfig+0x44>
 8002218:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800221c:	42a8      	cmp	r0, r5
 800221e:	d007      	beq.n	8002230 <TIM_OC5_SetConfig+0x44>
 8002220:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002224:	42a8      	cmp	r0, r5
 8002226:	d003      	beq.n	8002230 <TIM_OC5_SetConfig+0x44>
 8002228:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800222c:	42a8      	cmp	r0, r5
 800222e:	d104      	bne.n	800223a <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002230:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002234:	694d      	ldr	r5, [r1, #20]
 8002236:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800223a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800223c:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800223e:	684b      	ldr	r3, [r1, #4]
 8002240:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002242:	6202      	str	r2, [r0, #32]
}
 8002244:	bc30      	pop	{r4, r5}
 8002246:	4770      	bx	lr
 8002248:	40012c00 	.word	0x40012c00

0800224c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 800224c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800224e:	6a03      	ldr	r3, [r0, #32]
 8002250:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002254:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002256:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002258:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800225a:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800225c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002264:	680d      	ldr	r5, [r1, #0]
 8002266:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800226a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800226e:	688d      	ldr	r5, [r1, #8]
 8002270:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002274:	4d0d      	ldr	r5, [pc, #52]	; (80022ac <TIM_OC6_SetConfig+0x60>)
 8002276:	42a8      	cmp	r0, r5
 8002278:	d00b      	beq.n	8002292 <TIM_OC6_SetConfig+0x46>
 800227a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800227e:	42a8      	cmp	r0, r5
 8002280:	d007      	beq.n	8002292 <TIM_OC6_SetConfig+0x46>
 8002282:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002286:	42a8      	cmp	r0, r5
 8002288:	d003      	beq.n	8002292 <TIM_OC6_SetConfig+0x46>
 800228a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800228e:	42a8      	cmp	r0, r5
 8002290:	d104      	bne.n	800229c <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002292:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002296:	694d      	ldr	r5, [r1, #20]
 8002298:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800229c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800229e:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80022a0:	684b      	ldr	r3, [r1, #4]
 80022a2:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80022a4:	6202      	str	r2, [r0, #32]
} 
 80022a6:	bc30      	pop	{r4, r5}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40012c00 	.word	0x40012c00

080022b0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim); 
 80022b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d034      	beq.n	8002322 <HAL_TIM_OC_ConfigChannel+0x72>
{  
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4604      	mov	r4, r0
  __HAL_LOCK(htim); 
 80022bc:	2301      	movs	r3, #1
 80022be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80022c2:	2302      	movs	r3, #2
 80022c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80022c8:	2a14      	cmp	r2, #20
 80022ca:	d80f      	bhi.n	80022ec <HAL_TIM_OC_ConfigChannel+0x3c>
 80022cc:	e8df f002 	tbb	[pc, r2]
 80022d0:	0e0e0e0b 	.word	0x0e0e0e0b
 80022d4:	0e0e0e15 	.word	0x0e0e0e15
 80022d8:	0e0e0e19 	.word	0x0e0e0e19
 80022dc:	0e0e0e1d 	.word	0x0e0e0e1d
 80022e0:	0e0e0e21 	.word	0x0e0e0e21
 80022e4:	25          	.byte	0x25
 80022e5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022e6:	6800      	ldr	r0, [r0, #0]
 80022e8:	f7ff fdb2 	bl	8001e50 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 80022f2:	2000      	movs	r0, #0
 80022f4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80022f8:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022fa:	6800      	ldr	r0, [r0, #0]
 80022fc:	f7ff fdf4 	bl	8001ee8 <TIM_OC2_SetConfig>
    break;
 8002300:	e7f4      	b.n	80022ec <HAL_TIM_OC_ConfigChannel+0x3c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002302:	6800      	ldr	r0, [r0, #0]
 8002304:	f7ff fe2e 	bl	8001f64 <TIM_OC3_SetConfig>
    break;
 8002308:	e7f0      	b.n	80022ec <HAL_TIM_OC_ConfigChannel+0x3c>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 800230a:	6800      	ldr	r0, [r0, #0]
 800230c:	f7ff fe66 	bl	8001fdc <TIM_OC4_SetConfig>
    break;
 8002310:	e7ec      	b.n	80022ec <HAL_TIM_OC_ConfigChannel+0x3c>
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002312:	6800      	ldr	r0, [r0, #0]
 8002314:	f7ff ff6a 	bl	80021ec <TIM_OC5_SetConfig>
    break;
 8002318:	e7e8      	b.n	80022ec <HAL_TIM_OC_ConfigChannel+0x3c>
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 800231a:	6800      	ldr	r0, [r0, #0]
 800231c:	f7ff ff96 	bl	800224c <TIM_OC6_SetConfig>
    break;
 8002320:	e7e4      	b.n	80022ec <HAL_TIM_OC_ConfigChannel+0x3c>
  __HAL_LOCK(htim); 
 8002322:	2002      	movs	r0, #2
 8002324:	4770      	bx	lr
	...

08002328 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002328:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d01f      	beq.n	8002370 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 8002330:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002332:	2301      	movs	r3, #1
 8002334:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 8002338:	6804      	ldr	r4, [r0, #0]
 800233a:	6863      	ldr	r3, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 800233c:	68a2      	ldr	r2, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800233e:	4d0d      	ldr	r5, [pc, #52]	; (8002374 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8002340:	42ac      	cmp	r4, r5
 8002342:	d010      	beq.n	8002366 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8002344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002348:	680d      	ldr	r5, [r1, #0]
 800234a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800234c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002350:	6889      	ldr	r1, [r1, #8]
 8002352:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 8002354:	6063      	str	r3, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002356:	6803      	ldr	r3, [r0, #0]
 8002358:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800235a:	2300      	movs	r3, #0
 800235c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002360:	4618      	mov	r0, r3
} 
 8002362:	bc30      	pop	{r4, r5}
 8002364:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002366:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800236a:	684d      	ldr	r5, [r1, #4]
 800236c:	432b      	orrs	r3, r5
 800236e:	e7e9      	b.n	8002344 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8002370:	2002      	movs	r0, #2
 8002372:	4770      	bx	lr
 8002374:	40012c00 	.word	0x40012c00

08002378 <HAL_TIMEx_CommutationCallback>:
{
 8002378:	4770      	bx	lr

0800237a <HAL_TIMEx_BreakCallback>:
{
 800237a:	4770      	bx	lr

0800237c <HAL_TIMEx_Break2Callback>:
{
 800237c:	4770      	bx	lr

0800237e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800237e:	6802      	ldr	r2, [r0, #0]
 8002380:	6813      	ldr	r3, [r2, #0]
 8002382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002386:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002388:	6802      	ldr	r2, [r0, #0]
 800238a:	6893      	ldr	r3, [r2, #8]
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002392:	2320      	movs	r3, #32
 8002394:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002398:	4770      	bx	lr

0800239a <HAL_UART_TxCpltCallback>:
{
 800239a:	4770      	bx	lr

0800239c <HAL_UART_RxCpltCallback>:
{
 800239c:	4770      	bx	lr

0800239e <HAL_UART_ErrorCallback>:
{
 800239e:	4770      	bx	lr

080023a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023a0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80023a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80023aa:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80023ae:	f7ff fff6 	bl	800239e <HAL_UART_ErrorCallback>
 80023b2:	bd08      	pop	{r3, pc}

080023b4 <UART_SetConfig>:
{
 80023b4:	b538      	push	{r3, r4, r5, lr}
 80023b6:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023b8:	6801      	ldr	r1, [r0, #0]
 80023ba:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023bc:	68a3      	ldr	r3, [r4, #8]
 80023be:	6922      	ldr	r2, [r4, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	6962      	ldr	r2, [r4, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	69e2      	ldr	r2, [r4, #28]
 80023c8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023ca:	4a58      	ldr	r2, [pc, #352]	; (800252c <UART_SetConfig+0x178>)
 80023cc:	4002      	ands	r2, r0
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d2:	6822      	ldr	r2, [r4, #0]
 80023d4:	6853      	ldr	r3, [r2, #4]
 80023d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023da:	68e1      	ldr	r1, [r4, #12]
 80023dc:	430b      	orrs	r3, r1
 80023de:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023e0:	6821      	ldr	r1, [r4, #0]
 80023e2:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023e4:	69a3      	ldr	r3, [r4, #24]
 80023e6:	6a20      	ldr	r0, [r4, #32]
 80023e8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023ea:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f2:	6825      	ldr	r5, [r4, #0]
 80023f4:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <UART_SetConfig+0x17c>)
 80023f6:	429d      	cmp	r5, r3
 80023f8:	d014      	beq.n	8002424 <UART_SetConfig+0x70>
 80023fa:	4b4e      	ldr	r3, [pc, #312]	; (8002534 <UART_SetConfig+0x180>)
 80023fc:	429d      	cmp	r5, r3
 80023fe:	d06e      	beq.n	80024de <UART_SetConfig+0x12a>
 8002400:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002404:	429d      	cmp	r5, r3
 8002406:	d06a      	beq.n	80024de <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002408:	69e3      	ldr	r3, [r4, #28]
 800240a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800240e:	d15e      	bne.n	80024ce <UART_SetConfig+0x11a>
        ret = HAL_ERROR;
 8002410:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002412:	2300      	movs	r3, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002414:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8002418:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800241a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800241e:	4313      	orrs	r3, r2
 8002420:	60cb      	str	r3, [r1, #12]
 8002422:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002424:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b03      	cmp	r3, #3
 8002430:	d84f      	bhi.n	80024d2 <UART_SetConfig+0x11e>
 8002432:	e8df f003 	tbb	[pc, r3]
 8002436:	3002      	.short	0x3002
 8002438:	1f3f      	.short	0x1f3f
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800243a:	69e3      	ldr	r3, [r4, #28]
 800243c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002440:	d151      	bne.n	80024e6 <UART_SetConfig+0x132>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002442:	f7ff fb5f 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8002446:	6862      	ldr	r2, [r4, #4]
 8002448:	0853      	lsrs	r3, r2, #1
 800244a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800244e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002452:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002454:	2000      	movs	r0, #0
        break;
 8002456:	e7dd      	b.n	8002414 <UART_SetConfig+0x60>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002458:	6862      	ldr	r2, [r4, #4]
 800245a:	0853      	lsrs	r3, r2, #1
 800245c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002460:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002464:	fbb3 f3f2 	udiv	r3, r3, r2
 8002468:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800246a:	2000      	movs	r0, #0
        break;
 800246c:	e7d2      	b.n	8002414 <UART_SetConfig+0x60>
        ret = HAL_ERROR;
 800246e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002470:	2300      	movs	r3, #0
 8002472:	e7cf      	b.n	8002414 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002474:	69e3      	ldr	r3, [r4, #28]
 8002476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800247a:	d0ed      	beq.n	8002458 <UART_SetConfig+0xa4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800247c:	6862      	ldr	r2, [r4, #4]
 800247e:	0853      	lsrs	r3, r2, #1
 8002480:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002484:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002488:	fbb3 f3f2 	udiv	r3, r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	4a28      	ldr	r2, [pc, #160]	; (8002530 <UART_SetConfig+0x17c>)
 8002490:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002492:	2000      	movs	r0, #0
        break;
 8002494:	bd38      	pop	{r3, r4, r5, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002496:	69e3      	ldr	r3, [r4, #28]
 8002498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800249c:	d12e      	bne.n	80024fc <UART_SetConfig+0x148>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800249e:	f7ff fa1f 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 80024a2:	6862      	ldr	r2, [r4, #4]
 80024a4:	0853      	lsrs	r3, r2, #1
 80024a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80024aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80024ae:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024b0:	2000      	movs	r0, #0
        break;
 80024b2:	e7af      	b.n	8002414 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b4:	69e3      	ldr	r3, [r4, #28]
 80024b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ba:	d12b      	bne.n	8002514 <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80024bc:	6862      	ldr	r2, [r4, #4]
 80024be:	0853      	lsrs	r3, r2, #1
 80024c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80024c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80024c8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ca:	2000      	movs	r0, #0
        break;
 80024cc:	e7a2      	b.n	8002414 <UART_SetConfig+0x60>
        ret = HAL_ERROR;
 80024ce:	2001      	movs	r0, #1
 80024d0:	bd38      	pop	{r3, r4, r5, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024d2:	69e3      	ldr	r3, [r4, #28]
 80024d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d8:	d0c9      	beq.n	800246e <UART_SetConfig+0xba>
        ret = HAL_ERROR;
 80024da:	2001      	movs	r0, #1
 80024dc:	bd38      	pop	{r3, r4, r5, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024de:	69e3      	ldr	r3, [r4, #28]
 80024e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e4:	d0ad      	beq.n	8002442 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024e6:	f7ff fb0d 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 80024ea:	6863      	ldr	r3, [r4, #4]
 80024ec:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80024f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80024f4:	b280      	uxth	r0, r0
 80024f6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80024f8:	2000      	movs	r0, #0
        break;
 80024fa:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024fc:	f7ff f9f0 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 8002500:	6863      	ldr	r3, [r4, #4]
 8002502:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002506:	fbb0 f0f3 	udiv	r0, r0, r3
 800250a:	b280      	uxth	r0, r0
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <UART_SetConfig+0x17c>)
 800250e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002510:	2000      	movs	r0, #0
        break;
 8002512:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002514:	6862      	ldr	r2, [r4, #4]
 8002516:	0853      	lsrs	r3, r2, #1
 8002518:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800251c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002520:	b29b      	uxth	r3, r3
 8002522:	4a03      	ldr	r2, [pc, #12]	; (8002530 <UART_SetConfig+0x17c>)
 8002524:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002526:	2000      	movs	r0, #0
}
 8002528:	bd38      	pop	{r3, r4, r5, pc}
 800252a:	bf00      	nop
 800252c:	efff69f3 	.word	0xefff69f3
 8002530:	40013800 	.word	0x40013800
 8002534:	40004400 	.word	0x40004400

08002538 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002538:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800253a:	f013 0f01 	tst.w	r3, #1
 800253e:	d006      	beq.n	800254e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002540:	6802      	ldr	r2, [r0, #0]
 8002542:	6853      	ldr	r3, [r2, #4]
 8002544:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002548:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800254a:	430b      	orrs	r3, r1
 800254c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800254e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002550:	f013 0f02 	tst.w	r3, #2
 8002554:	d006      	beq.n	8002564 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002556:	6802      	ldr	r2, [r0, #0]
 8002558:	6853      	ldr	r3, [r2, #4]
 800255a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002560:	430b      	orrs	r3, r1
 8002562:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002564:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002566:	f013 0f04 	tst.w	r3, #4
 800256a:	d006      	beq.n	800257a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800256c:	6802      	ldr	r2, [r0, #0]
 800256e:	6853      	ldr	r3, [r2, #4]
 8002570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002574:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002576:	430b      	orrs	r3, r1
 8002578:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800257a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800257c:	f013 0f08 	tst.w	r3, #8
 8002580:	d006      	beq.n	8002590 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002582:	6802      	ldr	r2, [r0, #0]
 8002584:	6853      	ldr	r3, [r2, #4]
 8002586:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800258a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800258c:	430b      	orrs	r3, r1
 800258e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002590:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002592:	f013 0f10 	tst.w	r3, #16
 8002596:	d006      	beq.n	80025a6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002598:	6802      	ldr	r2, [r0, #0]
 800259a:	6893      	ldr	r3, [r2, #8]
 800259c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025a0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80025a2:	430b      	orrs	r3, r1
 80025a4:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025a8:	f013 0f20 	tst.w	r3, #32
 80025ac:	d006      	beq.n	80025bc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025ae:	6802      	ldr	r2, [r0, #0]
 80025b0:	6893      	ldr	r3, [r2, #8]
 80025b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025b6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025c2:	d00a      	beq.n	80025da <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025c4:	6802      	ldr	r2, [r0, #0]
 80025c6:	6853      	ldr	r3, [r2, #4]
 80025c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025cc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80025ce:	430b      	orrs	r3, r1
 80025d0:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d8:	d00b      	beq.n	80025f2 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025e0:	d006      	beq.n	80025f0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025e2:	6802      	ldr	r2, [r0, #0]
 80025e4:	6853      	ldr	r3, [r2, #4]
 80025e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80025ea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6053      	str	r3, [r2, #4]
 80025f0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025f2:	6802      	ldr	r2, [r0, #0]
 80025f4:	6853      	ldr	r3, [r2, #4]
 80025f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025fa:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6053      	str	r3, [r2, #4]
 8002600:	e7eb      	b.n	80025da <UART_AdvFeatureConfig+0xa2>

08002602 <UART_WaitOnFlagUntilTimeout>:
{
 8002602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002606:	4607      	mov	r7, r0
 8002608:	460e      	mov	r6, r1
 800260a:	4615      	mov	r5, r2
 800260c:	4698      	mov	r8, r3
 800260e:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	69d3      	ldr	r3, [r2, #28]
 8002614:	ea36 0303 	bics.w	r3, r6, r3
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	42ab      	cmp	r3, r5
 8002620:	d11e      	bne.n	8002660 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002622:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002626:	d0f4      	beq.n	8002612 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002628:	b12c      	cbz	r4, 8002636 <UART_WaitOnFlagUntilTimeout+0x34>
 800262a:	f7fe fadb 	bl	8000be4 <HAL_GetTick>
 800262e:	eba0 0008 	sub.w	r0, r0, r8
 8002632:	4284      	cmp	r4, r0
 8002634:	d2ec      	bcs.n	8002610 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	6813      	ldr	r3, [r2, #0]
 800263a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800263e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	6893      	ldr	r3, [r2, #8]
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800264a:	2320      	movs	r3, #32
 800264c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002650:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002654:	2300      	movs	r3, #0
 8002656:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        return HAL_TIMEOUT;
 800265a:	2003      	movs	r0, #3
 800265c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002660:	2000      	movs	r0, #0
}
 8002662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002666 <UART_CheckIdleState>:
{
 8002666:	b530      	push	{r4, r5, lr}
 8002668:	b083      	sub	sp, #12
 800266a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266c:	2300      	movs	r3, #0
 800266e:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002670:	f7fe fab8 	bl	8000be4 <HAL_GetTick>
 8002674:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f013 0f08 	tst.w	r3, #8
 800267e:	d10e      	bne.n	800269e <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f013 0f04 	tst.w	r3, #4
 8002688:	d117      	bne.n	80026ba <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 800268a:	2320      	movs	r3, #32
 800268c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002690:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8002694:	2000      	movs	r0, #0
 8002696:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 800269a:	b003      	add	sp, #12
 800269c:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800269e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4603      	mov	r3, r0
 80026a6:	2200      	movs	r2, #0
 80026a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ffa8 	bl	8002602 <UART_WaitOnFlagUntilTimeout>
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d0e4      	beq.n	8002680 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80026b6:	2003      	movs	r0, #3
 80026b8:	e7ef      	b.n	800269a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	462b      	mov	r3, r5
 80026c2:	2200      	movs	r2, #0
 80026c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7ff ff9a 	bl	8002602 <UART_WaitOnFlagUntilTimeout>
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d0db      	beq.n	800268a <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80026d2:	2003      	movs	r0, #3
 80026d4:	e7e1      	b.n	800269a <UART_CheckIdleState+0x34>

080026d6 <HAL_UART_Init>:
  if(huart == NULL)
 80026d6:	b378      	cbz	r0, 8002738 <HAL_UART_Init+0x62>
{
 80026d8:	b510      	push	{r4, lr}
 80026da:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80026dc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80026e0:	b30b      	cbz	r3, 8002726 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80026e2:	2324      	movs	r3, #36	; 0x24
 80026e4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80026e8:	6822      	ldr	r2, [r4, #0]
 80026ea:	6813      	ldr	r3, [r2, #0]
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7ff fe5e 	bl	80023b4 <UART_SetConfig>
 80026f8:	2801      	cmp	r0, #1
 80026fa:	d01f      	beq.n	800273c <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026fe:	b9bb      	cbnz	r3, 8002730 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002700:	6822      	ldr	r2, [r4, #0]
 8002702:	6853      	ldr	r3, [r2, #4]
 8002704:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002708:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800270a:	6822      	ldr	r2, [r4, #0]
 800270c:	6893      	ldr	r3, [r2, #8]
 800270e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002712:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002714:	6822      	ldr	r2, [r4, #0]
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ffa1 	bl	8002666 <UART_CheckIdleState>
 8002724:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002726:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800272a:	f000 fd6b 	bl	8003204 <HAL_UART_MspInit>
 800272e:	e7d8      	b.n	80026e2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff ff01 	bl	8002538 <UART_AdvFeatureConfig>
 8002736:	e7e3      	b.n	8002700 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002738:	2001      	movs	r0, #1
 800273a:	4770      	bx	lr
}
 800273c:	bd10      	pop	{r4, pc}

0800273e <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800273e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b21      	cmp	r3, #33	; 0x21
 8002746:	d001      	beq.n	800274c <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002748:	2002      	movs	r0, #2
  }
}
 800274a:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 800274c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002750:	b29b      	uxth	r3, r3
 8002752:	b18b      	cbz	r3, 8002778 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002754:	6883      	ldr	r3, [r0, #8]
 8002756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275a:	d019      	beq.n	8002790 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800275c:	6802      	ldr	r2, [r0, #0]
 800275e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002760:	1c59      	adds	r1, r3, #1
 8002762:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002768:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800276c:	3b01      	subs	r3, #1
 800276e:	b29b      	uxth	r3, r3
 8002770:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002774:	2000      	movs	r0, #0
 8002776:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002778:	6802      	ldr	r2, [r0, #0]
 800277a:	6813      	ldr	r3, [r2, #0]
 800277c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002780:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002782:	6802      	ldr	r2, [r0, #0]
 8002784:	6813      	ldr	r3, [r2, #0]
 8002786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800278a:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 800278c:	2000      	movs	r0, #0
 800278e:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002790:	6903      	ldr	r3, [r0, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e2      	bne.n	800275c <UART_Transmit_IT+0x1e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002796:	6802      	ldr	r2, [r0, #0]
 8002798:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a0:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80027a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80027a4:	3302      	adds	r3, #2
 80027a6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80027a8:	e7de      	b.n	8002768 <UART_Transmit_IT+0x2a>

080027aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027aa:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027ac:	6801      	ldr	r1, [r0, #0]
 80027ae:	680b      	ldr	r3, [r1, #0]
 80027b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027b4:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027b6:	2320      	movs	r3, #32
 80027b8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80027bc:	f7ff fded 	bl	800239a <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80027c0:	2000      	movs	r0, #0
 80027c2:	bd08      	pop	{r3, pc}

080027c4 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027c4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b22      	cmp	r3, #34	; 0x22
 80027cc:	d006      	beq.n	80027dc <UART_Receive_IT+0x18>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80027ce:	6802      	ldr	r2, [r0, #0]
 80027d0:	6993      	ldr	r3, [r2, #24]
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 80027d8:	2002      	movs	r0, #2
 80027da:	4770      	bx	lr
{
 80027dc:	b510      	push	{r4, lr}
  uint16_t  uhMask = huart->Mask;
 80027de:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027e6:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e8:	6882      	ldr	r2, [r0, #8]
 80027ea:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80027ee:	d00d      	beq.n	800280c <UART_Receive_IT+0x48>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80027f0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80027f2:	1c54      	adds	r4, r2, #1
 80027f4:	6544      	str	r4, [r0, #84]	; 0x54
 80027f6:	400b      	ands	r3, r1
 80027f8:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 80027fa:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29b      	uxth	r3, r3
 8002802:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8002806:	b15b      	cbz	r3, 8002820 <UART_Receive_IT+0x5c>
    return HAL_OK;
 8002808:	2000      	movs	r0, #0
  }
}
 800280a:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280c:	6902      	ldr	r2, [r0, #16]
 800280e:	2a00      	cmp	r2, #0
 8002810:	d1ee      	bne.n	80027f0 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002812:	6d42      	ldr	r2, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8002814:	400b      	ands	r3, r1
 8002816:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2U;
 8002818:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800281a:	3302      	adds	r3, #2
 800281c:	6543      	str	r3, [r0, #84]	; 0x54
 800281e:	e7ec      	b.n	80027fa <UART_Receive_IT+0x36>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002820:	6802      	ldr	r2, [r0, #0]
 8002822:	6813      	ldr	r3, [r2, #0]
 8002824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002828:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282a:	6802      	ldr	r2, [r0, #0]
 800282c:	6893      	ldr	r3, [r2, #8]
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002834:	2320      	movs	r3, #32
 8002836:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 800283a:	f7ff fdaf 	bl	800239c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800283e:	2000      	movs	r0, #0
 8002840:	bd10      	pop	{r4, pc}
	...

08002844 <HAL_UART_IRQHandler>:
{
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002848:	6802      	ldr	r2, [r0, #0]
 800284a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800284c:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 800284e:	f013 0f0f 	tst.w	r3, #15
 8002852:	d148      	bne.n	80028e6 <HAL_UART_IRQHandler+0xa2>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002854:	f013 0f20 	tst.w	r3, #32
 8002858:	d002      	beq.n	8002860 <HAL_UART_IRQHandler+0x1c>
 800285a:	f011 0f20 	tst.w	r1, #32
 800285e:	d113      	bne.n	8002888 <HAL_UART_IRQHandler+0x44>
  cr3its = READ_REG(huart->Instance->CR3);
 8002860:	6890      	ldr	r0, [r2, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002862:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002866:	d002      	beq.n	800286e <HAL_UART_IRQHandler+0x2a>
 8002868:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800286c:	d127      	bne.n	80028be <HAL_UART_IRQHandler+0x7a>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800286e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002872:	d002      	beq.n	800287a <HAL_UART_IRQHandler+0x36>
 8002874:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002878:	d12d      	bne.n	80028d6 <HAL_UART_IRQHandler+0x92>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800287a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800287e:	d002      	beq.n	8002886 <HAL_UART_IRQHandler+0x42>
 8002880:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002884:	d12b      	bne.n	80028de <HAL_UART_IRQHandler+0x9a>
 8002886:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002888:	f7ff ff9c 	bl	80027c4 <UART_Receive_IT>
      return;
 800288c:	bd38      	pop	{r3, r4, r5, pc}
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800288e:	f013 0f04 	tst.w	r3, #4
 8002892:	d04f      	beq.n	8002934 <HAL_UART_IRQHandler+0xf0>
 8002894:	2d00      	cmp	r5, #0
 8002896:	d04d      	beq.n	8002934 <HAL_UART_IRQHandler+0xf0>
 8002898:	e045      	b.n	8002926 <HAL_UART_IRQHandler+0xe2>
        UART_Receive_IT(huart);
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff ff92 	bl	80027c4 <UART_Receive_IT>
 80028a0:	e05e      	b.n	8002960 <HAL_UART_IRQHandler+0x11c>
            HAL_UART_ErrorCallback(huart);
 80028a2:	4620      	mov	r0, r4
 80028a4:	f7ff fd7b 	bl	800239e <HAL_UART_ErrorCallback>
 80028a8:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 80028aa:	4620      	mov	r0, r4
 80028ac:	f7ff fd77 	bl	800239e <HAL_UART_ErrorCallback>
 80028b0:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff fd73 	bl	800239e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	66e3      	str	r3, [r4, #108]	; 0x6c
 80028bc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80028be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028c2:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80028c4:	2320      	movs	r3, #32
 80028c6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80028ca:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 80028ce:	4620      	mov	r0, r4
 80028d0:	f000 f86c 	bl	80029ac <HAL_UARTEx_WakeupCallback>
    return;
 80028d4:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 80028d6:	4620      	mov	r0, r4
 80028d8:	f7ff ff31 	bl	800273e <UART_Transmit_IT>
    return;
 80028dc:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff ff63 	bl	80027aa <UART_EndTransmit_IT>
    return;
 80028e4:	bd38      	pop	{r3, r4, r5, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 80028e6:	6890      	ldr	r0, [r2, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80028e8:	f010 0501 	ands.w	r5, r0, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_UART_IRQHandler+0xb0>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80028ee:	f411 7f90 	tst.w	r1, #288	; 0x120
 80028f2:	d0b6      	beq.n	8002862 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028f4:	f013 0f01 	tst.w	r3, #1
 80028f8:	d007      	beq.n	800290a <HAL_UART_IRQHandler+0xc6>
 80028fa:	f411 7f80 	tst.w	r1, #256	; 0x100
 80028fe:	d004      	beq.n	800290a <HAL_UART_IRQHandler+0xc6>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002900:	2001      	movs	r0, #1
 8002902:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002904:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002906:	4302      	orrs	r2, r0
 8002908:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800290a:	f013 0f02 	tst.w	r3, #2
 800290e:	d0be      	beq.n	800288e <HAL_UART_IRQHandler+0x4a>
 8002910:	b185      	cbz	r5, 8002934 <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002912:	6822      	ldr	r2, [r4, #0]
 8002914:	2002      	movs	r0, #2
 8002916:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002918:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800291a:	f042 0204 	orr.w	r2, r2, #4
 800291e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002920:	f013 0f04 	tst.w	r3, #4
 8002924:	d006      	beq.n	8002934 <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002926:	6822      	ldr	r2, [r4, #0]
 8002928:	2004      	movs	r0, #4
 800292a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800292c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800292e:	f042 0202 	orr.w	r2, r2, #2
 8002932:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002934:	f013 0f08 	tst.w	r3, #8
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x10a>
 800293a:	f011 0f20 	tst.w	r1, #32
 800293e:	d100      	bne.n	8002942 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002940:	b12d      	cbz	r5, 800294e <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	2008      	movs	r0, #8
 8002946:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002948:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800294a:	4302      	orrs	r2, r0
 800294c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800294e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002950:	2a00      	cmp	r2, #0
 8002952:	d098      	beq.n	8002886 <HAL_UART_IRQHandler+0x42>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002954:	f013 0f20 	tst.w	r3, #32
 8002958:	d002      	beq.n	8002960 <HAL_UART_IRQHandler+0x11c>
 800295a:	f011 0f20 	tst.w	r1, #32
 800295e:	d19c      	bne.n	800289a <HAL_UART_IRQHandler+0x56>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002960:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002962:	f013 0f08 	tst.w	r3, #8
 8002966:	d104      	bne.n	8002972 <HAL_UART_IRQHandler+0x12e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800296c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002970:	d09f      	beq.n	80028b2 <HAL_UART_IRQHandler+0x6e>
        UART_EndRxTransfer(huart);
 8002972:	4620      	mov	r0, r4
 8002974:	f7ff fd03 	bl	800237e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002980:	d093      	beq.n	80028aa <HAL_UART_IRQHandler+0x66>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002988:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800298a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800298c:	2b00      	cmp	r3, #0
 800298e:	d088      	beq.n	80028a2 <HAL_UART_IRQHandler+0x5e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002990:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <HAL_UART_IRQHandler+0x164>)
 8002992:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002994:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002996:	f7fe fa43 	bl	8000e20 <HAL_DMA_Abort_IT>
 800299a:	2800      	cmp	r0, #0
 800299c:	f43f af73 	beq.w	8002886 <HAL_UART_IRQHandler+0x42>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029a0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80029a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029a4:	4798      	blx	r3
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
 80029a8:	080023a1 	.word	0x080023a1

080029ac <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80029ac:	4770      	bx	lr
	...

080029b0 <IEC60601_TurnOnAlarm>:



void IEC60601_TurnOnAlarm(Prio_Type priority, Alarm_Type alarm_type) {
   
  _priority = priority;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <IEC60601_TurnOnAlarm+0x40>)
 80029b2:	7018      	strb	r0, [r3, #0]
  _alarm_type = alarm_type;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <IEC60601_TurnOnAlarm+0x44>)
 80029b6:	7019      	strb	r1, [r3, #0]
  
  _mscount = 0;    
 80029b8:	2300      	movs	r3, #0
 80029ba:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <IEC60601_TurnOnAlarm+0x48>)
 80029bc:	6013      	str	r3, [r2, #0]
  _sequence = 1;
 80029be:	2101      	movs	r1, #1
 80029c0:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <IEC60601_TurnOnAlarm+0x4c>)
 80029c2:	6011      	str	r1, [r2, #0]

  _rise_begin = 0;
 80029c4:	490e      	ldr	r1, [pc, #56]	; (8002a00 <IEC60601_TurnOnAlarm+0x50>)
 80029c6:	600b      	str	r3, [r1, #0]
  _note_count = 0;
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <IEC60601_TurnOnAlarm+0x54>)
 80029ca:	6013      	str	r3, [r2, #0]
  _fall_begin = _rise_begin + _RiseTimes[_priority] + _DurationTimes[_priority][_note_count];
 80029cc:	6809      	ldr	r1, [r1, #0]
 80029ce:	6813      	ldr	r3, [r2, #0]
 80029d0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80029d4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80029d8:	441a      	add	r2, r3
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <IEC60601_TurnOnAlarm+0x58>)
 80029dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80029e0:	480a      	ldr	r0, [pc, #40]	; (8002a0c <IEC60601_TurnOnAlarm+0x5c>)
 80029e2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80029e6:	4413      	add	r3, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <IEC60601_TurnOnAlarm+0x60>)
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4770      	bx	lr
 80029f0:	20000048 	.word	0x20000048
 80029f4:	20000268 	.word	0x20000268
 80029f8:	20000270 	.word	0x20000270
 80029fc:	20000274 	.word	0x20000274
 8002a00:	2000027c 	.word	0x2000027c
 8002a04:	2000003c 	.word	0x2000003c
 8002a08:	0800475c 	.word	0x0800475c
 8002a0c:	080044e0 	.word	0x080044e0
 8002a10:	20000044 	.word	0x20000044

08002a14 <IEC60601_InitSequencer>:

// This modules provides the note sequencers and envelope control 
// functions for the alarm notes for the IEC Medical Alert tone demo.

void IEC60601_InitSequencer(void) {
  _envelope_on = false;
 8002a14:	2300      	movs	r3, #0
 8002a16:	4a02      	ldr	r2, [pc, #8]	; (8002a20 <IEC60601_InitSequencer+0xc>)
 8002a18:	6013      	str	r3, [r2, #0]
  _envelope_off = false;
 8002a1a:	4a02      	ldr	r2, [pc, #8]	; (8002a24 <IEC60601_InitSequencer+0x10>)
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4770      	bx	lr
 8002a20:	20000040 	.word	0x20000040
 8002a24:	2000026c 	.word	0x2000026c

08002a28 <IEC60601_TurnOnNote>:
}


void IEC60601_TurnOnNote(void) {
  _envelope = 0;
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <IEC60601_TurnOnNote+0x14>)
 8002a2c:	601a      	str	r2, [r3, #0]
  _note_on = true;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <IEC60601_TurnOnNote+0x18>)
 8002a32:	6013      	str	r3, [r2, #0]
  _envelope_on = true;
 8002a34:	4a03      	ldr	r2, [pc, #12]	; (8002a44 <IEC60601_TurnOnNote+0x1c>)
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000278 	.word	0x20000278
 8002a40:	20000288 	.word	0x20000288
 8002a44:	20000040 	.word	0x20000040

08002a48 <IEC60601_Sequence>:

void IEC60601_TurnOffNote(void) {
  _note_on = false;
}

void IEC60601_Sequence (void) {
 8002a48:	b510      	push	{r4, lr}
	if (_mscount >= _rise_begin)
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <IEC60601_Sequence+0xc8>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <IEC60601_Sequence+0xcc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d339      	bcc.n	8002aca <IEC60601_Sequence+0x82>
	{
        if (_DurationTimes[_priority][_note_count] == 0){
 8002a56:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <IEC60601_Sequence+0xd0>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	4a30      	ldr	r2, [pc, #192]	; (8002b1c <IEC60601_Sequence+0xd4>)
 8002a5c:	6811      	ldr	r1, [r2, #0]
 8002a5e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002a62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002a66:	440a      	add	r2, r1
 8002a68:	492d      	ldr	r1, [pc, #180]	; (8002b20 <IEC60601_Sequence+0xd8>)
 8002a6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a6e:	b912      	cbnz	r2, 8002a76 <IEC60601_Sequence+0x2e>
            _sequence = 0;
 8002a70:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <IEC60601_Sequence+0xdc>)
 8002a72:	601a      	str	r2, [r3, #0]
            return;//last note
 8002a74:	bd10      	pop	{r4, pc}
        }

		_active_note = _TuneSequence [_alarm_type][_note_count];  // n-th note of sequence
 8002a76:	4c29      	ldr	r4, [pc, #164]	; (8002b1c <IEC60601_Sequence+0xd4>)
 8002a78:	6820      	ldr	r0, [r4, #0]
 8002a7a:	4a2b      	ldr	r2, [pc, #172]	; (8002b28 <IEC60601_Sequence+0xe0>)
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002a82:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8002a86:	4929      	ldr	r1, [pc, #164]	; (8002b2c <IEC60601_Sequence+0xe4>)
 8002a88:	440a      	add	r2, r1
 8002a8a:	5c11      	ldrb	r1, [r2, r0]
 8002a8c:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <IEC60601_Sequence+0xe8>)
 8002a8e:	7011      	strb	r1, [r2, #0]
        _note_level = _NoteLevel[_priority][_note_count];
 8002a90:	6822      	ldr	r2, [r4, #0]
 8002a92:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002a96:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <IEC60601_Sequence+0xec>)
 8002a9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002aa2:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <IEC60601_Sequence+0xf0>)
 8002aa4:	601a      	str	r2, [r3, #0]
        IEC60601_TurnOnNote();
 8002aa6:	f7ff ffbf 	bl	8002a28 <IEC60601_TurnOnNote>
        _rise_begin = _fall_begin + _SpaceTimes[_priority][_note_count];
 8002aaa:	6821      	ldr	r1, [r4, #0]
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <IEC60601_Sequence+0xf4>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <IEC60601_Sequence+0xd0>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002ab8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002abc:	440b      	add	r3, r1
 8002abe:	4920      	ldr	r1, [pc, #128]	; (8002b40 <IEC60601_Sequence+0xf8>)
 8002ac0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <IEC60601_Sequence+0xcc>)
 8002ac8:	6013      	str	r3, [r2, #0]

	}
	if (_mscount >= _fall_begin)
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <IEC60601_Sequence+0xc8>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <IEC60601_Sequence+0xf4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d31a      	bcc.n	8002b0c <IEC60601_Sequence+0xc4>
	{
		_note_on = false;
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <IEC60601_Sequence+0xfc>)
 8002ada:	601a      	str	r2, [r3, #0]
		_fall_begin = _rise_begin + _RiseTimes[_priority] + _DurationTimes[_priority][_note_count];
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <IEC60601_Sequence+0xd0>)
 8002ade:	7819      	ldrb	r1, [r3, #0]
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <IEC60601_Sequence+0xcc>)
 8002ae2:	681c      	ldr	r4, [r3, #0]
 8002ae4:	480d      	ldr	r0, [pc, #52]	; (8002b1c <IEC60601_Sequence+0xd4>)
 8002ae6:	6803      	ldr	r3, [r0, #0]
 8002ae8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002aec:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8002af0:	441a      	add	r2, r3
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <IEC60601_Sequence+0x100>)
 8002af4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002af8:	4909      	ldr	r1, [pc, #36]	; (8002b20 <IEC60601_Sequence+0xd8>)
 8002afa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002afe:	4413      	add	r3, r2
 8002b00:	4423      	add	r3, r4
 8002b02:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <IEC60601_Sequence+0xf4>)
 8002b04:	6013      	str	r3, [r2, #0]
		_note_count++;
 8002b06:	6803      	ldr	r3, [r0, #0]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	6003      	str	r3, [r0, #0]
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000270 	.word	0x20000270
 8002b14:	2000027c 	.word	0x2000027c
 8002b18:	20000048 	.word	0x20000048
 8002b1c:	2000003c 	.word	0x2000003c
 8002b20:	080044e0 	.word	0x080044e0
 8002b24:	20000274 	.word	0x20000274
 8002b28:	20000268 	.word	0x20000268
 8002b2c:	080047ec 	.word	0x080047ec
 8002b30:	20000284 	.word	0x20000284
 8002b34:	080046d8 	.word	0x080046d8
 8002b38:	20000280 	.word	0x20000280
 8002b3c:	20000044 	.word	0x20000044
 8002b40:	08004768 	.word	0x08004768
 8002b44:	20000288 	.word	0x20000288
 8002b48:	0800475c 	.word	0x0800475c

08002b4c <IEC60601_EnvelopeControl>:



void IEC60601_EnvelopeControl(void) {

   if (_note_on) {
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <IEC60601_EnvelopeControl+0x6c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b19b      	cbz	r3, 8002b7a <IEC60601_EnvelopeControl+0x2e>
        if (_envelope >= _note_level) {
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <IEC60601_EnvelopeControl+0x70>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <IEC60601_EnvelopeControl+0x74>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	db02      	blt.n	8002b64 <IEC60601_EnvelopeControl+0x18>
         _envelope = _note_level;
 8002b5e:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <IEC60601_EnvelopeControl+0x70>)
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4770      	bx	lr
     }
     else {
    	 _envelope += _note_level/_RiseTimes[_priority];
 8002b64:	4917      	ldr	r1, [pc, #92]	; (8002bc4 <IEC60601_EnvelopeControl+0x78>)
 8002b66:	7808      	ldrb	r0, [r1, #0]
 8002b68:	4917      	ldr	r1, [pc, #92]	; (8002bc8 <IEC60601_EnvelopeControl+0x7c>)
 8002b6a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002b6e:	fb93 f3f1 	sdiv	r3, r3, r1
 8002b72:	4413      	add	r3, r2
 8002b74:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <IEC60601_EnvelopeControl+0x70>)
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4770      	bx	lr
     }
   }
  else {//_note_on == false
      if (_envelope > 0) {
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <IEC60601_EnvelopeControl+0x70>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	dd0e      	ble.n	8002ba0 <IEC60601_EnvelopeControl+0x54>
    	  _envelope -= _note_level/_FallTimes[_priority];
 8002b82:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <IEC60601_EnvelopeControl+0x78>)
 8002b84:	7810      	ldrb	r0, [r2, #0]
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <IEC60601_EnvelopeControl+0x74>)
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	4910      	ldr	r1, [pc, #64]	; (8002bcc <IEC60601_EnvelopeControl+0x80>)
 8002b8c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002b90:	fb92 f2f1 	sdiv	r2, r2, r1
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <IEC60601_EnvelopeControl+0x70>)
 8002b98:	6013      	str	r3, [r2, #0]
      }
  }
  if ((_envelope <= 0) && (!_note_on) && (_envelope_on) ) {
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	dd00      	ble.n	8002ba0 <IEC60601_EnvelopeControl+0x54>
 8002b9e:	4770      	bx	lr
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <IEC60601_EnvelopeControl+0x84>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0fa      	beq.n	8002b9e <IEC60601_EnvelopeControl+0x52>
    _envelope = 0;
 8002ba8:	2200      	movs	r2, #0
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <IEC60601_EnvelopeControl+0x70>)
 8002bac:	601a      	str	r2, [r3, #0]
    _envelope_off = true;              // synchronize with zero cross
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <IEC60601_EnvelopeControl+0x88>)
 8002bb2:	601a      	str	r2, [r3, #0]
  }
}
 8002bb4:	e7f3      	b.n	8002b9e <IEC60601_EnvelopeControl+0x52>
 8002bb6:	bf00      	nop
 8002bb8:	20000288 	.word	0x20000288
 8002bbc:	20000278 	.word	0x20000278
 8002bc0:	20000280 	.word	0x20000280
 8002bc4:	20000048 	.word	0x20000048
 8002bc8:	0800475c 	.word	0x0800475c
 8002bcc:	08004564 	.word	0x08004564
 8002bd0:	20000040 	.word	0x20000040
 8002bd4:	2000026c 	.word	0x2000026c

08002bd8 <IEC60601_InitToneCoefArray>:

//    LPC_DAC->DACR = 0x8000;                  // init DAC to half on voltage
}


void IEC60601_InitToneCoefArray(void) {      // generate the coefficients and init array for tones
 8002bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bdc:	ed2d 8b02 	vpush	{d8}
 8002be0:	4d2b      	ldr	r5, [pc, #172]	; (8002c90 <IEC60601_InitToneCoefArray+0xb8>)
 8002be2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002c9c <IEC60601_InitToneCoefArray+0xc4>
 8002be6:	f505 7bb4 	add.w	fp, r5, #360	; 0x168

  for (j=0;j<9;j++)                // Initialize all nine scale tones (C4-C5)
  {
     for (n=0;n<5;n++)             // fundamental and 4 harmonics for IEC60601-1-8
     {
        _Waves[j][n].coef = ((cos (2*PI*(float)(_FreqArray[j][n]/FSAMPLE)))* 32768) ;       // 2* taken out, put in final calc as a shift
 8002bea:	2600      	movs	r6, #0
 8002bec:	4f29      	ldr	r7, [pc, #164]	; (8002c94 <IEC60601_InitToneCoefArray+0xbc>)
        _Waves[j][n].y1   = 0;
 8002bee:	f04f 0900 	mov.w	r9, #0
 8002bf2:	e004      	b.n	8002bfe <IEC60601_InitToneCoefArray+0x26>
 8002bf4:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
 8002bf8:	4645      	mov	r5, r8
  for (j=0;j<9;j++)                // Initialize all nine scale tones (C4-C5)
 8002bfa:	45c3      	cmp	fp, r8
 8002bfc:	d03a      	beq.n	8002c74 <IEC60601_InitToneCoefArray+0x9c>
 8002bfe:	f105 0828 	add.w	r8, r5, #40	; 0x28
void IEC60601_InitToneCoefArray(void) {      // generate the coefficients and init array for tones
 8002c02:	4654      	mov	r4, sl
        _Waves[j][n].coef = ((cos (2*PI*(float)(_FreqArray[j][n]/FSAMPLE)))* 32768) ;       // 2* taken out, put in final calc as a shift
 8002c04:	a31e      	add	r3, pc, #120	; (adr r3, 8002c80 <IEC60601_InitToneCoefArray+0xa8>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002c0e:	f7fd fdbd 	bl	800078c <__aeabi_ddiv>
 8002c12:	f7fd ff53 	bl	8000abc <__aeabi_d2f>
 8002c16:	f7fd fc3b 	bl	8000490 <__aeabi_f2d>
 8002c1a:	a31b      	add	r3, pc, #108	; (adr r3, 8002c88 <IEC60601_InitToneCoefArray+0xb0>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fc8a 	bl	8000538 <__aeabi_dmul>
 8002c24:	ec41 0b18 	vmov	d8, r0, r1
 8002c28:	ec41 0b10 	vmov	d0, r0, r1
 8002c2c:	f000 fbb4 	bl	8003398 <cos>
 8002c30:	4632      	mov	r2, r6
 8002c32:	463b      	mov	r3, r7
 8002c34:	ec51 0b10 	vmov	r0, r1, d0
 8002c38:	f7fd fc7e 	bl	8000538 <__aeabi_dmul>
 8002c3c:	f7fd ff16 	bl	8000a6c <__aeabi_d2iz>
 8002c40:	8020      	strh	r0, [r4, #0]
        _Waves[j][n].y1   = 0;
 8002c42:	f8c4 9004 	str.w	r9, [r4, #4]
        _Waves[j][n].y2   = ((sin (2*PI*(float)((_FreqArray[j][n]/FSAMPLE))) * AMPL * 32768));    // Try 8388608 (+8 bits) w/ long coef
 8002c46:	eeb0 0a48 	vmov.f32	s0, s16
 8002c4a:	eef0 0a68 	vmov.f32	s1, s17
 8002c4e:	f000 fbe7 	bl	8003420 <sin>
 8002c52:	2200      	movs	r2, #0
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <IEC60601_InitToneCoefArray+0xc0>)
 8002c56:	ec51 0b10 	vmov	r0, r1, d0
 8002c5a:	f7fd fc6d 	bl	8000538 <__aeabi_dmul>
 8002c5e:	4632      	mov	r2, r6
 8002c60:	463b      	mov	r3, r7
 8002c62:	f7fd fc69 	bl	8000538 <__aeabi_dmul>
 8002c66:	f7fd ff01 	bl	8000a6c <__aeabi_d2iz>
 8002c6a:	60a0      	str	r0, [r4, #8]
 8002c6c:	340c      	adds	r4, #12
     for (n=0;n<5;n++)             // fundamental and 4 harmonics for IEC60601-1-8
 8002c6e:	4545      	cmp	r5, r8
 8002c70:	d1c8      	bne.n	8002c04 <IEC60601_InitToneCoefArray+0x2c>
 8002c72:	e7bf      	b.n	8002bf4 <IEC60601_InitToneCoefArray+0x1c>
     }
  }
}
 8002c74:	ecbd 8b02 	vpop	{d8}
 8002c78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7c:	f3af 8000 	nop.w
 8002c80:	00000000 	.word	0x00000000
 8002c84:	40d86a00 	.word	0x40d86a00
 8002c88:	4d12d84a 	.word	0x4d12d84a
 8002c8c:	401921fb 	.word	0x401921fb
 8002c90:	08004570 	.word	0x08004570
 8002c94:	40e00000 	.word	0x40e00000
 8002c98:	40490000 	.word	0x40490000
 8002c9c:	2000004c 	.word	0x2000004c

08002ca0 <IEC60601_init>:
void IEC60601_init(void) {
 8002ca0:	b508      	push	{r3, lr}
    IEC60601_InitSequencer();
 8002ca2:	f7ff feb7 	bl	8002a14 <IEC60601_InitSequencer>
    IEC60601_InitToneCoefArray();
 8002ca6:	f7ff ff97 	bl	8002bd8 <IEC60601_InitToneCoefArray>
 8002caa:	bd08      	pop	{r3, pc}

08002cac <IEC60601_GenerateMultiTone>:


void IEC60601_GenerateMultiTone (struct wave *t) {
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  output = 0;                // clear output accumulator 
  for (i=0; i<5; i++) {        // cycle through the 5 structures in the array
    y = ((t->coef *(long long)(t->y1)>>14)) - t->y2;   // Goertzel Calculation
    t->y2 = t->y1;                                     // store for next time
    t->y1 = y;                                         // store for next time
    env_weights = _envelope * _ToneWeights[i]>>8;
 8002cae:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <IEC60601_GenerateMultiTone+0xa8>)
 8002cb0:	f8d3 e000 	ldr.w	lr, [r3]
 8002cb4:	f100 010c 	add.w	r1, r0, #12
 8002cb8:	4d27      	ldr	r5, [pc, #156]	; (8002d58 <IEC60601_GenerateMultiTone+0xac>)
 8002cba:	3048      	adds	r0, #72	; 0x48
  output = 0;                // clear output accumulator 
 8002cbc:	2400      	movs	r4, #0
    y = ((t->coef *(long long)(t->y1)>>14)) - t->y2;   // Goertzel Calculation
 8002cbe:	f851 cc08 	ldr.w	ip, [r1, #-8]
 8002cc2:	f931 2c0c 	ldrsh.w	r2, [r1, #-12]
 8002cc6:	17d3      	asrs	r3, r2, #31
 8002cc8:	4666      	mov	r6, ip
 8002cca:	17f7      	asrs	r7, r6, #31
 8002ccc:	fb02 f607 	mul.w	r6, r2, r7
 8002cd0:	fb0c 6303 	mla	r3, ip, r3, r6
 8002cd4:	fba2 670c 	umull	r6, r7, r2, ip
 8002cd8:	441f      	add	r7, r3
 8002cda:	0bb3      	lsrs	r3, r6, #14
 8002cdc:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
 8002ce0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8002ce4:	1a9b      	subs	r3, r3, r2
    t->y2 = t->y1;                                     // store for next time
 8002ce6:	f841 cc04 	str.w	ip, [r1, #-4]
    t->y1 = y;                                         // store for next time
 8002cea:	f841 3c08 	str.w	r3, [r1, #-8]
    env_weights = _envelope * _ToneWeights[i]>>8;
 8002cee:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002cf2:	fb0e f202 	mul.w	r2, lr, r2
 8002cf6:	1212      	asrs	r2, r2, #8
    output += ((t->y1 * env_weights) >> 8);      // sum fundamental and harmonics
 8002cf8:	fb03 f302 	mul.w	r3, r3, r2
 8002cfc:	eb04 2423 	add.w	r4, r4, r3, asr #8
 8002d00:	310c      	adds	r1, #12
  for (i=0; i<5; i++) {        // cycle through the 5 structures in the array
 8002d02:	4281      	cmp	r1, r0
 8002d04:	d1db      	bne.n	8002cbe <IEC60601_GenerateMultiTone+0x12>
    t++;                                      // increment structure pointer
  }
#ifdef STM32F303x8 //AP31P
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_L, ((output >> 8) & 0xFFF0) + 0x8000);
 8002d06:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002d0a:	ea03 2324 	and.w	r3, r3, r4, asr #8
 8002d0e:	4d13      	ldr	r5, [pc, #76]	; (8002d5c <IEC60601_GenerateMultiTone+0xb0>)
 8002d10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002d14:	2204      	movs	r2, #4
 8002d16:	2100      	movs	r1, #0
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f7fe f804 	bl	8000d26 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4628      	mov	r0, r5
 8002d22:	f7fe f817 	bl	8000d54 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_L, ((output >> 8) & 0xFFF0) + 0x8000);
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
#endif

  
  if ((output >= 0) && (output_old <= 0)) {  // zero crossing detect
 8002d26:	2c00      	cmp	r4, #0
 8002d28:	db03      	blt.n	8002d32 <IEC60601_GenerateMultiTone+0x86>
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <IEC60601_GenerateMultiTone+0xb4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	dd02      	ble.n	8002d38 <IEC60601_GenerateMultiTone+0x8c>
     if (_envelope_off && (!_note_on)) {
        _envelope_on = false;      // sychronizes turn off with zero cross
        _envelope_off = false;     // reset envelope flag 
     }
  }     
  output_old = output;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <IEC60601_GenerateMultiTone+0xb4>)
 8002d34:	601c      	str	r4, [r3, #0]
 8002d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     if (_envelope_off && (!_note_on)) {
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <IEC60601_GenerateMultiTone+0xb8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f8      	beq.n	8002d32 <IEC60601_GenerateMultiTone+0x86>
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <IEC60601_GenerateMultiTone+0xbc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f4      	bne.n	8002d32 <IEC60601_GenerateMultiTone+0x86>
        _envelope_on = false;      // sychronizes turn off with zero cross
 8002d48:	4a08      	ldr	r2, [pc, #32]	; (8002d6c <IEC60601_GenerateMultiTone+0xc0>)
 8002d4a:	6013      	str	r3, [r2, #0]
        _envelope_off = false;     // reset envelope flag 
 8002d4c:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <IEC60601_GenerateMultiTone+0xb8>)
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e7ef      	b.n	8002d32 <IEC60601_GenerateMultiTone+0x86>
 8002d52:	bf00      	nop
 8002d54:	20000278 	.word	0x20000278
 8002d58:	20000008 	.word	0x20000008
 8002d5c:	200002c0 	.word	0x200002c0
 8002d60:	20000030 	.word	0x20000030
 8002d64:	2000026c 	.word	0x2000026c
 8002d68:	20000288 	.word	0x20000288
 8002d6c:	20000040 	.word	0x20000040

08002d70 <IEC60601_TimerInteruptHandler>:
  IEC60601_GenerateMultiTone (&Waves[note][0]);
}
#endif


void IEC60601_TimerInteruptHandler (void){
 8002d70:	b508      	push	{r3, lr}
#if(DEBUG_ON)
// Activate Testpins for timing 
    TimInt = 1;  
#endif
  
    if (_envelope_on) {
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <IEC60601_TimerInteruptHandler+0x4c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b933      	cbnz	r3, 8002d86 <IEC60601_TimerInteruptHandler+0x16>
//Oude code 
//      _OutputTones(_active_note, _note_level); // parameters are set in sequencer
    	IEC60601_GenerateMultiTone (&_Waves[_active_note][0]);    // parameters set in sequencer
    }            

    timeval++;
 8002d78:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <IEC60601_TimerInteruptHandler+0x50>)
 8002d7a:	6813      	ldr	r3, [r2, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	6013      	str	r3, [r2, #0]
    if (timeval == 25) {          // millisecond interval (@ 25 khz sample rate)
 8002d80:	2b19      	cmp	r3, #25
 8002d82:	d00a      	beq.n	8002d9a <IEC60601_TimerInteruptHandler+0x2a>
 8002d84:	bd08      	pop	{r3, pc}
    	IEC60601_GenerateMultiTone (&_Waves[_active_note][0]);    // parameters set in sequencer
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <IEC60601_TimerInteruptHandler+0x54>)
 8002d88:	7818      	ldrb	r0, [r3, #0]
 8002d8a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <IEC60601_TimerInteruptHandler+0x58>)
 8002d90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002d94:	f7ff ff8a 	bl	8002cac <IEC60601_GenerateMultiTone>
 8002d98:	e7ee      	b.n	8002d78 <IEC60601_TimerInteruptHandler+0x8>

#if(DEBUG_ON)
        // Activate Testpins for timing 
        SeqInt=1;  
#endif  
        if (_sequence != 0) {
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <IEC60601_TimerInteruptHandler+0x5c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b94b      	cbnz	r3, 8002db4 <IEC60601_TimerInteruptHandler+0x44>
        	IEC60601_Sequence();
        }
        timeval = 0;            // clear interval counter
 8002da0:	2200      	movs	r2, #0
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <IEC60601_TimerInteruptHandler+0x50>)
 8002da4:	601a      	str	r2, [r3, #0]
        _mscount++;             // increment ms counter
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <IEC60601_TimerInteruptHandler+0x60>)
 8002da8:	6813      	ldr	r3, [r2, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	6013      	str	r3, [r2, #0]
        IEC60601_EnvelopeControl();
 8002dae:	f7ff fecd 	bl	8002b4c <IEC60601_EnvelopeControl>
#if(DEBUG_ON)
// Activate Testpins for timing 
    TimInt = 0;  
#endif

}
 8002db2:	e7e7      	b.n	8002d84 <IEC60601_TimerInteruptHandler+0x14>
        	IEC60601_Sequence();
 8002db4:	f7ff fe48 	bl	8002a48 <IEC60601_Sequence>
 8002db8:	e7f2      	b.n	8002da0 <IEC60601_TimerInteruptHandler+0x30>
 8002dba:	bf00      	nop
 8002dbc:	20000040 	.word	0x20000040
 8002dc0:	20000034 	.word	0x20000034
 8002dc4:	20000284 	.word	0x20000284
 8002dc8:	2000004c 	.word	0x2000004c
 8002dcc:	20000274 	.word	0x20000274
 8002dd0:	20000270 	.word	0x20000270

08002dd4 <Test_Alarm>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void Test_Alarm(void)
{
 8002dd4:	b508      	push	{r3, lr}
	HAL_Delay(5000);
 8002dd6:	f241 3088 	movw	r0, #5000	; 0x1388
 8002dda:	f7fd ff09 	bl	8000bf0 <HAL_Delay>
	IEC60601_TurnOnAlarm(HIGH, DRUG_DELIVERY);
 8002dde:	2106      	movs	r1, #6
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7ff fde5 	bl	80029b0 <IEC60601_TurnOnAlarm>
	HAL_Delay(7000);
 8002de6:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002dea:	f7fd ff01 	bl	8000bf0 <HAL_Delay>
	IEC60601_TurnOnAlarm(HIGH, DRUG_DELIVERY);
 8002dee:	2106      	movs	r1, #6
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7ff fddd 	bl	80029b0 <IEC60601_TurnOnAlarm>
 8002df6:	bd08      	pop	{r3, pc}

08002df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df8:	b500      	push	{lr}
 8002dfa:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e00:	2201      	movs	r2, #1
 8002e02:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002e04:	2210      	movs	r2, #16
 8002e06:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e08:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8002e0e:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
 8002e12:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e14:	a806      	add	r0, sp, #24
 8002e16:	f7fe fa3f 	bl	8001298 <HAL_RCC_OscConfig>
 8002e1a:	bb40      	cbnz	r0, 8002e6e <SystemClock_Config+0x76>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e1c:	230f      	movs	r3, #15
 8002e1e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e20:	2102      	movs	r1, #2
 8002e22:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e24:	2300      	movs	r3, #0
 8002e26:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e2e:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e30:	a801      	add	r0, sp, #4
 8002e32:	f7fe fd89 	bl	8001948 <HAL_RCC_ClockConfig>
 8002e36:	b9d8      	cbnz	r0, 8002e70 <SystemClock_Config+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_128);
 8002e38:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002e3c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002e40:	2000      	movs	r0, #0
 8002e42:	f7fe fd25 	bl	8001890 <HAL_RCC_MCOConfig>

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002e46:	f7fe fe57 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <SystemClock_Config+0x7c>)
 8002e4c:	fba3 3000 	umull	r3, r0, r3, r0
 8002e50:	0980      	lsrs	r0, r0, #6
 8002e52:	f7fd ff2f 	bl	8000cb4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002e56:	2004      	movs	r0, #4
 8002e58:	f7fd ff42 	bl	8000ce0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4611      	mov	r1, r2
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	f7fd feea 	bl	8000c3c <HAL_NVIC_SetPriority>
}
 8002e68:	b011      	add	sp, #68	; 0x44
 8002e6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e6e:	e7fe      	b.n	8002e6e <SystemClock_Config+0x76>
 8002e70:	e7fe      	b.n	8002e70 <SystemClock_Config+0x78>
 8002e72:	bf00      	nop
 8002e74:	10624dd3 	.word	0x10624dd3

08002e78 <main>:
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8002e7c:	f7fd fe94 	bl	8000ba8 <HAL_Init>
  SystemClock_Config();
 8002e80:	f7ff ffba 	bl	8002df8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e84:	4b81      	ldr	r3, [pc, #516]	; (800308c <main+0x214>)
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002e8c:	615a      	str	r2, [r3, #20]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002e94:	9201      	str	r2, [sp, #4]
 8002e96:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e9e:	615a      	str	r2, [r3, #20]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002ea6:	9202      	str	r2, [sp, #8]
 8002ea8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002eb0:	615a      	str	r2, [r3, #20]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb8:	9303      	str	r3, [sp, #12]
 8002eba:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002ebc:	4d74      	ldr	r5, [pc, #464]	; (8003090 <main+0x218>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2108      	movs	r1, #8
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f7fe f89a 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ec8:	2702      	movs	r7, #2
 8002eca:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ecc:	2603      	movs	r6, #3
 8002ece:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2400      	movs	r4, #0
 8002ed2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ed4:	a90b      	add	r1, sp, #44	; 0x2c
 8002ed6:	486f      	ldr	r0, [pc, #444]	; (8003094 <main+0x21c>)
 8002ed8:	f7fd ffc8 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA9 
                           PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_9 
 8002edc:	f640 6323 	movw	r3, #3619	; 0xe23
 8002ee0:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee2:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	a90b      	add	r1, sp, #44	; 0x2c
 8002ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eec:	f7fd ffbe 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8002ef0:	23f3      	movs	r3, #243	; 0xf3
 8002ef2:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef4:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	a90b      	add	r1, sp, #44	; 0x2c
 8002efa:	4628      	mov	r0, r5
 8002efc:	f7fd ffb6 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f04:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f0c:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0e:	a90b      	add	r1, sp, #44	; 0x2c
 8002f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f14:	f7fd ffaa 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : JUMPER_Pin */
  GPIO_InitStruct.Pin = JUMPER_Pin;
 8002f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f1c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f1e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(JUMPER_GPIO_Port, &GPIO_InitStruct);
 8002f22:	a90b      	add	r1, sp, #44	; 0x2c
 8002f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f28:	f7fd ffa0 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f30:	2301      	movs	r3, #1
 8002f32:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002f38:	a90b      	add	r1, sp, #44	; 0x2c
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	f7fd ff96 	bl	8000e6c <HAL_GPIO_Init>
  hdac1.Instance = DAC1;
 8002f40:	4855      	ldr	r0, [pc, #340]	; (8003098 <main+0x220>)
 8002f42:	4b56      	ldr	r3, [pc, #344]	; (800309c <main+0x224>)
 8002f44:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002f46:	f7fd fedc 	bl	8000d02 <HAL_DAC_Init>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	f040 8093 	bne.w	8003076 <main+0x1fe>
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8002f50:	233c      	movs	r3, #60	; 0x3c
 8002f52:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002f54:	2200      	movs	r2, #0
 8002f56:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002f58:	a90b      	add	r1, sp, #44	; 0x2c
 8002f5a:	484f      	ldr	r0, [pc, #316]	; (8003098 <main+0x220>)
 8002f5c:	f7fd ff2a 	bl	8000db4 <HAL_DAC_ConfigChannel>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	f040 8089 	bne.w	8003078 <main+0x200>
  hopamp2.Instance = OPAMP2;
 8002f66:	484e      	ldr	r0, [pc, #312]	; (80030a0 <main+0x228>)
 8002f68:	4b4e      	ldr	r3, [pc, #312]	; (80030a4 <main+0x22c>)
 8002f6a:	6003      	str	r3, [r0, #0]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8002f6c:	2360      	movs	r3, #96	; 0x60
 8002f6e:	6043      	str	r3, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002f70:	230c      	movs	r3, #12
 8002f72:	60c3      	str	r3, [r0, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	6103      	str	r3, [r0, #16]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_USER;
 8002f78:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002f7c:	6242      	str	r2, [r0, #36]	; 0x24
  hopamp2.Init.TrimmingValueP = 0;
 8002f7e:	6283      	str	r3, [r0, #40]	; 0x28
  hopamp2.Init.TrimmingValueN = 0;
 8002f80:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8002f82:	f7fe f841 	bl	8001008 <HAL_OPAMP_Init>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d177      	bne.n	800307a <main+0x202>
  if (HAL_OPAMP_SelfCalibrate(&hopamp2) != HAL_OK)
 8002f8a:	4845      	ldr	r0, [pc, #276]	; (80030a0 <main+0x228>)
 8002f8c:	f7fe f8c7 	bl	800111e <HAL_OPAMP_SelfCalibrate>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	d173      	bne.n	800307c <main+0x204>
  huart2.Instance = USART2;
 8002f94:	4844      	ldr	r0, [pc, #272]	; (80030a8 <main+0x230>)
 8002f96:	4b45      	ldr	r3, [pc, #276]	; (80030ac <main+0x234>)
 8002f98:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 8002f9a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002f9e:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fa4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fa6:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fa8:	220c      	movs	r2, #12
 8002faa:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fac:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fae:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fb0:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fb2:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fb4:	f7ff fb8f 	bl	80026d6 <HAL_UART_Init>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d160      	bne.n	800307e <main+0x206>
  htim2.Instance = TIM2;
 8002fbc:	483c      	ldr	r0, [pc, #240]	; (80030b0 <main+0x238>)
 8002fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fc2:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 2079;
 8002fca:	f640 021f 	movw	r2, #2079	; 0x81f
 8002fce:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fd6:	f7fe ff09 	bl	8001dec <HAL_TIM_Base_Init>
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d150      	bne.n	8003080 <main+0x208>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fde:	a912      	add	r1, sp, #72	; 0x48
 8002fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe4:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fe8:	4831      	ldr	r0, [pc, #196]	; (80030b0 <main+0x238>)
 8002fea:	f7ff f835 	bl	8002058 <HAL_TIM_ConfigClockSource>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d147      	bne.n	8003082 <main+0x20a>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002ff2:	482f      	ldr	r0, [pc, #188]	; (80030b0 <main+0x238>)
 8002ff4:	f7fe ff13 	bl	8001e1e <HAL_TIM_OC_Init>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	d143      	bne.n	8003084 <main+0x20c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003004:	a904      	add	r1, sp, #16
 8003006:	482a      	ldr	r0, [pc, #168]	; (80030b0 <main+0x238>)
 8003008:	f7ff f98e 	bl	8002328 <HAL_TIMEx_MasterConfigSynchronization>
 800300c:	2800      	cmp	r0, #0
 800300e:	d13a      	bne.n	8003086 <main+0x20e>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003010:	2200      	movs	r2, #0
 8003012:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003014:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003016:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003018:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800301a:	a90b      	add	r1, sp, #44	; 0x2c
 800301c:	4824      	ldr	r0, [pc, #144]	; (80030b0 <main+0x238>)
 800301e:	f7ff f947 	bl	80022b0 <HAL_TIM_OC_ConfigChannel>
 8003022:	bb88      	cbnz	r0, 8003088 <main+0x210>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003024:	2200      	movs	r2, #0
 8003026:	4611      	mov	r1, r2
 8003028:	2018      	movs	r0, #24
 800302a:	f7fd fe07 	bl	8000c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800302e:	2018      	movs	r0, #24
 8003030:	f7fd fe34 	bl	8000c9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003034:	2200      	movs	r2, #0
 8003036:	4611      	mov	r1, r2
 8003038:	2026      	movs	r0, #38	; 0x26
 800303a:	f7fd fdff 	bl	8000c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800303e:	2026      	movs	r0, #38	; 0x26
 8003040:	f7fd fe2c 	bl	8000c9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	4611      	mov	r1, r2
 8003048:	201c      	movs	r0, #28
 800304a:	f7fd fdf7 	bl	8000c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800304e:	201c      	movs	r0, #28
 8003050:	f7fd fe24 	bl	8000c9c <HAL_NVIC_EnableIRQ>
  __HAL_DAC_ENABLE(&hdac1, DAC_CHANNEL_1);
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <main+0x220>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	6813      	ldr	r3, [r2, #0]
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6013      	str	r3, [r2, #0]
  HAL_OPAMP_Start(&hopamp2);
 8003060:	480f      	ldr	r0, [pc, #60]	; (80030a0 <main+0x228>)
 8003062:	f7fe f841 	bl	80010e8 <HAL_OPAMP_Start>
  IEC60601_init();
 8003066:	f7ff fe1b 	bl	8002ca0 <IEC60601_init>
  HAL_TIM_Base_Start_IT(&htim2);
 800306a:	4811      	ldr	r0, [pc, #68]	; (80030b0 <main+0x238>)
 800306c:	f7fe fd62 	bl	8001b34 <HAL_TIM_Base_Start_IT>
	  Test_Alarm();
 8003070:	f7ff feb0 	bl	8002dd4 <Test_Alarm>
 8003074:	e7fc      	b.n	8003070 <main+0x1f8>
 8003076:	e7fe      	b.n	8003076 <main+0x1fe>
 8003078:	e7fe      	b.n	8003078 <main+0x200>
 800307a:	e7fe      	b.n	800307a <main+0x202>
 800307c:	e7fe      	b.n	800307c <main+0x204>
 800307e:	e7fe      	b.n	800307e <main+0x206>
 8003080:	e7fe      	b.n	8003080 <main+0x208>
 8003082:	e7fe      	b.n	8003082 <main+0x20a>
 8003084:	e7fe      	b.n	8003084 <main+0x20c>
 8003086:	e7fe      	b.n	8003086 <main+0x20e>
 8003088:	e7fe      	b.n	8003088 <main+0x210>
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000
 8003090:	48000400 	.word	0x48000400
 8003094:	48001400 	.word	0x48001400
 8003098:	200002c0 	.word	0x200002c0
 800309c:	40007400 	.word	0x40007400
 80030a0:	2000028c 	.word	0x2000028c
 80030a4:	4001003c 	.word	0x4001003c
 80030a8:	20000354 	.word	0x20000354
 80030ac:	40004400 	.word	0x40004400
 80030b0:	20000314 	.word	0x20000314

080030b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b4:	b500      	push	{lr}
 80030b6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b8:	4b21      	ldr	r3, [pc, #132]	; (8003140 <HAL_MspInit+0x8c>)
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	619a      	str	r2, [r3, #24]
 80030c2:	699a      	ldr	r2, [r3, #24]
 80030c4:	f002 0201 	and.w	r2, r2, #1
 80030c8:	9200      	str	r2, [sp, #0]
 80030ca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030d2:	61da      	str	r2, [r3, #28]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030de:	2003      	movs	r0, #3
 80030e0:	f7fd fd9a 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	4611      	mov	r1, r2
 80030e8:	f06f 000b 	mvn.w	r0, #11
 80030ec:	f7fd fda6 	bl	8000c3c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	4611      	mov	r1, r2
 80030f4:	f06f 000a 	mvn.w	r0, #10
 80030f8:	f7fd fda0 	bl	8000c3c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80030fc:	2200      	movs	r2, #0
 80030fe:	4611      	mov	r1, r2
 8003100:	f06f 0009 	mvn.w	r0, #9
 8003104:	f7fd fd9a 	bl	8000c3c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003108:	2200      	movs	r2, #0
 800310a:	4611      	mov	r1, r2
 800310c:	f06f 0004 	mvn.w	r0, #4
 8003110:	f7fd fd94 	bl	8000c3c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	4611      	mov	r1, r2
 8003118:	f06f 0003 	mvn.w	r0, #3
 800311c:	f7fd fd8e 	bl	8000c3c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003120:	2200      	movs	r2, #0
 8003122:	4611      	mov	r1, r2
 8003124:	f06f 0001 	mvn.w	r0, #1
 8003128:	f7fd fd88 	bl	8000c3c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800312c:	2200      	movs	r2, #0
 800312e:	4611      	mov	r1, r2
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	f7fd fd82 	bl	8000c3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003138:	b003      	add	sp, #12
 800313a:	f85d fb04 	ldr.w	pc, [sp], #4
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 8003144:	6802      	ldr	r2, [r0, #0]
 8003146:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <HAL_DAC_MspInit+0x40>)
 8003148:	429a      	cmp	r2, r3
 800314a:	d000      	beq.n	800314e <HAL_DAC_MspInit+0xa>
 800314c:	4770      	bx	lr
{
 800314e:	b500      	push	{lr}
 8003150:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003152:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800315c:	61da      	str	r2, [r3, #28]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	9b00      	ldr	r3, [sp, #0]
  
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003168:	2310      	movs	r3, #16
 800316a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800316c:	2303      	movs	r3, #3
 800316e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003174:	a901      	add	r1, sp, #4
 8003176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800317a:	f7fd fe77 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800317e:	b007      	add	sp, #28
 8003180:	f85d fb04 	ldr.w	pc, [sp], #4
 8003184:	40007400 	.word	0x40007400

08003188 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hopamp->Instance==OPAMP2)
 8003188:	6802      	ldr	r2, [r0, #0]
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_OPAMP_MspInit+0x2c>)
 800318c:	429a      	cmp	r2, r3
 800318e:	d000      	beq.n	8003192 <HAL_OPAMP_MspInit+0xa>
 8003190:	4770      	bx	lr
{
 8003192:	b500      	push	{lr}
 8003194:	b087      	sub	sp, #28
  
    /**OPAMP2 GPIO Configuration    
    PA6     ------> OPAMP2_VOUT
    PA7     ------> OPAMP2_VINP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003196:	23c0      	movs	r3, #192	; 0xc0
 8003198:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800319a:	2303      	movs	r3, #3
 800319c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	a901      	add	r1, sp, #4
 80031a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a8:	f7fd fe60 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 80031ac:	b007      	add	sp, #28
 80031ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80031b2:	bf00      	nop
 80031b4:	4001003c 	.word	0x4001003c

080031b8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031b8:	b082      	sub	sp, #8

  if(htim_base->Instance==TIM2)
 80031ba:	6803      	ldr	r3, [r0, #0]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d004      	beq.n	80031cc <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 80031c2:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <HAL_TIM_Base_MspInit+0x44>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00d      	beq.n	80031e4 <HAL_TIM_Base_MspInit+0x2c>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80031c8:	b002      	add	sp, #8
 80031ca:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031cc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	61da      	str	r2, [r3, #28]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	9b00      	ldr	r3, [sp, #0]
 80031e2:	e7f1      	b.n	80031c8 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_TIM_Base_MspInit+0x48>)
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031ec:	619a      	str	r2, [r3, #24]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	9b01      	ldr	r3, [sp, #4]
}
 80031f8:	e7e6      	b.n	80031c8 <HAL_TIM_Base_MspInit+0x10>
 80031fa:	bf00      	nop
 80031fc:	40014000 	.word	0x40014000
 8003200:	40021000 	.word	0x40021000

08003204 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003204:	6802      	ldr	r2, [r0, #0]
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_UART_MspInit+0x4c>)
 8003208:	429a      	cmp	r2, r3
 800320a:	d000      	beq.n	800320e <HAL_UART_MspInit+0xa>
 800320c:	4770      	bx	lr
{
 800320e:	b500      	push	{lr}
 8003210:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003212:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003216:	69da      	ldr	r2, [r3, #28]
 8003218:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800321c:	61da      	str	r2, [r3, #28]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003228:	f248 0304 	movw	r3, #32772	; 0x8004
 800322c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322e:	2302      	movs	r3, #2
 8003230:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003236:	2303      	movs	r3, #3
 8003238:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800323a:	2307      	movs	r3, #7
 800323c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323e:	a901      	add	r1, sp, #4
 8003240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003244:	f7fd fe12 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003248:	b007      	add	sp, #28
 800324a:	f85d fb04 	ldr.w	pc, [sp], #4
 800324e:	bf00      	nop
 8003250:	40004400 	.word	0x40004400

08003254 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003254:	4770      	bx	lr

08003256 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003256:	e7fe      	b.n	8003256 <HardFault_Handler>

08003258 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003258:	e7fe      	b.n	8003258 <MemManage_Handler>

0800325a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800325a:	e7fe      	b.n	800325a <BusFault_Handler>

0800325c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800325c:	e7fe      	b.n	800325c <UsageFault_Handler>

0800325e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800325e:	4770      	bx	lr

08003260 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003260:	4770      	bx	lr

08003262 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003262:	4770      	bx	lr

08003264 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003264:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003266:	f7fd fcb1 	bl	8000bcc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800326a:	f7fd fd46 	bl	8000cfa <HAL_SYSTICK_IRQHandler>
 800326e:	bd08      	pop	{r3, pc}

08003270 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8003270:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  IEC60601_TimerInteruptHandler();
 8003272:	f7ff fd7d 	bl	8002d70 <IEC60601_TimerInteruptHandler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003276:	4802      	ldr	r0, [pc, #8]	; (8003280 <TIM2_IRQHandler+0x10>)
 8003278:	f7fe fc6e 	bl	8001b58 <HAL_TIM_IRQHandler>
 800327c:	bd08      	pop	{r3, pc}
 800327e:	bf00      	nop
 8003280:	20000314 	.word	0x20000314

08003284 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
*/
void USART2_IRQHandler(void)
{
 8003284:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003286:	4802      	ldr	r0, [pc, #8]	; (8003290 <USART2_IRQHandler+0xc>)
 8003288:	f7ff fadc 	bl	8002844 <HAL_UART_IRQHandler>
 800328c:	bd08      	pop	{r3, pc}
 800328e:	bf00      	nop
 8003290:	20000354 	.word	0x20000354

08003294 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003294:	4915      	ldr	r1, [pc, #84]	; (80032ec <SystemInit+0x58>)
 8003296:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800329a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <SystemInit+0x5c>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80032ac:	6858      	ldr	r0, [r3, #4]
 80032ae:	4a11      	ldr	r2, [pc, #68]	; (80032f4 <SystemInit+0x60>)
 80032b0:	4002      	ands	r2, r0
 80032b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80032ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032be:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032c6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80032ce:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	f022 020f 	bic.w	r2, r2, #15
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80032d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032da:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <SystemInit+0x64>)
 80032dc:	4002      	ands	r2, r0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032e8:	608b      	str	r3, [r1, #8]
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00
 80032f0:	40021000 	.word	0x40021000
 80032f4:	f87fc00c 	.word	0xf87fc00c
 80032f8:	ff00fccc 	.word	0xff00fccc

080032fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003334 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003300:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003302:	e003      	b.n	800330c <LoopCopyDataInit>

08003304 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003306:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003308:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800330a:	3104      	adds	r1, #4

0800330c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800330c:	480b      	ldr	r0, [pc, #44]	; (800333c <LoopForever+0xa>)
	ldr	r3, =_edata
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003310:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003312:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003314:	d3f6      	bcc.n	8003304 <CopyDataInit>
	ldr	r2, =_sbss
 8003316:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003318:	e002      	b.n	8003320 <LoopFillZerobss>

0800331a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800331a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800331c:	f842 3b04 	str.w	r3, [r2], #4

08003320 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <LoopForever+0x16>)
	cmp	r2, r3
 8003322:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003324:	d3f9      	bcc.n	800331a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003326:	f7ff ffb5 	bl	8003294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800332a:	f000 f811 	bl	8003350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800332e:	f7ff fda3 	bl	8002e78 <main>

08003332 <LoopForever>:

LoopForever:
    b LoopForever
 8003332:	e7fe      	b.n	8003332 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003334:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003338:	08004a48 	.word	0x08004a48
	ldr	r0, =_sdata
 800333c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003340:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8003344:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8003348:	200003c4 	.word	0x200003c4

0800334c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800334c:	e7fe      	b.n	800334c <ADC1_2_IRQHandler>
	...

08003350 <__libc_init_array>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	4e0d      	ldr	r6, [pc, #52]	; (8003388 <__libc_init_array+0x38>)
 8003354:	4c0d      	ldr	r4, [pc, #52]	; (800338c <__libc_init_array+0x3c>)
 8003356:	1ba4      	subs	r4, r4, r6
 8003358:	10a4      	asrs	r4, r4, #2
 800335a:	2500      	movs	r5, #0
 800335c:	42a5      	cmp	r5, r4
 800335e:	d109      	bne.n	8003374 <__libc_init_array+0x24>
 8003360:	4e0b      	ldr	r6, [pc, #44]	; (8003390 <__libc_init_array+0x40>)
 8003362:	4c0c      	ldr	r4, [pc, #48]	; (8003394 <__libc_init_array+0x44>)
 8003364:	f001 f8a0 	bl	80044a8 <_init>
 8003368:	1ba4      	subs	r4, r4, r6
 800336a:	10a4      	asrs	r4, r4, #2
 800336c:	2500      	movs	r5, #0
 800336e:	42a5      	cmp	r5, r4
 8003370:	d105      	bne.n	800337e <__libc_init_array+0x2e>
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003378:	4798      	blx	r3
 800337a:	3501      	adds	r5, #1
 800337c:	e7ee      	b.n	800335c <__libc_init_array+0xc>
 800337e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003382:	4798      	blx	r3
 8003384:	3501      	adds	r5, #1
 8003386:	e7f2      	b.n	800336e <__libc_init_array+0x1e>
 8003388:	08004a40 	.word	0x08004a40
 800338c:	08004a40 	.word	0x08004a40
 8003390:	08004a40 	.word	0x08004a40
 8003394:	08004a44 	.word	0x08004a44

08003398 <cos>:
 8003398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800339a:	ec51 0b10 	vmov	r0, r1, d0
 800339e:	4a1e      	ldr	r2, [pc, #120]	; (8003418 <cos+0x80>)
 80033a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80033a4:	4293      	cmp	r3, r2
 80033a6:	dc06      	bgt.n	80033b6 <cos+0x1e>
 80033a8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8003410 <cos+0x78>
 80033ac:	f000 fa74 	bl	8003898 <__kernel_cos>
 80033b0:	ec51 0b10 	vmov	r0, r1, d0
 80033b4:	e007      	b.n	80033c6 <cos+0x2e>
 80033b6:	4a19      	ldr	r2, [pc, #100]	; (800341c <cos+0x84>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	dd09      	ble.n	80033d0 <cos+0x38>
 80033bc:	ee10 2a10 	vmov	r2, s0
 80033c0:	460b      	mov	r3, r1
 80033c2:	f7fc ff05 	bl	80001d0 <__aeabi_dsub>
 80033c6:	ec41 0b10 	vmov	d0, r0, r1
 80033ca:	b005      	add	sp, #20
 80033cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80033d0:	4668      	mov	r0, sp
 80033d2:	f000 f86d 	bl	80034b0 <__ieee754_rem_pio2>
 80033d6:	f000 0003 	and.w	r0, r0, #3
 80033da:	2801      	cmp	r0, #1
 80033dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80033e0:	ed9d 0b00 	vldr	d0, [sp]
 80033e4:	d007      	beq.n	80033f6 <cos+0x5e>
 80033e6:	2802      	cmp	r0, #2
 80033e8:	d00e      	beq.n	8003408 <cos+0x70>
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d0de      	beq.n	80033ac <cos+0x14>
 80033ee:	2001      	movs	r0, #1
 80033f0:	f000 fe8a 	bl	8004108 <__kernel_sin>
 80033f4:	e7dc      	b.n	80033b0 <cos+0x18>
 80033f6:	f000 fe87 	bl	8004108 <__kernel_sin>
 80033fa:	ec53 2b10 	vmov	r2, r3, d0
 80033fe:	ee10 0a10 	vmov	r0, s0
 8003402:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003406:	e7de      	b.n	80033c6 <cos+0x2e>
 8003408:	f000 fa46 	bl	8003898 <__kernel_cos>
 800340c:	e7f5      	b.n	80033fa <cos+0x62>
 800340e:	bf00      	nop
	...
 8003418:	3fe921fb 	.word	0x3fe921fb
 800341c:	7fefffff 	.word	0x7fefffff

08003420 <sin>:
 8003420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003422:	ec51 0b10 	vmov	r0, r1, d0
 8003426:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <sin+0x88>)
 8003428:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800342c:	4293      	cmp	r3, r2
 800342e:	dc07      	bgt.n	8003440 <sin+0x20>
 8003430:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80034a0 <sin+0x80>
 8003434:	2000      	movs	r0, #0
 8003436:	f000 fe67 	bl	8004108 <__kernel_sin>
 800343a:	ec51 0b10 	vmov	r0, r1, d0
 800343e:	e007      	b.n	8003450 <sin+0x30>
 8003440:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <sin+0x8c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	dd09      	ble.n	800345a <sin+0x3a>
 8003446:	ee10 2a10 	vmov	r2, s0
 800344a:	460b      	mov	r3, r1
 800344c:	f7fc fec0 	bl	80001d0 <__aeabi_dsub>
 8003450:	ec41 0b10 	vmov	d0, r0, r1
 8003454:	b005      	add	sp, #20
 8003456:	f85d fb04 	ldr.w	pc, [sp], #4
 800345a:	4668      	mov	r0, sp
 800345c:	f000 f828 	bl	80034b0 <__ieee754_rem_pio2>
 8003460:	f000 0003 	and.w	r0, r0, #3
 8003464:	2801      	cmp	r0, #1
 8003466:	ed9d 1b02 	vldr	d1, [sp, #8]
 800346a:	ed9d 0b00 	vldr	d0, [sp]
 800346e:	d004      	beq.n	800347a <sin+0x5a>
 8003470:	2802      	cmp	r0, #2
 8003472:	d005      	beq.n	8003480 <sin+0x60>
 8003474:	b970      	cbnz	r0, 8003494 <sin+0x74>
 8003476:	2001      	movs	r0, #1
 8003478:	e7dd      	b.n	8003436 <sin+0x16>
 800347a:	f000 fa0d 	bl	8003898 <__kernel_cos>
 800347e:	e7dc      	b.n	800343a <sin+0x1a>
 8003480:	2001      	movs	r0, #1
 8003482:	f000 fe41 	bl	8004108 <__kernel_sin>
 8003486:	ec53 2b10 	vmov	r2, r3, d0
 800348a:	ee10 0a10 	vmov	r0, s0
 800348e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003492:	e7dd      	b.n	8003450 <sin+0x30>
 8003494:	f000 fa00 	bl	8003898 <__kernel_cos>
 8003498:	e7f5      	b.n	8003486 <sin+0x66>
 800349a:	bf00      	nop
 800349c:	f3af 8000 	nop.w
	...
 80034a8:	3fe921fb 	.word	0x3fe921fb
 80034ac:	7fefffff 	.word	0x7fefffff

080034b0 <__ieee754_rem_pio2>:
 80034b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	ec57 6b10 	vmov	r6, r7, d0
 80034b8:	4bc3      	ldr	r3, [pc, #780]	; (80037c8 <__ieee754_rem_pio2+0x318>)
 80034ba:	b08d      	sub	sp, #52	; 0x34
 80034bc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80034c0:	4598      	cmp	r8, r3
 80034c2:	4604      	mov	r4, r0
 80034c4:	9704      	str	r7, [sp, #16]
 80034c6:	dc07      	bgt.n	80034d8 <__ieee754_rem_pio2+0x28>
 80034c8:	2200      	movs	r2, #0
 80034ca:	2300      	movs	r3, #0
 80034cc:	ed84 0b00 	vstr	d0, [r4]
 80034d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80034d4:	2500      	movs	r5, #0
 80034d6:	e027      	b.n	8003528 <__ieee754_rem_pio2+0x78>
 80034d8:	4bbc      	ldr	r3, [pc, #752]	; (80037cc <__ieee754_rem_pio2+0x31c>)
 80034da:	4598      	cmp	r8, r3
 80034dc:	dc75      	bgt.n	80035ca <__ieee754_rem_pio2+0x11a>
 80034de:	9b04      	ldr	r3, [sp, #16]
 80034e0:	4dbb      	ldr	r5, [pc, #748]	; (80037d0 <__ieee754_rem_pio2+0x320>)
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	ee10 0a10 	vmov	r0, s0
 80034e8:	a3a9      	add	r3, pc, #676	; (adr r3, 8003790 <__ieee754_rem_pio2+0x2e0>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	4639      	mov	r1, r7
 80034f0:	dd36      	ble.n	8003560 <__ieee754_rem_pio2+0xb0>
 80034f2:	f7fc fe6d 	bl	80001d0 <__aeabi_dsub>
 80034f6:	45a8      	cmp	r8, r5
 80034f8:	4606      	mov	r6, r0
 80034fa:	460f      	mov	r7, r1
 80034fc:	d018      	beq.n	8003530 <__ieee754_rem_pio2+0x80>
 80034fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8003798 <__ieee754_rem_pio2+0x2e8>)
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f7fc fe64 	bl	80001d0 <__aeabi_dsub>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	e9c4 2300 	strd	r2, r3, [r4]
 8003510:	4630      	mov	r0, r6
 8003512:	4639      	mov	r1, r7
 8003514:	f7fc fe5c 	bl	80001d0 <__aeabi_dsub>
 8003518:	a39f      	add	r3, pc, #636	; (adr r3, 8003798 <__ieee754_rem_pio2+0x2e8>)
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f7fc fe57 	bl	80001d0 <__aeabi_dsub>
 8003522:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003526:	2501      	movs	r5, #1
 8003528:	4628      	mov	r0, r5
 800352a:	b00d      	add	sp, #52	; 0x34
 800352c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003530:	a39b      	add	r3, pc, #620	; (adr r3, 80037a0 <__ieee754_rem_pio2+0x2f0>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fc fe4b 	bl	80001d0 <__aeabi_dsub>
 800353a:	a39b      	add	r3, pc, #620	; (adr r3, 80037a8 <__ieee754_rem_pio2+0x2f8>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	4606      	mov	r6, r0
 8003542:	460f      	mov	r7, r1
 8003544:	f7fc fe44 	bl	80001d0 <__aeabi_dsub>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	e9c4 2300 	strd	r2, r3, [r4]
 8003550:	4630      	mov	r0, r6
 8003552:	4639      	mov	r1, r7
 8003554:	f7fc fe3c 	bl	80001d0 <__aeabi_dsub>
 8003558:	a393      	add	r3, pc, #588	; (adr r3, 80037a8 <__ieee754_rem_pio2+0x2f8>)
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	e7de      	b.n	800351e <__ieee754_rem_pio2+0x6e>
 8003560:	f7fc fe38 	bl	80001d4 <__adddf3>
 8003564:	45a8      	cmp	r8, r5
 8003566:	4606      	mov	r6, r0
 8003568:	460f      	mov	r7, r1
 800356a:	d016      	beq.n	800359a <__ieee754_rem_pio2+0xea>
 800356c:	a38a      	add	r3, pc, #552	; (adr r3, 8003798 <__ieee754_rem_pio2+0x2e8>)
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f7fc fe2f 	bl	80001d4 <__adddf3>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	e9c4 2300 	strd	r2, r3, [r4]
 800357e:	4630      	mov	r0, r6
 8003580:	4639      	mov	r1, r7
 8003582:	f7fc fe25 	bl	80001d0 <__aeabi_dsub>
 8003586:	a384      	add	r3, pc, #528	; (adr r3, 8003798 <__ieee754_rem_pio2+0x2e8>)
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f7fc fe22 	bl	80001d4 <__adddf3>
 8003590:	f04f 35ff 	mov.w	r5, #4294967295
 8003594:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003598:	e7c6      	b.n	8003528 <__ieee754_rem_pio2+0x78>
 800359a:	a381      	add	r3, pc, #516	; (adr r3, 80037a0 <__ieee754_rem_pio2+0x2f0>)
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	f7fc fe18 	bl	80001d4 <__adddf3>
 80035a4:	a380      	add	r3, pc, #512	; (adr r3, 80037a8 <__ieee754_rem_pio2+0x2f8>)
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	4606      	mov	r6, r0
 80035ac:	460f      	mov	r7, r1
 80035ae:	f7fc fe11 	bl	80001d4 <__adddf3>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	e9c4 2300 	strd	r2, r3, [r4]
 80035ba:	4630      	mov	r0, r6
 80035bc:	4639      	mov	r1, r7
 80035be:	f7fc fe07 	bl	80001d0 <__aeabi_dsub>
 80035c2:	a379      	add	r3, pc, #484	; (adr r3, 80037a8 <__ieee754_rem_pio2+0x2f8>)
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	e7e0      	b.n	800358c <__ieee754_rem_pio2+0xdc>
 80035ca:	4b82      	ldr	r3, [pc, #520]	; (80037d4 <__ieee754_rem_pio2+0x324>)
 80035cc:	4598      	cmp	r8, r3
 80035ce:	f300 80d0 	bgt.w	8003772 <__ieee754_rem_pio2+0x2c2>
 80035d2:	f000 fe53 	bl	800427c <fabs>
 80035d6:	ec57 6b10 	vmov	r6, r7, d0
 80035da:	ee10 0a10 	vmov	r0, s0
 80035de:	a374      	add	r3, pc, #464	; (adr r3, 80037b0 <__ieee754_rem_pio2+0x300>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	4639      	mov	r1, r7
 80035e6:	f7fc ffa7 	bl	8000538 <__aeabi_dmul>
 80035ea:	2200      	movs	r2, #0
 80035ec:	4b7a      	ldr	r3, [pc, #488]	; (80037d8 <__ieee754_rem_pio2+0x328>)
 80035ee:	f7fc fdf1 	bl	80001d4 <__adddf3>
 80035f2:	f7fd fa3b 	bl	8000a6c <__aeabi_d2iz>
 80035f6:	4605      	mov	r5, r0
 80035f8:	f7fc ff38 	bl	800046c <__aeabi_i2d>
 80035fc:	a364      	add	r3, pc, #400	; (adr r3, 8003790 <__ieee754_rem_pio2+0x2e0>)
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003606:	f7fc ff97 	bl	8000538 <__aeabi_dmul>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4630      	mov	r0, r6
 8003610:	4639      	mov	r1, r7
 8003612:	f7fc fddd 	bl	80001d0 <__aeabi_dsub>
 8003616:	a360      	add	r3, pc, #384	; (adr r3, 8003798 <__ieee754_rem_pio2+0x2e8>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	4682      	mov	sl, r0
 800361e:	468b      	mov	fp, r1
 8003620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003624:	f7fc ff88 	bl	8000538 <__aeabi_dmul>
 8003628:	2d1f      	cmp	r5, #31
 800362a:	4606      	mov	r6, r0
 800362c:	460f      	mov	r7, r1
 800362e:	dc2a      	bgt.n	8003686 <__ieee754_rem_pio2+0x1d6>
 8003630:	1e6a      	subs	r2, r5, #1
 8003632:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <__ieee754_rem_pio2+0x32c>)
 8003634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003638:	4598      	cmp	r8, r3
 800363a:	d024      	beq.n	8003686 <__ieee754_rem_pio2+0x1d6>
 800363c:	4632      	mov	r2, r6
 800363e:	463b      	mov	r3, r7
 8003640:	4650      	mov	r0, sl
 8003642:	4659      	mov	r1, fp
 8003644:	f7fc fdc4 	bl	80001d0 <__aeabi_dsub>
 8003648:	e9c4 0100 	strd	r0, r1, [r4]
 800364c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003650:	4650      	mov	r0, sl
 8003652:	4642      	mov	r2, r8
 8003654:	464b      	mov	r3, r9
 8003656:	4659      	mov	r1, fp
 8003658:	f7fc fdba 	bl	80001d0 <__aeabi_dsub>
 800365c:	463b      	mov	r3, r7
 800365e:	4632      	mov	r2, r6
 8003660:	f7fc fdb6 	bl	80001d0 <__aeabi_dsub>
 8003664:	9b04      	ldr	r3, [sp, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800366c:	f6bf af5c 	bge.w	8003528 <__ieee754_rem_pio2+0x78>
 8003670:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003674:	6063      	str	r3, [r4, #4]
 8003676:	f8c4 8000 	str.w	r8, [r4]
 800367a:	60a0      	str	r0, [r4, #8]
 800367c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003680:	60e3      	str	r3, [r4, #12]
 8003682:	426d      	negs	r5, r5
 8003684:	e750      	b.n	8003528 <__ieee754_rem_pio2+0x78>
 8003686:	4632      	mov	r2, r6
 8003688:	463b      	mov	r3, r7
 800368a:	4650      	mov	r0, sl
 800368c:	4659      	mov	r1, fp
 800368e:	f7fc fd9f 	bl	80001d0 <__aeabi_dsub>
 8003692:	ea4f 5228 	mov.w	r2, r8, asr #20
 8003696:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b10      	cmp	r3, #16
 800369e:	e9c4 0100 	strd	r0, r1, [r4]
 80036a2:	9205      	str	r2, [sp, #20]
 80036a4:	ddd2      	ble.n	800364c <__ieee754_rem_pio2+0x19c>
 80036a6:	a33e      	add	r3, pc, #248	; (adr r3, 80037a0 <__ieee754_rem_pio2+0x2f0>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036b0:	f7fc ff42 	bl	8000538 <__aeabi_dmul>
 80036b4:	4606      	mov	r6, r0
 80036b6:	460f      	mov	r7, r1
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4650      	mov	r0, sl
 80036be:	4659      	mov	r1, fp
 80036c0:	f7fc fd86 	bl	80001d0 <__aeabi_dsub>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4680      	mov	r8, r0
 80036ca:	4689      	mov	r9, r1
 80036cc:	4650      	mov	r0, sl
 80036ce:	4659      	mov	r1, fp
 80036d0:	f7fc fd7e 	bl	80001d0 <__aeabi_dsub>
 80036d4:	4632      	mov	r2, r6
 80036d6:	463b      	mov	r3, r7
 80036d8:	f7fc fd7a 	bl	80001d0 <__aeabi_dsub>
 80036dc:	a332      	add	r3, pc, #200	; (adr r3, 80037a8 <__ieee754_rem_pio2+0x2f8>)
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	4606      	mov	r6, r0
 80036e4:	460f      	mov	r7, r1
 80036e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036ea:	f7fc ff25 	bl	8000538 <__aeabi_dmul>
 80036ee:	4632      	mov	r2, r6
 80036f0:	463b      	mov	r3, r7
 80036f2:	f7fc fd6d 	bl	80001d0 <__aeabi_dsub>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4606      	mov	r6, r0
 80036fc:	460f      	mov	r7, r1
 80036fe:	4640      	mov	r0, r8
 8003700:	4649      	mov	r1, r9
 8003702:	f7fc fd65 	bl	80001d0 <__aeabi_dsub>
 8003706:	9a05      	ldr	r2, [sp, #20]
 8003708:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b31      	cmp	r3, #49	; 0x31
 8003710:	e9c4 0100 	strd	r0, r1, [r4]
 8003714:	dd2a      	ble.n	800376c <__ieee754_rem_pio2+0x2bc>
 8003716:	a328      	add	r3, pc, #160	; (adr r3, 80037b8 <__ieee754_rem_pio2+0x308>)
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003720:	f7fc ff0a 	bl	8000538 <__aeabi_dmul>
 8003724:	4606      	mov	r6, r0
 8003726:	460f      	mov	r7, r1
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4640      	mov	r0, r8
 800372e:	4649      	mov	r1, r9
 8003730:	f7fc fd4e 	bl	80001d0 <__aeabi_dsub>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4682      	mov	sl, r0
 800373a:	468b      	mov	fp, r1
 800373c:	4640      	mov	r0, r8
 800373e:	4649      	mov	r1, r9
 8003740:	f7fc fd46 	bl	80001d0 <__aeabi_dsub>
 8003744:	4632      	mov	r2, r6
 8003746:	463b      	mov	r3, r7
 8003748:	f7fc fd42 	bl	80001d0 <__aeabi_dsub>
 800374c:	a31c      	add	r3, pc, #112	; (adr r3, 80037c0 <__ieee754_rem_pio2+0x310>)
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	4606      	mov	r6, r0
 8003754:	460f      	mov	r7, r1
 8003756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800375a:	f7fc feed 	bl	8000538 <__aeabi_dmul>
 800375e:	4632      	mov	r2, r6
 8003760:	463b      	mov	r3, r7
 8003762:	f7fc fd35 	bl	80001d0 <__aeabi_dsub>
 8003766:	4606      	mov	r6, r0
 8003768:	460f      	mov	r7, r1
 800376a:	e767      	b.n	800363c <__ieee754_rem_pio2+0x18c>
 800376c:	46c2      	mov	sl, r8
 800376e:	46cb      	mov	fp, r9
 8003770:	e76c      	b.n	800364c <__ieee754_rem_pio2+0x19c>
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <__ieee754_rem_pio2+0x330>)
 8003774:	4598      	cmp	r8, r3
 8003776:	dd35      	ble.n	80037e4 <__ieee754_rem_pio2+0x334>
 8003778:	ee10 2a10 	vmov	r2, s0
 800377c:	463b      	mov	r3, r7
 800377e:	4630      	mov	r0, r6
 8003780:	4639      	mov	r1, r7
 8003782:	f7fc fd25 	bl	80001d0 <__aeabi_dsub>
 8003786:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800378a:	e9c4 0100 	strd	r0, r1, [r4]
 800378e:	e6a1      	b.n	80034d4 <__ieee754_rem_pio2+0x24>
 8003790:	54400000 	.word	0x54400000
 8003794:	3ff921fb 	.word	0x3ff921fb
 8003798:	1a626331 	.word	0x1a626331
 800379c:	3dd0b461 	.word	0x3dd0b461
 80037a0:	1a600000 	.word	0x1a600000
 80037a4:	3dd0b461 	.word	0x3dd0b461
 80037a8:	2e037073 	.word	0x2e037073
 80037ac:	3ba3198a 	.word	0x3ba3198a
 80037b0:	6dc9c883 	.word	0x6dc9c883
 80037b4:	3fe45f30 	.word	0x3fe45f30
 80037b8:	2e000000 	.word	0x2e000000
 80037bc:	3ba3198a 	.word	0x3ba3198a
 80037c0:	252049c1 	.word	0x252049c1
 80037c4:	397b839a 	.word	0x397b839a
 80037c8:	3fe921fb 	.word	0x3fe921fb
 80037cc:	4002d97b 	.word	0x4002d97b
 80037d0:	3ff921fb 	.word	0x3ff921fb
 80037d4:	413921fb 	.word	0x413921fb
 80037d8:	3fe00000 	.word	0x3fe00000
 80037dc:	08004868 	.word	0x08004868
 80037e0:	7fefffff 	.word	0x7fefffff
 80037e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80037e8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80037ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80037f0:	4630      	mov	r0, r6
 80037f2:	460f      	mov	r7, r1
 80037f4:	f7fd f93a 	bl	8000a6c <__aeabi_d2iz>
 80037f8:	f7fc fe38 	bl	800046c <__aeabi_i2d>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4630      	mov	r0, r6
 8003802:	4639      	mov	r1, r7
 8003804:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003808:	f7fc fce2 	bl	80001d0 <__aeabi_dsub>
 800380c:	2200      	movs	r2, #0
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <__ieee754_rem_pio2+0x3dc>)
 8003810:	f7fc fe92 	bl	8000538 <__aeabi_dmul>
 8003814:	460f      	mov	r7, r1
 8003816:	4606      	mov	r6, r0
 8003818:	f7fd f928 	bl	8000a6c <__aeabi_d2iz>
 800381c:	f7fc fe26 	bl	800046c <__aeabi_i2d>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4630      	mov	r0, r6
 8003826:	4639      	mov	r1, r7
 8003828:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800382c:	f7fc fcd0 	bl	80001d0 <__aeabi_dsub>
 8003830:	2200      	movs	r2, #0
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <__ieee754_rem_pio2+0x3dc>)
 8003834:	f7fc fe80 	bl	8000538 <__aeabi_dmul>
 8003838:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800383c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003840:	f04f 0803 	mov.w	r8, #3
 8003844:	2600      	movs	r6, #0
 8003846:	2700      	movs	r7, #0
 8003848:	4632      	mov	r2, r6
 800384a:	463b      	mov	r3, r7
 800384c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003850:	f108 3aff 	add.w	sl, r8, #4294967295
 8003854:	f7fd f8d8 	bl	8000a08 <__aeabi_dcmpeq>
 8003858:	b9b0      	cbnz	r0, 8003888 <__ieee754_rem_pio2+0x3d8>
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <__ieee754_rem_pio2+0x3e0>)
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	2302      	movs	r3, #2
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	462a      	mov	r2, r5
 8003864:	4643      	mov	r3, r8
 8003866:	4621      	mov	r1, r4
 8003868:	a806      	add	r0, sp, #24
 800386a:	f000 f8fd 	bl	8003a68 <__kernel_rem_pio2>
 800386e:	9b04      	ldr	r3, [sp, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	4605      	mov	r5, r0
 8003874:	f6bf ae58 	bge.w	8003528 <__ieee754_rem_pio2+0x78>
 8003878:	6863      	ldr	r3, [r4, #4]
 800387a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800387e:	6063      	str	r3, [r4, #4]
 8003880:	68e3      	ldr	r3, [r4, #12]
 8003882:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003886:	e6fb      	b.n	8003680 <__ieee754_rem_pio2+0x1d0>
 8003888:	46d0      	mov	r8, sl
 800388a:	e7dd      	b.n	8003848 <__ieee754_rem_pio2+0x398>
 800388c:	41700000 	.word	0x41700000
 8003890:	080048e8 	.word	0x080048e8
 8003894:	00000000 	.word	0x00000000

08003898 <__kernel_cos>:
 8003898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800389c:	ec59 8b10 	vmov	r8, r9, d0
 80038a0:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 80038a4:	b085      	sub	sp, #20
 80038a6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80038aa:	ed8d 1b00 	vstr	d1, [sp]
 80038ae:	da07      	bge.n	80038c0 <__kernel_cos+0x28>
 80038b0:	ee10 0a10 	vmov	r0, s0
 80038b4:	4649      	mov	r1, r9
 80038b6:	f7fd f8d9 	bl	8000a6c <__aeabi_d2iz>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	f000 80aa 	beq.w	8003a14 <__kernel_cos+0x17c>
 80038c0:	4642      	mov	r2, r8
 80038c2:	464b      	mov	r3, r9
 80038c4:	4640      	mov	r0, r8
 80038c6:	4649      	mov	r1, r9
 80038c8:	f7fc fe36 	bl	8000538 <__aeabi_dmul>
 80038cc:	a359      	add	r3, pc, #356	; (adr r3, 8003a34 <__kernel_cos+0x19c>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	4604      	mov	r4, r0
 80038d4:	460d      	mov	r5, r1
 80038d6:	f7fc fe2f 	bl	8000538 <__aeabi_dmul>
 80038da:	a358      	add	r3, pc, #352	; (adr r3, 8003a3c <__kernel_cos+0x1a4>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f7fc fc78 	bl	80001d4 <__adddf3>
 80038e4:	4622      	mov	r2, r4
 80038e6:	462b      	mov	r3, r5
 80038e8:	f7fc fe26 	bl	8000538 <__aeabi_dmul>
 80038ec:	a355      	add	r3, pc, #340	; (adr r3, 8003a44 <__kernel_cos+0x1ac>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fc6d 	bl	80001d0 <__aeabi_dsub>
 80038f6:	4622      	mov	r2, r4
 80038f8:	462b      	mov	r3, r5
 80038fa:	f7fc fe1d 	bl	8000538 <__aeabi_dmul>
 80038fe:	a353      	add	r3, pc, #332	; (adr r3, 8003a4c <__kernel_cos+0x1b4>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f7fc fc66 	bl	80001d4 <__adddf3>
 8003908:	4622      	mov	r2, r4
 800390a:	462b      	mov	r3, r5
 800390c:	f7fc fe14 	bl	8000538 <__aeabi_dmul>
 8003910:	a350      	add	r3, pc, #320	; (adr r3, 8003a54 <__kernel_cos+0x1bc>)
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f7fc fc5b 	bl	80001d0 <__aeabi_dsub>
 800391a:	4622      	mov	r2, r4
 800391c:	462b      	mov	r3, r5
 800391e:	f7fc fe0b 	bl	8000538 <__aeabi_dmul>
 8003922:	a34e      	add	r3, pc, #312	; (adr r3, 8003a5c <__kernel_cos+0x1c4>)
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f7fc fc54 	bl	80001d4 <__adddf3>
 800392c:	462b      	mov	r3, r5
 800392e:	4622      	mov	r2, r4
 8003930:	f7fc fe02 	bl	8000538 <__aeabi_dmul>
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <__kernel_cos+0x188>)
 8003936:	429f      	cmp	r7, r3
 8003938:	4682      	mov	sl, r0
 800393a:	468b      	mov	fp, r1
 800393c:	dc2c      	bgt.n	8003998 <__kernel_cos+0x100>
 800393e:	2200      	movs	r2, #0
 8003940:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <__kernel_cos+0x18c>)
 8003942:	4620      	mov	r0, r4
 8003944:	4629      	mov	r1, r5
 8003946:	f7fc fdf7 	bl	8000538 <__aeabi_dmul>
 800394a:	4652      	mov	r2, sl
 800394c:	4606      	mov	r6, r0
 800394e:	460f      	mov	r7, r1
 8003950:	465b      	mov	r3, fp
 8003952:	4620      	mov	r0, r4
 8003954:	4629      	mov	r1, r5
 8003956:	f7fc fdef 	bl	8000538 <__aeabi_dmul>
 800395a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800395e:	4604      	mov	r4, r0
 8003960:	460d      	mov	r5, r1
 8003962:	4640      	mov	r0, r8
 8003964:	4649      	mov	r1, r9
 8003966:	f7fc fde7 	bl	8000538 <__aeabi_dmul>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4620      	mov	r0, r4
 8003970:	4629      	mov	r1, r5
 8003972:	f7fc fc2d 	bl	80001d0 <__aeabi_dsub>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4630      	mov	r0, r6
 800397c:	4639      	mov	r1, r7
 800397e:	f7fc fc27 	bl	80001d0 <__aeabi_dsub>
 8003982:	460b      	mov	r3, r1
 8003984:	4928      	ldr	r1, [pc, #160]	; (8003a28 <__kernel_cos+0x190>)
 8003986:	4602      	mov	r2, r0
 8003988:	2000      	movs	r0, #0
 800398a:	f7fc fc21 	bl	80001d0 <__aeabi_dsub>
 800398e:	ec41 0b10 	vmov	d0, r0, r1
 8003992:	b005      	add	sp, #20
 8003994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003998:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <__kernel_cos+0x194>)
 800399a:	4923      	ldr	r1, [pc, #140]	; (8003a28 <__kernel_cos+0x190>)
 800399c:	429f      	cmp	r7, r3
 800399e:	bfd7      	itett	le
 80039a0:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80039a4:	4f22      	ldrgt	r7, [pc, #136]	; (8003a30 <__kernel_cos+0x198>)
 80039a6:	2200      	movle	r2, #0
 80039a8:	4616      	movle	r6, r2
 80039aa:	bfd4      	ite	le
 80039ac:	461f      	movle	r7, r3
 80039ae:	2600      	movgt	r6, #0
 80039b0:	4632      	mov	r2, r6
 80039b2:	463b      	mov	r3, r7
 80039b4:	2000      	movs	r0, #0
 80039b6:	f7fc fc0b 	bl	80001d0 <__aeabi_dsub>
 80039ba:	2200      	movs	r2, #0
 80039bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039c0:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <__kernel_cos+0x18c>)
 80039c2:	4620      	mov	r0, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	f7fc fdb7 	bl	8000538 <__aeabi_dmul>
 80039ca:	4632      	mov	r2, r6
 80039cc:	463b      	mov	r3, r7
 80039ce:	f7fc fbff 	bl	80001d0 <__aeabi_dsub>
 80039d2:	4652      	mov	r2, sl
 80039d4:	4606      	mov	r6, r0
 80039d6:	460f      	mov	r7, r1
 80039d8:	465b      	mov	r3, fp
 80039da:	4620      	mov	r0, r4
 80039dc:	4629      	mov	r1, r5
 80039de:	f7fc fdab 	bl	8000538 <__aeabi_dmul>
 80039e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80039e6:	4604      	mov	r4, r0
 80039e8:	460d      	mov	r5, r1
 80039ea:	4640      	mov	r0, r8
 80039ec:	4649      	mov	r1, r9
 80039ee:	f7fc fda3 	bl	8000538 <__aeabi_dmul>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4620      	mov	r0, r4
 80039f8:	4629      	mov	r1, r5
 80039fa:	f7fc fbe9 	bl	80001d0 <__aeabi_dsub>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4630      	mov	r0, r6
 8003a04:	4639      	mov	r1, r7
 8003a06:	f7fc fbe3 	bl	80001d0 <__aeabi_dsub>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a12:	e7ba      	b.n	800398a <__kernel_cos+0xf2>
 8003a14:	2000      	movs	r0, #0
 8003a16:	4904      	ldr	r1, [pc, #16]	; (8003a28 <__kernel_cos+0x190>)
 8003a18:	e7b9      	b.n	800398e <__kernel_cos+0xf6>
 8003a1a:	bf00      	nop
 8003a1c:	f3af 8000 	nop.w
 8003a20:	3fd33332 	.word	0x3fd33332
 8003a24:	3fe00000 	.word	0x3fe00000
 8003a28:	3ff00000 	.word	0x3ff00000
 8003a2c:	3fe90000 	.word	0x3fe90000
 8003a30:	3fd20000 	.word	0x3fd20000
 8003a34:	be8838d4 	.word	0xbe8838d4
 8003a38:	bda8fae9 	.word	0xbda8fae9
 8003a3c:	bdb4b1c4 	.word	0xbdb4b1c4
 8003a40:	3e21ee9e 	.word	0x3e21ee9e
 8003a44:	809c52ad 	.word	0x809c52ad
 8003a48:	3e927e4f 	.word	0x3e927e4f
 8003a4c:	19cb1590 	.word	0x19cb1590
 8003a50:	3efa01a0 	.word	0x3efa01a0
 8003a54:	16c15177 	.word	0x16c15177
 8003a58:	3f56c16c 	.word	0x3f56c16c
 8003a5c:	5555554c 	.word	0x5555554c
 8003a60:	3fa55555 	.word	0x3fa55555
 8003a64:	00000000 	.word	0x00000000

08003a68 <__kernel_rem_pio2>:
 8003a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6c:	ed2d 8b02 	vpush	{d8}
 8003a70:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003a74:	1ed4      	subs	r4, r2, #3
 8003a76:	9306      	str	r3, [sp, #24]
 8003a78:	9102      	str	r1, [sp, #8]
 8003a7a:	4bc3      	ldr	r3, [pc, #780]	; (8003d88 <__kernel_rem_pio2+0x320>)
 8003a7c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003a7e:	9009      	str	r0, [sp, #36]	; 0x24
 8003a80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	9b06      	ldr	r3, [sp, #24]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	9304      	str	r3, [sp, #16]
 8003a8c:	2318      	movs	r3, #24
 8003a8e:	fb94 f4f3 	sdiv	r4, r4, r3
 8003a92:	f06f 0317 	mvn.w	r3, #23
 8003a96:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003a9a:	fb04 3303 	mla	r3, r4, r3, r3
 8003a9e:	eb03 0a02 	add.w	sl, r3, r2
 8003aa2:	9b00      	ldr	r3, [sp, #0]
 8003aa4:	9a04      	ldr	r2, [sp, #16]
 8003aa6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8003d78 <__kernel_rem_pio2+0x310>
 8003aaa:	eb03 0802 	add.w	r8, r3, r2
 8003aae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003ab0:	1aa7      	subs	r7, r4, r2
 8003ab2:	ae20      	add	r6, sp, #128	; 0x80
 8003ab4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003ab8:	2500      	movs	r5, #0
 8003aba:	4545      	cmp	r5, r8
 8003abc:	dd13      	ble.n	8003ae6 <__kernel_rem_pio2+0x7e>
 8003abe:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8003d78 <__kernel_rem_pio2+0x310>
 8003ac2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	9b00      	ldr	r3, [sp, #0]
 8003aca:	429e      	cmp	r6, r3
 8003acc:	dc32      	bgt.n	8003b34 <__kernel_rem_pio2+0xcc>
 8003ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad0:	9303      	str	r3, [sp, #12]
 8003ad2:	9b06      	ldr	r3, [sp, #24]
 8003ad4:	199d      	adds	r5, r3, r6
 8003ad6:	ab20      	add	r3, sp, #128	; 0x80
 8003ad8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003adc:	9308      	str	r3, [sp, #32]
 8003ade:	ec59 8b18 	vmov	r8, r9, d8
 8003ae2:	2700      	movs	r7, #0
 8003ae4:	e01f      	b.n	8003b26 <__kernel_rem_pio2+0xbe>
 8003ae6:	42ef      	cmn	r7, r5
 8003ae8:	d407      	bmi.n	8003afa <__kernel_rem_pio2+0x92>
 8003aea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003aee:	f7fc fcbd 	bl	800046c <__aeabi_i2d>
 8003af2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003af6:	3501      	adds	r5, #1
 8003af8:	e7df      	b.n	8003aba <__kernel_rem_pio2+0x52>
 8003afa:	ec51 0b18 	vmov	r0, r1, d8
 8003afe:	e7f8      	b.n	8003af2 <__kernel_rem_pio2+0x8a>
 8003b00:	9908      	ldr	r1, [sp, #32]
 8003b02:	9d03      	ldr	r5, [sp, #12]
 8003b04:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003b08:	9108      	str	r1, [sp, #32]
 8003b0a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003b0e:	9503      	str	r5, [sp, #12]
 8003b10:	f7fc fd12 	bl	8000538 <__aeabi_dmul>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4640      	mov	r0, r8
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	f7fc fb5a 	bl	80001d4 <__adddf3>
 8003b20:	3701      	adds	r7, #1
 8003b22:	4680      	mov	r8, r0
 8003b24:	4689      	mov	r9, r1
 8003b26:	9b04      	ldr	r3, [sp, #16]
 8003b28:	429f      	cmp	r7, r3
 8003b2a:	dde9      	ble.n	8003b00 <__kernel_rem_pio2+0x98>
 8003b2c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7c9      	b.n	8003ac8 <__kernel_rem_pio2+0x60>
 8003b34:	9b00      	ldr	r3, [sp, #0]
 8003b36:	9f00      	ldr	r7, [sp, #0]
 8003b38:	aa0c      	add	r2, sp, #48	; 0x30
 8003b3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b40:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003b42:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003b46:	930a      	str	r3, [sp, #40]	; 0x28
 8003b48:	ab98      	add	r3, sp, #608	; 0x260
 8003b4a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8003b4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003b52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003b56:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8003b5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b5e:	9308      	str	r3, [sp, #32]
 8003b60:	9a08      	ldr	r2, [sp, #32]
 8003b62:	ab98      	add	r3, sp, #608	; 0x260
 8003b64:	4413      	add	r3, r2
 8003b66:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	1bbb      	subs	r3, r7, r6
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	dc77      	bgt.n	8003c62 <__kernel_rem_pio2+0x1fa>
 8003b72:	ec49 8b10 	vmov	d0, r8, r9
 8003b76:	4650      	mov	r0, sl
 8003b78:	f000 fc0e 	bl	8004398 <scalbn>
 8003b7c:	ec55 4b10 	vmov	r4, r5, d0
 8003b80:	2200      	movs	r2, #0
 8003b82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003b86:	ee10 0a10 	vmov	r0, s0
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	f7fc fcd4 	bl	8000538 <__aeabi_dmul>
 8003b90:	ec41 0b10 	vmov	d0, r0, r1
 8003b94:	f000 fb7c 	bl	8004290 <floor>
 8003b98:	2200      	movs	r2, #0
 8003b9a:	ec51 0b10 	vmov	r0, r1, d0
 8003b9e:	4b7b      	ldr	r3, [pc, #492]	; (8003d8c <__kernel_rem_pio2+0x324>)
 8003ba0:	f7fc fcca 	bl	8000538 <__aeabi_dmul>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4620      	mov	r0, r4
 8003baa:	4629      	mov	r1, r5
 8003bac:	f7fc fb10 	bl	80001d0 <__aeabi_dsub>
 8003bb0:	460d      	mov	r5, r1
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	f7fc ff5a 	bl	8000a6c <__aeabi_d2iz>
 8003bb8:	9003      	str	r0, [sp, #12]
 8003bba:	f7fc fc57 	bl	800046c <__aeabi_i2d>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	f7fc fb03 	bl	80001d0 <__aeabi_dsub>
 8003bca:	f1ba 0f00 	cmp.w	sl, #0
 8003bce:	4680      	mov	r8, r0
 8003bd0:	4689      	mov	r9, r1
 8003bd2:	dd6b      	ble.n	8003cac <__kernel_rem_pio2+0x244>
 8003bd4:	1e7a      	subs	r2, r7, #1
 8003bd6:	ab0c      	add	r3, sp, #48	; 0x30
 8003bd8:	f1ca 0118 	rsb	r1, sl, #24
 8003bdc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003be0:	9c03      	ldr	r4, [sp, #12]
 8003be2:	fa40 f301 	asr.w	r3, r0, r1
 8003be6:	441c      	add	r4, r3
 8003be8:	408b      	lsls	r3, r1
 8003bea:	1ac0      	subs	r0, r0, r3
 8003bec:	ab0c      	add	r3, sp, #48	; 0x30
 8003bee:	9403      	str	r4, [sp, #12]
 8003bf0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003bf4:	f1ca 0317 	rsb	r3, sl, #23
 8003bf8:	fa40 fb03 	asr.w	fp, r0, r3
 8003bfc:	f1bb 0f00 	cmp.w	fp, #0
 8003c00:	dd62      	ble.n	8003cc8 <__kernel_rem_pio2+0x260>
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	3301      	adds	r3, #1
 8003c08:	9303      	str	r3, [sp, #12]
 8003c0a:	4614      	mov	r4, r2
 8003c0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003c10:	4297      	cmp	r7, r2
 8003c12:	f300 8089 	bgt.w	8003d28 <__kernel_rem_pio2+0x2c0>
 8003c16:	f1ba 0f00 	cmp.w	sl, #0
 8003c1a:	dd07      	ble.n	8003c2c <__kernel_rem_pio2+0x1c4>
 8003c1c:	f1ba 0f01 	cmp.w	sl, #1
 8003c20:	f000 8096 	beq.w	8003d50 <__kernel_rem_pio2+0x2e8>
 8003c24:	f1ba 0f02 	cmp.w	sl, #2
 8003c28:	f000 809c 	beq.w	8003d64 <__kernel_rem_pio2+0x2fc>
 8003c2c:	f1bb 0f02 	cmp.w	fp, #2
 8003c30:	d14a      	bne.n	8003cc8 <__kernel_rem_pio2+0x260>
 8003c32:	4642      	mov	r2, r8
 8003c34:	464b      	mov	r3, r9
 8003c36:	2000      	movs	r0, #0
 8003c38:	4955      	ldr	r1, [pc, #340]	; (8003d90 <__kernel_rem_pio2+0x328>)
 8003c3a:	f7fc fac9 	bl	80001d0 <__aeabi_dsub>
 8003c3e:	4680      	mov	r8, r0
 8003c40:	4689      	mov	r9, r1
 8003c42:	2c00      	cmp	r4, #0
 8003c44:	d040      	beq.n	8003cc8 <__kernel_rem_pio2+0x260>
 8003c46:	4650      	mov	r0, sl
 8003c48:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003d80 <__kernel_rem_pio2+0x318>
 8003c4c:	f000 fba4 	bl	8004398 <scalbn>
 8003c50:	4640      	mov	r0, r8
 8003c52:	4649      	mov	r1, r9
 8003c54:	ec53 2b10 	vmov	r2, r3, d0
 8003c58:	f7fc faba 	bl	80001d0 <__aeabi_dsub>
 8003c5c:	4680      	mov	r8, r0
 8003c5e:	4689      	mov	r9, r1
 8003c60:	e032      	b.n	8003cc8 <__kernel_rem_pio2+0x260>
 8003c62:	2200      	movs	r2, #0
 8003c64:	4b4b      	ldr	r3, [pc, #300]	; (8003d94 <__kernel_rem_pio2+0x32c>)
 8003c66:	4640      	mov	r0, r8
 8003c68:	4649      	mov	r1, r9
 8003c6a:	f7fc fc65 	bl	8000538 <__aeabi_dmul>
 8003c6e:	f7fc fefd 	bl	8000a6c <__aeabi_d2iz>
 8003c72:	f7fc fbfb 	bl	800046c <__aeabi_i2d>
 8003c76:	2200      	movs	r2, #0
 8003c78:	4b47      	ldr	r3, [pc, #284]	; (8003d98 <__kernel_rem_pio2+0x330>)
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	460d      	mov	r5, r1
 8003c7e:	f7fc fc5b 	bl	8000538 <__aeabi_dmul>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4640      	mov	r0, r8
 8003c88:	4649      	mov	r1, r9
 8003c8a:	f7fc faa1 	bl	80001d0 <__aeabi_dsub>
 8003c8e:	f7fc feed 	bl	8000a6c <__aeabi_d2iz>
 8003c92:	ab0c      	add	r3, sp, #48	; 0x30
 8003c94:	4629      	mov	r1, r5
 8003c96:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003c9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f7fc fa98 	bl	80001d4 <__adddf3>
 8003ca4:	3601      	adds	r6, #1
 8003ca6:	4680      	mov	r8, r0
 8003ca8:	4689      	mov	r9, r1
 8003caa:	e75f      	b.n	8003b6c <__kernel_rem_pio2+0x104>
 8003cac:	d106      	bne.n	8003cbc <__kernel_rem_pio2+0x254>
 8003cae:	1e7b      	subs	r3, r7, #1
 8003cb0:	aa0c      	add	r2, sp, #48	; 0x30
 8003cb2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003cb6:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8003cba:	e79f      	b.n	8003bfc <__kernel_rem_pio2+0x194>
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4b37      	ldr	r3, [pc, #220]	; (8003d9c <__kernel_rem_pio2+0x334>)
 8003cc0:	f7fc fec0 	bl	8000a44 <__aeabi_dcmpge>
 8003cc4:	bb68      	cbnz	r0, 8003d22 <__kernel_rem_pio2+0x2ba>
 8003cc6:	4683      	mov	fp, r0
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2300      	movs	r3, #0
 8003ccc:	4640      	mov	r0, r8
 8003cce:	4649      	mov	r1, r9
 8003cd0:	f7fc fe9a 	bl	8000a08 <__aeabi_dcmpeq>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	f000 80c1 	beq.w	8003e5c <__kernel_rem_pio2+0x3f4>
 8003cda:	1e7c      	subs	r4, r7, #1
 8003cdc:	4623      	mov	r3, r4
 8003cde:	2200      	movs	r2, #0
 8003ce0:	9900      	ldr	r1, [sp, #0]
 8003ce2:	428b      	cmp	r3, r1
 8003ce4:	da5c      	bge.n	8003da0 <__kernel_rem_pio2+0x338>
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	f040 808b 	bne.w	8003e02 <__kernel_rem_pio2+0x39a>
 8003cec:	2401      	movs	r4, #1
 8003cee:	f06f 0203 	mvn.w	r2, #3
 8003cf2:	fb02 f304 	mul.w	r3, r2, r4
 8003cf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003cf8:	58cb      	ldr	r3, [r1, r3]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d056      	beq.n	8003dac <__kernel_rem_pio2+0x344>
 8003cfe:	9b08      	ldr	r3, [sp, #32]
 8003d00:	aa98      	add	r2, sp, #608	; 0x260
 8003d02:	4413      	add	r3, r2
 8003d04:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8003d08:	9b06      	ldr	r3, [sp, #24]
 8003d0a:	19dd      	adds	r5, r3, r7
 8003d0c:	ab20      	add	r3, sp, #128	; 0x80
 8003d0e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003d12:	19e3      	adds	r3, r4, r7
 8003d14:	1c7e      	adds	r6, r7, #1
 8003d16:	9303      	str	r3, [sp, #12]
 8003d18:	9b03      	ldr	r3, [sp, #12]
 8003d1a:	429e      	cmp	r6, r3
 8003d1c:	dd48      	ble.n	8003db0 <__kernel_rem_pio2+0x348>
 8003d1e:	461f      	mov	r7, r3
 8003d20:	e712      	b.n	8003b48 <__kernel_rem_pio2+0xe0>
 8003d22:	f04f 0b02 	mov.w	fp, #2
 8003d26:	e76c      	b.n	8003c02 <__kernel_rem_pio2+0x19a>
 8003d28:	ab0c      	add	r3, sp, #48	; 0x30
 8003d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2e:	b94c      	cbnz	r4, 8003d44 <__kernel_rem_pio2+0x2dc>
 8003d30:	b12b      	cbz	r3, 8003d3e <__kernel_rem_pio2+0x2d6>
 8003d32:	a80c      	add	r0, sp, #48	; 0x30
 8003d34:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003d38:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	3201      	adds	r2, #1
 8003d40:	461c      	mov	r4, r3
 8003d42:	e765      	b.n	8003c10 <__kernel_rem_pio2+0x1a8>
 8003d44:	a80c      	add	r0, sp, #48	; 0x30
 8003d46:	1acb      	subs	r3, r1, r3
 8003d48:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003d4c:	4623      	mov	r3, r4
 8003d4e:	e7f6      	b.n	8003d3e <__kernel_rem_pio2+0x2d6>
 8003d50:	1e7a      	subs	r2, r7, #1
 8003d52:	ab0c      	add	r3, sp, #48	; 0x30
 8003d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d58:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003d5c:	a90c      	add	r1, sp, #48	; 0x30
 8003d5e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003d62:	e763      	b.n	8003c2c <__kernel_rem_pio2+0x1c4>
 8003d64:	1e7a      	subs	r2, r7, #1
 8003d66:	ab0c      	add	r3, sp, #48	; 0x30
 8003d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003d70:	e7f4      	b.n	8003d5c <__kernel_rem_pio2+0x2f4>
 8003d72:	bf00      	nop
 8003d74:	f3af 8000 	nop.w
	...
 8003d84:	3ff00000 	.word	0x3ff00000
 8003d88:	08004a30 	.word	0x08004a30
 8003d8c:	40200000 	.word	0x40200000
 8003d90:	3ff00000 	.word	0x3ff00000
 8003d94:	3e700000 	.word	0x3e700000
 8003d98:	41700000 	.word	0x41700000
 8003d9c:	3fe00000 	.word	0x3fe00000
 8003da0:	a90c      	add	r1, sp, #48	; 0x30
 8003da2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	430a      	orrs	r2, r1
 8003daa:	e799      	b.n	8003ce0 <__kernel_rem_pio2+0x278>
 8003dac:	3401      	adds	r4, #1
 8003dae:	e7a0      	b.n	8003cf2 <__kernel_rem_pio2+0x28a>
 8003db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003db2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003db6:	f7fc fb59 	bl	800046c <__aeabi_i2d>
 8003dba:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc0:	9508      	str	r5, [sp, #32]
 8003dc2:	461c      	mov	r4, r3
 8003dc4:	2700      	movs	r7, #0
 8003dc6:	f04f 0800 	mov.w	r8, #0
 8003dca:	f04f 0900 	mov.w	r9, #0
 8003dce:	9b04      	ldr	r3, [sp, #16]
 8003dd0:	429f      	cmp	r7, r3
 8003dd2:	dd03      	ble.n	8003ddc <__kernel_rem_pio2+0x374>
 8003dd4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003dd8:	3601      	adds	r6, #1
 8003dda:	e79d      	b.n	8003d18 <__kernel_rem_pio2+0x2b0>
 8003ddc:	9908      	ldr	r1, [sp, #32]
 8003dde:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003de2:	9108      	str	r1, [sp, #32]
 8003de4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003de8:	f7fc fba6 	bl	8000538 <__aeabi_dmul>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4640      	mov	r0, r8
 8003df2:	4649      	mov	r1, r9
 8003df4:	f7fc f9ee 	bl	80001d4 <__adddf3>
 8003df8:	3701      	adds	r7, #1
 8003dfa:	4680      	mov	r8, r0
 8003dfc:	4689      	mov	r9, r1
 8003dfe:	e7e6      	b.n	8003dce <__kernel_rem_pio2+0x366>
 8003e00:	3c01      	subs	r4, #1
 8003e02:	ab0c      	add	r3, sp, #48	; 0x30
 8003e04:	f1aa 0a18 	sub.w	sl, sl, #24
 8003e08:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f7      	beq.n	8003e00 <__kernel_rem_pio2+0x398>
 8003e10:	4650      	mov	r0, sl
 8003e12:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 80040e8 <__kernel_rem_pio2+0x680>
 8003e16:	f000 fabf 	bl	8004398 <scalbn>
 8003e1a:	00e5      	lsls	r5, r4, #3
 8003e1c:	ab98      	add	r3, sp, #608	; 0x260
 8003e1e:	eb03 0905 	add.w	r9, r3, r5
 8003e22:	ec57 6b10 	vmov	r6, r7, d0
 8003e26:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8003e2a:	46a0      	mov	r8, r4
 8003e2c:	f1b8 0f00 	cmp.w	r8, #0
 8003e30:	da4d      	bge.n	8003ece <__kernel_rem_pio2+0x466>
 8003e32:	ed9f 8baf 	vldr	d8, [pc, #700]	; 80040f0 <__kernel_rem_pio2+0x688>
 8003e36:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	4657      	mov	r7, sl
 8003e40:	9b04      	ldr	r3, [sp, #16]
 8003e42:	ebb4 0903 	subs.w	r9, r4, r3
 8003e46:	d476      	bmi.n	8003f36 <__kernel_rem_pio2+0x4ce>
 8003e48:	4bab      	ldr	r3, [pc, #684]	; (80040f8 <__kernel_rem_pio2+0x690>)
 8003e4a:	461e      	mov	r6, r3
 8003e4c:	ab70      	add	r3, sp, #448	; 0x1c0
 8003e4e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003e52:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003e56:	f04f 0800 	mov.w	r8, #0
 8003e5a:	e05e      	b.n	8003f1a <__kernel_rem_pio2+0x4b2>
 8003e5c:	f1ca 0000 	rsb	r0, sl, #0
 8003e60:	ec49 8b10 	vmov	d0, r8, r9
 8003e64:	f000 fa98 	bl	8004398 <scalbn>
 8003e68:	ec55 4b10 	vmov	r4, r5, d0
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4ba3      	ldr	r3, [pc, #652]	; (80040fc <__kernel_rem_pio2+0x694>)
 8003e70:	ee10 0a10 	vmov	r0, s0
 8003e74:	4629      	mov	r1, r5
 8003e76:	f7fc fde5 	bl	8000a44 <__aeabi_dcmpge>
 8003e7a:	b1f8      	cbz	r0, 8003ebc <__kernel_rem_pio2+0x454>
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	4ba0      	ldr	r3, [pc, #640]	; (8004100 <__kernel_rem_pio2+0x698>)
 8003e80:	4620      	mov	r0, r4
 8003e82:	4629      	mov	r1, r5
 8003e84:	f7fc fb58 	bl	8000538 <__aeabi_dmul>
 8003e88:	f7fc fdf0 	bl	8000a6c <__aeabi_d2iz>
 8003e8c:	4606      	mov	r6, r0
 8003e8e:	f7fc faed 	bl	800046c <__aeabi_i2d>
 8003e92:	2200      	movs	r2, #0
 8003e94:	4b99      	ldr	r3, [pc, #612]	; (80040fc <__kernel_rem_pio2+0x694>)
 8003e96:	f7fc fb4f 	bl	8000538 <__aeabi_dmul>
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f7fc f995 	bl	80001d0 <__aeabi_dsub>
 8003ea6:	f7fc fde1 	bl	8000a6c <__aeabi_d2iz>
 8003eaa:	1c7c      	adds	r4, r7, #1
 8003eac:	ab0c      	add	r3, sp, #48	; 0x30
 8003eae:	f10a 0a18 	add.w	sl, sl, #24
 8003eb2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003eb6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8003eba:	e7a9      	b.n	8003e10 <__kernel_rem_pio2+0x3a8>
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f7fc fdd4 	bl	8000a6c <__aeabi_d2iz>
 8003ec4:	ab0c      	add	r3, sp, #48	; 0x30
 8003ec6:	463c      	mov	r4, r7
 8003ec8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003ecc:	e7a0      	b.n	8003e10 <__kernel_rem_pio2+0x3a8>
 8003ece:	ab0c      	add	r3, sp, #48	; 0x30
 8003ed0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003ed4:	f7fc faca 	bl	800046c <__aeabi_i2d>
 8003ed8:	4632      	mov	r2, r6
 8003eda:	463b      	mov	r3, r7
 8003edc:	f7fc fb2c 	bl	8000538 <__aeabi_dmul>
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8003ee6:	4b86      	ldr	r3, [pc, #536]	; (8004100 <__kernel_rem_pio2+0x698>)
 8003ee8:	4630      	mov	r0, r6
 8003eea:	4639      	mov	r1, r7
 8003eec:	f7fc fb24 	bl	8000538 <__aeabi_dmul>
 8003ef0:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ef4:	4606      	mov	r6, r0
 8003ef6:	460f      	mov	r7, r1
 8003ef8:	e798      	b.n	8003e2c <__kernel_rem_pio2+0x3c4>
 8003efa:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003efe:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8003f02:	f7fc fb19 	bl	8000538 <__aeabi_dmul>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f0e:	f7fc f961 	bl	80001d4 <__adddf3>
 8003f12:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f16:	f108 0801 	add.w	r8, r8, #1
 8003f1a:	9b00      	ldr	r3, [sp, #0]
 8003f1c:	4598      	cmp	r8, r3
 8003f1e:	dc02      	bgt.n	8003f26 <__kernel_rem_pio2+0x4be>
 8003f20:	9b04      	ldr	r3, [sp, #16]
 8003f22:	4598      	cmp	r8, r3
 8003f24:	dde9      	ble.n	8003efa <__kernel_rem_pio2+0x492>
 8003f26:	9b04      	ldr	r3, [sp, #16]
 8003f28:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	ecaa 7b02 	vstmia	sl!, {d7}
 8003f32:	9304      	str	r3, [sp, #16]
 8003f34:	e784      	b.n	8003e40 <__kernel_rem_pio2+0x3d8>
 8003f36:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d85d      	bhi.n	8003ff8 <__kernel_rem_pio2+0x590>
 8003f3c:	e8df f003 	tbb	[pc, r3]
 8003f40:	0226264b 	.word	0x0226264b
 8003f44:	ab98      	add	r3, sp, #608	; 0x260
 8003f46:	441d      	add	r5, r3
 8003f48:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8003f4c:	462e      	mov	r6, r5
 8003f4e:	46a2      	mov	sl, r4
 8003f50:	f1ba 0f00 	cmp.w	sl, #0
 8003f54:	dc6e      	bgt.n	8004034 <__kernel_rem_pio2+0x5cc>
 8003f56:	462e      	mov	r6, r5
 8003f58:	46a2      	mov	sl, r4
 8003f5a:	f1ba 0f01 	cmp.w	sl, #1
 8003f5e:	f300 808a 	bgt.w	8004076 <__kernel_rem_pio2+0x60e>
 8003f62:	2000      	movs	r0, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	2c01      	cmp	r4, #1
 8003f68:	f300 80a6 	bgt.w	80040b8 <__kernel_rem_pio2+0x650>
 8003f6c:	f1bb 0f00 	cmp.w	fp, #0
 8003f70:	f040 80a8 	bne.w	80040c4 <__kernel_rem_pio2+0x65c>
 8003f74:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8003f78:	9c02      	ldr	r4, [sp, #8]
 8003f7a:	e9c4 2300 	strd	r2, r3, [r4]
 8003f7e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8003f82:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8003f86:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003f8a:	e035      	b.n	8003ff8 <__kernel_rem_pio2+0x590>
 8003f8c:	3508      	adds	r5, #8
 8003f8e:	ab48      	add	r3, sp, #288	; 0x120
 8003f90:	441d      	add	r5, r3
 8003f92:	4626      	mov	r6, r4
 8003f94:	2000      	movs	r0, #0
 8003f96:	2100      	movs	r1, #0
 8003f98:	2e00      	cmp	r6, #0
 8003f9a:	da3c      	bge.n	8004016 <__kernel_rem_pio2+0x5ae>
 8003f9c:	f1bb 0f00 	cmp.w	fp, #0
 8003fa0:	d03f      	beq.n	8004022 <__kernel_rem_pio2+0x5ba>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003fa8:	9d02      	ldr	r5, [sp, #8]
 8003faa:	e9c5 2300 	strd	r2, r3, [r5]
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003fb6:	f7fc f90b 	bl	80001d0 <__aeabi_dsub>
 8003fba:	ae4a      	add	r6, sp, #296	; 0x128
 8003fbc:	2501      	movs	r5, #1
 8003fbe:	42ac      	cmp	r4, r5
 8003fc0:	da32      	bge.n	8004028 <__kernel_rem_pio2+0x5c0>
 8003fc2:	f1bb 0f00 	cmp.w	fp, #0
 8003fc6:	d002      	beq.n	8003fce <__kernel_rem_pio2+0x566>
 8003fc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003fcc:	4619      	mov	r1, r3
 8003fce:	9b02      	ldr	r3, [sp, #8]
 8003fd0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003fd4:	e010      	b.n	8003ff8 <__kernel_rem_pio2+0x590>
 8003fd6:	ab98      	add	r3, sp, #608	; 0x260
 8003fd8:	441d      	add	r5, r3
 8003fda:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8003fde:	2000      	movs	r0, #0
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	2c00      	cmp	r4, #0
 8003fe4:	da11      	bge.n	800400a <__kernel_rem_pio2+0x5a2>
 8003fe6:	f1bb 0f00 	cmp.w	fp, #0
 8003fea:	d002      	beq.n	8003ff2 <__kernel_rem_pio2+0x58a>
 8003fec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	9b02      	ldr	r3, [sp, #8]
 8003ff4:	e9c3 0100 	strd	r0, r1, [r3]
 8003ff8:	9b03      	ldr	r3, [sp, #12]
 8003ffa:	f003 0007 	and.w	r0, r3, #7
 8003ffe:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004002:	ecbd 8b02 	vpop	{d8}
 8004006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800400e:	f7fc f8e1 	bl	80001d4 <__adddf3>
 8004012:	3c01      	subs	r4, #1
 8004014:	e7e5      	b.n	8003fe2 <__kernel_rem_pio2+0x57a>
 8004016:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800401a:	f7fc f8db 	bl	80001d4 <__adddf3>
 800401e:	3e01      	subs	r6, #1
 8004020:	e7ba      	b.n	8003f98 <__kernel_rem_pio2+0x530>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	e7bf      	b.n	8003fa8 <__kernel_rem_pio2+0x540>
 8004028:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800402c:	f7fc f8d2 	bl	80001d4 <__adddf3>
 8004030:	3501      	adds	r5, #1
 8004032:	e7c4      	b.n	8003fbe <__kernel_rem_pio2+0x556>
 8004034:	ed16 7b02 	vldr	d7, [r6, #-8]
 8004038:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800403c:	ec53 2b17 	vmov	r2, r3, d7
 8004040:	4640      	mov	r0, r8
 8004042:	4649      	mov	r1, r9
 8004044:	ed8d 7b00 	vstr	d7, [sp]
 8004048:	f7fc f8c4 	bl	80001d4 <__adddf3>
 800404c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4640      	mov	r0, r8
 8004056:	4649      	mov	r1, r9
 8004058:	f7fc f8ba 	bl	80001d0 <__aeabi_dsub>
 800405c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004060:	f7fc f8b8 	bl	80001d4 <__adddf3>
 8004064:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004068:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800406c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004070:	ed06 7b02 	vstr	d7, [r6, #-8]
 8004074:	e76c      	b.n	8003f50 <__kernel_rem_pio2+0x4e8>
 8004076:	ed16 7b02 	vldr	d7, [r6, #-8]
 800407a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800407e:	ec53 2b17 	vmov	r2, r3, d7
 8004082:	4640      	mov	r0, r8
 8004084:	4649      	mov	r1, r9
 8004086:	ed8d 7b00 	vstr	d7, [sp]
 800408a:	f7fc f8a3 	bl	80001d4 <__adddf3>
 800408e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4640      	mov	r0, r8
 8004098:	4649      	mov	r1, r9
 800409a:	f7fc f899 	bl	80001d0 <__aeabi_dsub>
 800409e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040a2:	f7fc f897 	bl	80001d4 <__adddf3>
 80040a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80040aa:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80040ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80040b2:	ed06 7b02 	vstr	d7, [r6, #-8]
 80040b6:	e750      	b.n	8003f5a <__kernel_rem_pio2+0x4f2>
 80040b8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80040bc:	f7fc f88a 	bl	80001d4 <__adddf3>
 80040c0:	3c01      	subs	r4, #1
 80040c2:	e750      	b.n	8003f66 <__kernel_rem_pio2+0x4fe>
 80040c4:	9a02      	ldr	r2, [sp, #8]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6110      	str	r0, [r2, #16]
 80040ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80040d2:	6053      	str	r3, [r2, #4]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6093      	str	r3, [r2, #8]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80040de:	60d3      	str	r3, [r2, #12]
 80040e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040e4:	6153      	str	r3, [r2, #20]
 80040e6:	e787      	b.n	8003ff8 <__kernel_rem_pio2+0x590>
 80040e8:	00000000 	.word	0x00000000
 80040ec:	3ff00000 	.word	0x3ff00000
	...
 80040f8:	080049f0 	.word	0x080049f0
 80040fc:	41700000 	.word	0x41700000
 8004100:	3e700000 	.word	0x3e700000
 8004104:	00000000 	.word	0x00000000

08004108 <__kernel_sin>:
 8004108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410c:	ec55 4b10 	vmov	r4, r5, d0
 8004110:	b085      	sub	sp, #20
 8004112:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004116:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800411a:	ed8d 1b00 	vstr	d1, [sp]
 800411e:	9002      	str	r0, [sp, #8]
 8004120:	da06      	bge.n	8004130 <__kernel_sin+0x28>
 8004122:	ee10 0a10 	vmov	r0, s0
 8004126:	4629      	mov	r1, r5
 8004128:	f7fc fca0 	bl	8000a6c <__aeabi_d2iz>
 800412c:	2800      	cmp	r0, #0
 800412e:	d051      	beq.n	80041d4 <__kernel_sin+0xcc>
 8004130:	4622      	mov	r2, r4
 8004132:	462b      	mov	r3, r5
 8004134:	4620      	mov	r0, r4
 8004136:	4629      	mov	r1, r5
 8004138:	f7fc f9fe 	bl	8000538 <__aeabi_dmul>
 800413c:	4682      	mov	sl, r0
 800413e:	468b      	mov	fp, r1
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4620      	mov	r0, r4
 8004146:	4629      	mov	r1, r5
 8004148:	f7fc f9f6 	bl	8000538 <__aeabi_dmul>
 800414c:	a341      	add	r3, pc, #260	; (adr r3, 8004254 <__kernel_sin+0x14c>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	4680      	mov	r8, r0
 8004154:	4689      	mov	r9, r1
 8004156:	4650      	mov	r0, sl
 8004158:	4659      	mov	r1, fp
 800415a:	f7fc f9ed 	bl	8000538 <__aeabi_dmul>
 800415e:	a33f      	add	r3, pc, #252	; (adr r3, 800425c <__kernel_sin+0x154>)
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f7fc f834 	bl	80001d0 <__aeabi_dsub>
 8004168:	4652      	mov	r2, sl
 800416a:	465b      	mov	r3, fp
 800416c:	f7fc f9e4 	bl	8000538 <__aeabi_dmul>
 8004170:	a33c      	add	r3, pc, #240	; (adr r3, 8004264 <__kernel_sin+0x15c>)
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f7fc f82d 	bl	80001d4 <__adddf3>
 800417a:	4652      	mov	r2, sl
 800417c:	465b      	mov	r3, fp
 800417e:	f7fc f9db 	bl	8000538 <__aeabi_dmul>
 8004182:	a33a      	add	r3, pc, #232	; (adr r3, 800426c <__kernel_sin+0x164>)
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f7fc f822 	bl	80001d0 <__aeabi_dsub>
 800418c:	4652      	mov	r2, sl
 800418e:	465b      	mov	r3, fp
 8004190:	f7fc f9d2 	bl	8000538 <__aeabi_dmul>
 8004194:	a337      	add	r3, pc, #220	; (adr r3, 8004274 <__kernel_sin+0x16c>)
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f7fc f81b 	bl	80001d4 <__adddf3>
 800419e:	9b02      	ldr	r3, [sp, #8]
 80041a0:	4606      	mov	r6, r0
 80041a2:	460f      	mov	r7, r1
 80041a4:	b9db      	cbnz	r3, 80041de <__kernel_sin+0xd6>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4650      	mov	r0, sl
 80041ac:	4659      	mov	r1, fp
 80041ae:	f7fc f9c3 	bl	8000538 <__aeabi_dmul>
 80041b2:	a325      	add	r3, pc, #148	; (adr r3, 8004248 <__kernel_sin+0x140>)
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f7fc f80a 	bl	80001d0 <__aeabi_dsub>
 80041bc:	4642      	mov	r2, r8
 80041be:	464b      	mov	r3, r9
 80041c0:	f7fc f9ba 	bl	8000538 <__aeabi_dmul>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4620      	mov	r0, r4
 80041ca:	4629      	mov	r1, r5
 80041cc:	f7fc f802 	bl	80001d4 <__adddf3>
 80041d0:	4604      	mov	r4, r0
 80041d2:	460d      	mov	r5, r1
 80041d4:	ec45 4b10 	vmov	d0, r4, r5
 80041d8:	b005      	add	sp, #20
 80041da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041de:	2200      	movs	r2, #0
 80041e0:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <__kernel_sin+0x148>)
 80041e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041e6:	f7fc f9a7 	bl	8000538 <__aeabi_dmul>
 80041ea:	4632      	mov	r2, r6
 80041ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041f0:	463b      	mov	r3, r7
 80041f2:	4640      	mov	r0, r8
 80041f4:	4649      	mov	r1, r9
 80041f6:	f7fc f99f 	bl	8000538 <__aeabi_dmul>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004202:	f7fb ffe5 	bl	80001d0 <__aeabi_dsub>
 8004206:	4652      	mov	r2, sl
 8004208:	465b      	mov	r3, fp
 800420a:	f7fc f995 	bl	8000538 <__aeabi_dmul>
 800420e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004212:	f7fb ffdd 	bl	80001d0 <__aeabi_dsub>
 8004216:	a30c      	add	r3, pc, #48	; (adr r3, 8004248 <__kernel_sin+0x140>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	4606      	mov	r6, r0
 800421e:	460f      	mov	r7, r1
 8004220:	4640      	mov	r0, r8
 8004222:	4649      	mov	r1, r9
 8004224:	f7fc f988 	bl	8000538 <__aeabi_dmul>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4630      	mov	r0, r6
 800422e:	4639      	mov	r1, r7
 8004230:	f7fb ffd0 	bl	80001d4 <__adddf3>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4620      	mov	r0, r4
 800423a:	4629      	mov	r1, r5
 800423c:	f7fb ffc8 	bl	80001d0 <__aeabi_dsub>
 8004240:	e7c6      	b.n	80041d0 <__kernel_sin+0xc8>
 8004242:	bf00      	nop
 8004244:	f3af 8000 	nop.w
 8004248:	55555549 	.word	0x55555549
 800424c:	3fc55555 	.word	0x3fc55555
 8004250:	3fe00000 	.word	0x3fe00000
 8004254:	5acfd57c 	.word	0x5acfd57c
 8004258:	3de5d93a 	.word	0x3de5d93a
 800425c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004260:	3e5ae5e6 	.word	0x3e5ae5e6
 8004264:	57b1fe7d 	.word	0x57b1fe7d
 8004268:	3ec71de3 	.word	0x3ec71de3
 800426c:	19c161d5 	.word	0x19c161d5
 8004270:	3f2a01a0 	.word	0x3f2a01a0
 8004274:	1110f8a6 	.word	0x1110f8a6
 8004278:	3f811111 	.word	0x3f811111

0800427c <fabs>:
 800427c:	ec53 2b10 	vmov	r2, r3, d0
 8004280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004284:	ec43 2b10 	vmov	d0, r2, r3
 8004288:	4770      	bx	lr
 800428a:	0000      	movs	r0, r0
 800428c:	0000      	movs	r0, r0
	...

08004290 <floor>:
 8004290:	ec51 0b10 	vmov	r0, r1, d0
 8004294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004298:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800429c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80042a0:	2e13      	cmp	r6, #19
 80042a2:	ee10 8a10 	vmov	r8, s0
 80042a6:	460c      	mov	r4, r1
 80042a8:	ee10 5a10 	vmov	r5, s0
 80042ac:	dc35      	bgt.n	800431a <floor+0x8a>
 80042ae:	2e00      	cmp	r6, #0
 80042b0:	da17      	bge.n	80042e2 <floor+0x52>
 80042b2:	a335      	add	r3, pc, #212	; (adr r3, 8004388 <floor+0xf8>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fb ff8c 	bl	80001d4 <__adddf3>
 80042bc:	2200      	movs	r2, #0
 80042be:	2300      	movs	r3, #0
 80042c0:	f7fc fbca 	bl	8000a58 <__aeabi_dcmpgt>
 80042c4:	b150      	cbz	r0, 80042dc <floor+0x4c>
 80042c6:	2c00      	cmp	r4, #0
 80042c8:	da5a      	bge.n	8004380 <floor+0xf0>
 80042ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80042ce:	ea53 0308 	orrs.w	r3, r3, r8
 80042d2:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <floor+0x100>)
 80042d4:	f04f 0500 	mov.w	r5, #0
 80042d8:	bf18      	it	ne
 80042da:	461c      	movne	r4, r3
 80042dc:	4621      	mov	r1, r4
 80042de:	4628      	mov	r0, r5
 80042e0:	e025      	b.n	800432e <floor+0x9e>
 80042e2:	4f2c      	ldr	r7, [pc, #176]	; (8004394 <floor+0x104>)
 80042e4:	4137      	asrs	r7, r6
 80042e6:	ea01 0307 	and.w	r3, r1, r7
 80042ea:	4303      	orrs	r3, r0
 80042ec:	d01f      	beq.n	800432e <floor+0x9e>
 80042ee:	a326      	add	r3, pc, #152	; (adr r3, 8004388 <floor+0xf8>)
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	f7fb ff6e 	bl	80001d4 <__adddf3>
 80042f8:	2200      	movs	r2, #0
 80042fa:	2300      	movs	r3, #0
 80042fc:	f7fc fbac 	bl	8000a58 <__aeabi_dcmpgt>
 8004300:	2800      	cmp	r0, #0
 8004302:	d0eb      	beq.n	80042dc <floor+0x4c>
 8004304:	2c00      	cmp	r4, #0
 8004306:	bfbe      	ittt	lt
 8004308:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800430c:	fa43 f606 	asrlt.w	r6, r3, r6
 8004310:	19a4      	addlt	r4, r4, r6
 8004312:	ea24 0407 	bic.w	r4, r4, r7
 8004316:	2500      	movs	r5, #0
 8004318:	e7e0      	b.n	80042dc <floor+0x4c>
 800431a:	2e33      	cmp	r6, #51	; 0x33
 800431c:	dd0b      	ble.n	8004336 <floor+0xa6>
 800431e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004322:	d104      	bne.n	800432e <floor+0x9e>
 8004324:	ee10 2a10 	vmov	r2, s0
 8004328:	460b      	mov	r3, r1
 800432a:	f7fb ff53 	bl	80001d4 <__adddf3>
 800432e:	ec41 0b10 	vmov	d0, r0, r1
 8004332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004336:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800433a:	f04f 33ff 	mov.w	r3, #4294967295
 800433e:	fa23 f707 	lsr.w	r7, r3, r7
 8004342:	4238      	tst	r0, r7
 8004344:	d0f3      	beq.n	800432e <floor+0x9e>
 8004346:	a310      	add	r3, pc, #64	; (adr r3, 8004388 <floor+0xf8>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fb ff42 	bl	80001d4 <__adddf3>
 8004350:	2200      	movs	r2, #0
 8004352:	2300      	movs	r3, #0
 8004354:	f7fc fb80 	bl	8000a58 <__aeabi_dcmpgt>
 8004358:	2800      	cmp	r0, #0
 800435a:	d0bf      	beq.n	80042dc <floor+0x4c>
 800435c:	2c00      	cmp	r4, #0
 800435e:	da02      	bge.n	8004366 <floor+0xd6>
 8004360:	2e14      	cmp	r6, #20
 8004362:	d103      	bne.n	800436c <floor+0xdc>
 8004364:	3401      	adds	r4, #1
 8004366:	ea25 0507 	bic.w	r5, r5, r7
 800436a:	e7b7      	b.n	80042dc <floor+0x4c>
 800436c:	2301      	movs	r3, #1
 800436e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004372:	fa03 f606 	lsl.w	r6, r3, r6
 8004376:	4435      	add	r5, r6
 8004378:	45a8      	cmp	r8, r5
 800437a:	bf88      	it	hi
 800437c:	18e4      	addhi	r4, r4, r3
 800437e:	e7f2      	b.n	8004366 <floor+0xd6>
 8004380:	2500      	movs	r5, #0
 8004382:	462c      	mov	r4, r5
 8004384:	e7aa      	b.n	80042dc <floor+0x4c>
 8004386:	bf00      	nop
 8004388:	8800759c 	.word	0x8800759c
 800438c:	7e37e43c 	.word	0x7e37e43c
 8004390:	bff00000 	.word	0xbff00000
 8004394:	000fffff 	.word	0x000fffff

08004398 <scalbn>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	ec55 4b10 	vmov	r4, r5, d0
 800439e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80043a2:	4606      	mov	r6, r0
 80043a4:	462b      	mov	r3, r5
 80043a6:	b9b2      	cbnz	r2, 80043d6 <scalbn+0x3e>
 80043a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80043ac:	4323      	orrs	r3, r4
 80043ae:	d03c      	beq.n	800442a <scalbn+0x92>
 80043b0:	2200      	movs	r2, #0
 80043b2:	4b33      	ldr	r3, [pc, #204]	; (8004480 <scalbn+0xe8>)
 80043b4:	4629      	mov	r1, r5
 80043b6:	ee10 0a10 	vmov	r0, s0
 80043ba:	f7fc f8bd 	bl	8000538 <__aeabi_dmul>
 80043be:	4a31      	ldr	r2, [pc, #196]	; (8004484 <scalbn+0xec>)
 80043c0:	4296      	cmp	r6, r2
 80043c2:	4604      	mov	r4, r0
 80043c4:	460d      	mov	r5, r1
 80043c6:	460b      	mov	r3, r1
 80043c8:	da13      	bge.n	80043f2 <scalbn+0x5a>
 80043ca:	a329      	add	r3, pc, #164	; (adr r3, 8004470 <scalbn+0xd8>)
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f7fc f8b2 	bl	8000538 <__aeabi_dmul>
 80043d4:	e00a      	b.n	80043ec <scalbn+0x54>
 80043d6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80043da:	428a      	cmp	r2, r1
 80043dc:	d10c      	bne.n	80043f8 <scalbn+0x60>
 80043de:	ee10 2a10 	vmov	r2, s0
 80043e2:	462b      	mov	r3, r5
 80043e4:	4620      	mov	r0, r4
 80043e6:	4629      	mov	r1, r5
 80043e8:	f7fb fef4 	bl	80001d4 <__adddf3>
 80043ec:	4604      	mov	r4, r0
 80043ee:	460d      	mov	r5, r1
 80043f0:	e01b      	b.n	800442a <scalbn+0x92>
 80043f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80043f6:	3a36      	subs	r2, #54	; 0x36
 80043f8:	4432      	add	r2, r6
 80043fa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80043fe:	428a      	cmp	r2, r1
 8004400:	dd0b      	ble.n	800441a <scalbn+0x82>
 8004402:	ec45 4b11 	vmov	d1, r4, r5
 8004406:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004478 <scalbn+0xe0>
 800440a:	f000 f83f 	bl	800448c <copysign>
 800440e:	a31a      	add	r3, pc, #104	; (adr r3, 8004478 <scalbn+0xe0>)
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	ec51 0b10 	vmov	r0, r1, d0
 8004418:	e7da      	b.n	80043d0 <scalbn+0x38>
 800441a:	2a00      	cmp	r2, #0
 800441c:	dd08      	ble.n	8004430 <scalbn+0x98>
 800441e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004422:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004426:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800442a:	ec45 4b10 	vmov	d0, r4, r5
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004434:	da0d      	bge.n	8004452 <scalbn+0xba>
 8004436:	f24c 3350 	movw	r3, #50000	; 0xc350
 800443a:	429e      	cmp	r6, r3
 800443c:	ec45 4b11 	vmov	d1, r4, r5
 8004440:	dce1      	bgt.n	8004406 <scalbn+0x6e>
 8004442:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8004470 <scalbn+0xd8>
 8004446:	f000 f821 	bl	800448c <copysign>
 800444a:	a309      	add	r3, pc, #36	; (adr r3, 8004470 <scalbn+0xd8>)
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	e7e0      	b.n	8004414 <scalbn+0x7c>
 8004452:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004456:	3236      	adds	r2, #54	; 0x36
 8004458:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800445c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004460:	4620      	mov	r0, r4
 8004462:	4629      	mov	r1, r5
 8004464:	2200      	movs	r2, #0
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <scalbn+0xf0>)
 8004468:	e7b2      	b.n	80043d0 <scalbn+0x38>
 800446a:	bf00      	nop
 800446c:	f3af 8000 	nop.w
 8004470:	c2f8f359 	.word	0xc2f8f359
 8004474:	01a56e1f 	.word	0x01a56e1f
 8004478:	8800759c 	.word	0x8800759c
 800447c:	7e37e43c 	.word	0x7e37e43c
 8004480:	43500000 	.word	0x43500000
 8004484:	ffff3cb0 	.word	0xffff3cb0
 8004488:	3c900000 	.word	0x3c900000

0800448c <copysign>:
 800448c:	ec53 2b10 	vmov	r2, r3, d0
 8004490:	ee11 0a90 	vmov	r0, s3
 8004494:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004498:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800449c:	ea41 0300 	orr.w	r3, r1, r0
 80044a0:	ec43 2b10 	vmov	d0, r2, r3
 80044a4:	4770      	bx	lr
	...

080044a8 <_init>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr

080044b4 <_fini>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr

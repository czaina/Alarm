
alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002598  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002720  08002720  00012720  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000184  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000190  20000190  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018457  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e0e  00000000  00000000  00038493  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007e4b  00000000  00000000  0003b2a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b00  00000000  00000000  000430f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e98  00000000  00000000  00043bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000608b  00000000  00000000  00044a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004141  00000000  00000000  0004ab13  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004ec54  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ff4  00000000  00000000  0004ecd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002708 	.word	0x08002708

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002708 	.word	0x08002708

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f8a0 	bl	8000324 <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f856 	bl	80002a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f82f 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f002 f8ae 	bl	8002388 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800025c:	f7ff fff6 	bl	800024c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000260:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000262:	bf1c      	itt	ne
 8000264:	4b05      	ldrne	r3, [pc, #20]	; (800027c <HAL_Delay+0x24>)
 8000266:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000268:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800026a:	bf18      	it	ne
 800026c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800026e:	f7ff ffed 	bl	800024c <HAL_GetTick>
 8000272:	1b40      	subs	r0, r0, r5
 8000274:	4284      	cmp	r4, r0
 8000276:	d8fa      	bhi.n	800026e <HAL_Delay+0x16>
  {
  }
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000

08000280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000282:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000284:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000288:	041b      	lsls	r3, r3, #16
 800028a:	0c1b      	lsrs	r3, r3, #16
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000290:	0200      	lsls	r0, r0, #8
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800029a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a6:	b530      	push	{r4, r5, lr}
 80002a8:	68dc      	ldr	r4, [r3, #12]
 80002aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	bf28      	it	cs
 80002b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	f04f 0501 	mov.w	r5, #1
 80002c0:	fa05 f303 	lsl.w	r3, r5, r3
 80002c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	bf8c      	ite	hi
 80002ca:	3c03      	subhi	r4, #3
 80002cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ce:	4019      	ands	r1, r3
 80002d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d2:	fa05 f404 	lsl.w	r4, r5, r4
 80002d6:	3c01      	subs	r4, #1
 80002d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	ea42 0201 	orr.w	r2, r2, r1
 80002e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	bfaf      	iteee	ge
 80002e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	f000 000f 	andlt.w	r0, r0, #15
 80002ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000308 <HAL_NVIC_SetPriority+0x64>)
 80002f0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	bfa5      	ittet	ge
 80002f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000300:	bd30      	pop	{r4, r5, pc}
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000ed14 	.word	0xe000ed14

0800030c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800030c:	0942      	lsrs	r2, r0, #5
 800030e:	2301      	movs	r3, #1
 8000310:	f000 001f 	and.w	r0, r0, #31
 8000314:	fa03 f000 	lsl.w	r0, r3, r0
 8000318:	4b01      	ldr	r3, [pc, #4]	; (8000320 <HAL_NVIC_EnableIRQ+0x14>)
 800031a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800031e:	4770      	bx	lr
 8000320:	e000e100 	.word	0xe000e100

08000324 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000324:	3801      	subs	r0, #1
 8000326:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800032a:	d20a      	bcs.n	8000342 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032e:	4a07      	ldr	r2, [pc, #28]	; (800034c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000330:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	21f0      	movs	r1, #240	; 0xf0
 8000334:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000338:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800033c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000342:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000352:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000354:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000356:	bf0c      	ite	eq
 8000358:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800035c:	f022 0204 	bicne.w	r2, r2, #4
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	4770      	bx	lr
 8000364:	e000e010 	.word	0xe000e010

08000368 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000368:	4770      	bx	lr

0800036a <HAL_SYSTICK_IRQHandler>:
{
 800036a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800036c:	f7ff fffc 	bl	8000368 <HAL_SYSTICK_Callback>
 8000370:	bd08      	pop	{r3, pc}

08000372 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000372:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000374:	4604      	mov	r4, r0
 8000376:	b168      	cbz	r0, 8000394 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000378:	7903      	ldrb	r3, [r0, #4]
 800037a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800037e:	b913      	cbnz	r3, 8000386 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000380:	7142      	strb	r2, [r0, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000382:	f002 f847 	bl	8002414 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000386:	2302      	movs	r3, #2
 8000388:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800038a:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800038c:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800038e:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000390:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000392:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000394:	2001      	movs	r0, #1
}
 8000396:	bd10      	pop	{r4, pc}

08000398 <HAL_DAC_ConvCpltCallbackCh1>:
 8000398:	4770      	bx	lr

0800039a <HAL_DAC_ConvHalfCpltCallbackCh1>:
 800039a:	4770      	bx	lr

0800039c <HAL_DAC_ErrorCallbackCh1>:
 800039c:	4770      	bx	lr

0800039e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800039e:	4770      	bx	lr

080003a0 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80003a0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80003a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80003a4:	6923      	ldr	r3, [r4, #16]
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6123      	str	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80003ac:	4620      	mov	r0, r4
 80003ae:	f7ff fff5 	bl	800039c <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 80003b2:	2301      	movs	r3, #1
 80003b4:	7123      	strb	r3, [r4, #4]
 80003b6:	bd10      	pop	{r4, pc}

080003b8 <DAC_DMAHalfConvCpltCh1>:
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80003b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80003ba:	f7ff bfee 	b.w	800039a <HAL_DAC_ConvHalfCpltCallbackCh1>

080003be <DAC_DMAConvCpltCh1>:
{
 80003be:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80003c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80003c2:	4620      	mov	r0, r4
 80003c4:	f7ff ffe8 	bl	8000398 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 80003c8:	2301      	movs	r3, #1
 80003ca:	7123      	strb	r3, [r4, #4]
 80003cc:	bd10      	pop	{r4, pc}
	...

080003d0 <HAL_DAC_Start_DMA>:
{
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	4605      	mov	r5, r0
  __HAL_LOCK(hdac);
 80003d4:	7940      	ldrb	r0, [r0, #5]
 80003d6:	2801      	cmp	r0, #1
{
 80003d8:	460e      	mov	r6, r1
 80003da:	f04f 0002 	mov.w	r0, #2
 80003de:	4611      	mov	r1, r2
 80003e0:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 80003e2:	d04c      	beq.n	800047e <HAL_DAC_Start_DMA+0xae>
 80003e4:	2401      	movs	r4, #1
 80003e6:	716c      	strb	r4, [r5, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80003e8:	7128      	strb	r0, [r5, #4]
 80003ea:	682c      	ldr	r4, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 80003ec:	b9e6      	cbnz	r6, 8000428 <HAL_DAC_Start_DMA+0x58>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80003ee:	68a8      	ldr	r0, [r5, #8]
 80003f0:	4f23      	ldr	r7, [pc, #140]	; (8000480 <HAL_DAC_Start_DMA+0xb0>)
 80003f2:	6287      	str	r7, [r0, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80003f4:	4f23      	ldr	r7, [pc, #140]	; (8000484 <HAL_DAC_Start_DMA+0xb4>)
 80003f6:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80003f8:	4f23      	ldr	r7, [pc, #140]	; (8000488 <HAL_DAC_Start_DMA+0xb8>)
 80003fa:	6307      	str	r7, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80003fc:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 80003fe:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8000400:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 8000404:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8000406:	d009      	beq.n	800041c <HAL_DAC_Start_DMA+0x4c>
 8000408:	2a08      	cmp	r2, #8
 800040a:	d00a      	beq.n	8000422 <HAL_DAC_Start_DMA+0x52>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d134      	bne.n	800047a <HAL_DAC_Start_DMA+0xaa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000410:	f104 0208 	add.w	r2, r4, #8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000414:	6827      	ldr	r7, [r4, #0]
 8000416:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 800041a:	e01a      	b.n	8000452 <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800041c:	f104 020c 	add.w	r2, r4, #12
        break;
 8000420:	e7f8      	b.n	8000414 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000422:	f104 0210 	add.w	r2, r4, #16
        break;
 8000426:	e7f5      	b.n	8000414 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000428:	68e8      	ldr	r0, [r5, #12]
 800042a:	4f18      	ldr	r7, [pc, #96]	; (800048c <HAL_DAC_Start_DMA+0xbc>)
 800042c:	6287      	str	r7, [r0, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800042e:	4f18      	ldr	r7, [pc, #96]	; (8000490 <HAL_DAC_Start_DMA+0xc0>)
 8000430:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000432:	4f18      	ldr	r7, [pc, #96]	; (8000494 <HAL_DAC_Start_DMA+0xc4>)
 8000434:	6307      	str	r7, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8000436:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 8000438:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 800043a:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800043e:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8000440:	d013      	beq.n	800046a <HAL_DAC_Start_DMA+0x9a>
 8000442:	2a08      	cmp	r2, #8
 8000444:	d014      	beq.n	8000470 <HAL_DAC_Start_DMA+0xa0>
 8000446:	b9b2      	cbnz	r2, 8000476 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000448:	f104 0214 	add.w	r2, r4, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800044c:	6827      	ldr	r7, [r4, #0]
 800044e:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000452:	6027      	str	r7, [r4, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000454:	f000 f8cc 	bl	80005f0 <HAL_DMA_Start_IT>
  __HAL_DAC_ENABLE(hdac, Channel);
 8000458:	682b      	ldr	r3, [r5, #0]
 800045a:	2101      	movs	r1, #1
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	40b1      	lsls	r1, r6
  __HAL_UNLOCK(hdac);
 8000460:	2000      	movs	r0, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 8000462:	4311      	orrs	r1, r2
  __HAL_UNLOCK(hdac);
 8000464:	7168      	strb	r0, [r5, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8000466:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8000468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800046a:	f104 0218 	add.w	r2, r4, #24
        break;
 800046e:	e7ed      	b.n	800044c <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000470:	f104 021c 	add.w	r2, r4, #28
        break;
 8000474:	e7ea      	b.n	800044c <HAL_DAC_Start_DMA+0x7c>
  uint32_t tmpreg = 0U;
 8000476:	2200      	movs	r2, #0
 8000478:	e7e8      	b.n	800044c <HAL_DAC_Start_DMA+0x7c>
 800047a:	4632      	mov	r2, r6
 800047c:	e7ca      	b.n	8000414 <HAL_DAC_Start_DMA+0x44>
}
 800047e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000480:	080003bf 	.word	0x080003bf
 8000484:	080003b9 	.word	0x080003b9
 8000488:	080003a1 	.word	0x080003a1
 800048c:	080004f7 	.word	0x080004f7
 8000490:	08000509 	.word	0x08000509
 8000494:	08000515 	.word	0x08000515

08000498 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8000498:	7943      	ldrb	r3, [r0, #5]
 800049a:	2b01      	cmp	r3, #1
{
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80004a2:	d01b      	beq.n	80004dc <HAL_DAC_ConfigChannel+0x44>
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80004a4:	6805      	ldr	r5, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80004a6:	7103      	strb	r3, [r0, #4]
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <HAL_DAC_ConfigChannel+0x58>)
  tmpreg1 = hdac->Instance->CR;
 80004aa:	682c      	ldr	r4, [r5, #0]
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80004ac:	429d      	cmp	r5, r3
 80004ae:	680b      	ldr	r3, [r1, #0]
 80004b0:	d116      	bne.n	80004e0 <HAL_DAC_ConfigChannel+0x48>
 80004b2:	b9aa      	cbnz	r2, 80004e0 <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80004b4:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 80004b8:	6849      	ldr	r1, [r1, #4]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80004ba:	f024 040e 	bic.w	r4, r4, #14
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80004be:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << Channel;
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4323      	orrs	r3, r4
  hdac->Instance->CR = tmpreg1;
 80004c4:	602b      	str	r3, [r5, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80004c6:	682b      	ldr	r3, [r5, #0]
 80004c8:	21c0      	movs	r1, #192	; 0xc0
 80004ca:	fa01 f202 	lsl.w	r2, r1, r2
 80004ce:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 80004d2:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80004d4:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80004d6:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 80004d8:	2300      	movs	r3, #0
 80004da:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80004dc:	4618      	mov	r0, r3
}
 80004de:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80004e0:	f640 76fe 	movw	r6, #4094	; 0xffe
 80004e4:	4096      	lsls	r6, r2
 80004e6:	ea24 0406 	bic.w	r4, r4, r6
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80004ea:	6889      	ldr	r1, [r1, #8]
 80004ec:	e7e7      	b.n	80004be <HAL_DAC_ConfigChannel+0x26>
 80004ee:	bf00      	nop
 80004f0:	40007400 	.word	0x40007400

080004f4 <HAL_DACEx_ConvCpltCallbackCh2>:
 80004f4:	4770      	bx	lr

080004f6 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80004f6:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80004f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80004fa:	4620      	mov	r0, r4
 80004fc:	f7ff fffa 	bl	80004f4 <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 8000500:	2301      	movs	r3, #1
 8000502:	7123      	strb	r3, [r4, #4]
 8000504:	bd10      	pop	{r4, pc}

08000506 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8000506:	4770      	bx	lr

08000508 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000508:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800050a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800050c:	f7ff fffb 	bl	8000506 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8000510:	bd08      	pop	{r3, pc}

08000512 <HAL_DACEx_ErrorCallbackCh2>:
 8000512:	4770      	bx	lr

08000514 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000514:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000516:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000518:	6923      	ldr	r3, [r4, #16]
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6123      	str	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000520:	4620      	mov	r0, r4
 8000522:	f7ff fff6 	bl	8000512 <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 8000526:	2301      	movs	r3, #1
 8000528:	7123      	strb	r3, [r4, #4]
 800052a:	bd10      	pop	{r4, pc}

0800052c <HAL_DACEx_DMAUnderrunCallbackCh2>:
{
 800052c:	4770      	bx	lr

0800052e <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800052e:	6803      	ldr	r3, [r0, #0]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	0491      	lsls	r1, r2, #18
{
 8000534:	b510      	push	{r4, lr}
 8000536:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000538:	d511      	bpl.n	800055e <HAL_DAC_IRQHandler+0x30>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800053a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800053c:	0492      	lsls	r2, r2, #18
 800053e:	d50e      	bpl.n	800055e <HAL_DAC_IRQHandler+0x30>
      hdac->State = HAL_DAC_STATE_ERROR;
 8000540:	2204      	movs	r2, #4
 8000542:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000544:	6902      	ldr	r2, [r0, #16]
 8000546:	f042 0201 	orr.w	r2, r2, #1
 800054a:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800054c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000558:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800055a:	f7ff ff20 	bl	800039e <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800055e:	6823      	ldr	r3, [r4, #0]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	0091      	lsls	r1, r2, #2
 8000564:	d512      	bpl.n	800058c <HAL_DAC_IRQHandler+0x5e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	d50f      	bpl.n	800058c <HAL_DAC_IRQHandler+0x5e>
      hdac->State = HAL_DAC_STATE_ERROR;
 800056c:	2204      	movs	r2, #4
 800056e:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000570:	6922      	ldr	r2, [r4, #16]
 8000572:	f042 0202 	orr.w	r2, r2, #2
 8000576:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8000578:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000584:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000586:	4620      	mov	r0, r4
 8000588:	f7ff ffd0 	bl	800052c <HAL_DACEx_DMAUnderrunCallbackCh2>
 800058c:	bd10      	pop	{r4, pc}
	...

08000590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000590:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000592:	b330      	cbz	r0, 80005e2 <HAL_DMA_Init+0x52>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000594:	6884      	ldr	r4, [r0, #8]
 8000596:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000598:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 800059a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800059c:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 800059e:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005a0:	4323      	orrs	r3, r4
 80005a2:	6904      	ldr	r4, [r0, #16]
 80005a4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005a6:	6944      	ldr	r4, [r0, #20]
 80005a8:	4323      	orrs	r3, r4
 80005aa:	6984      	ldr	r4, [r0, #24]
 80005ac:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80005ae:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80005b0:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80005b4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80005b8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80005ba:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80005bc:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_DMA_Init+0x58>)
 80005c0:	2214      	movs	r2, #20
 80005c2:	440b      	add	r3, r1
 80005c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <HAL_DMA_Init+0x5c>)
 80005ce:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80005d0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80005d6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80005da:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 80005de:	4618      	mov	r0, r3
 80005e0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80005e2:	2001      	movs	r0, #1
}  
 80005e4:	bd10      	pop	{r4, pc}
 80005e6:	bf00      	nop
 80005e8:	bffdfff8 	.word	0xbffdfff8
 80005ec:	40020000 	.word	0x40020000

080005f0 <HAL_DMA_Start_IT>:
{
 80005f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80005f2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80005f6:	2c01      	cmp	r4, #1
 80005f8:	d035      	beq.n	8000666 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 80005fa:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80005fe:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000600:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000602:	f880 4020 	strb.w	r4, [r0, #32]
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 800060e:	d128      	bne.n	8000662 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000610:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000614:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000616:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000618:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800061a:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800061c:	f026 0601 	bic.w	r6, r6, #1
 8000620:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000622:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000624:	40bd      	lsls	r5, r7
 8000626:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000628:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800062a:	6843      	ldr	r3, [r0, #4]
 800062c:	6805      	ldr	r5, [r0, #0]
 800062e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000630:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8000632:	bf0b      	itete	eq
 8000634:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8000636:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000638:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800063a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800063c:	b14b      	cbz	r3, 8000652 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000644:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000646:	682b      	ldr	r3, [r5, #0]
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800064e:	2000      	movs	r0, #0
 8000650:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	f043 030a 	orr.w	r3, r3, #10
 8000658:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800065a:	6823      	ldr	r3, [r4, #0]
 800065c:	f023 0304 	bic.w	r3, r3, #4
 8000660:	e7f0      	b.n	8000644 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000662:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000666:	2002      	movs	r0, #2
} 
 8000668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800066a <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800066a:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800066e:	2a02      	cmp	r2, #2
{  
 8000670:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000672:	d003      	beq.n	800067c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000674:	2204      	movs	r2, #4
 8000676:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000678:	2001      	movs	r0, #1
 800067a:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800067c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800067e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000680:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8000682:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000684:	f021 010e 	bic.w	r1, r1, #14
 8000688:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800068a:	6811      	ldr	r1, [r2, #0]
 800068c:	f021 0101 	bic.w	r1, r1, #1
 8000690:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000692:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000694:	2101      	movs	r1, #1
 8000696:	fa01 f202 	lsl.w	r2, r1, r2
 800069a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800069c:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800069e:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80006a2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80006a6:	b113      	cbz	r3, 80006ae <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80006a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80006aa:	4620      	mov	r0, r4
 80006ac:	bd10      	pop	{r4, pc}
 80006ae:	4618      	mov	r0, r3
}
 80006b0:	bd10      	pop	{r4, pc}

080006b2 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006b2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80006b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80006b6:	6803      	ldr	r3, [r0, #0]
{
 80006b8:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006ba:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80006bc:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80006be:	2404      	movs	r4, #4
 80006c0:	4094      	lsls	r4, r2
 80006c2:	4226      	tst	r6, r4
 80006c4:	d00e      	beq.n	80006e4 <HAL_DMA_IRQHandler+0x32>
 80006c6:	f015 0f04 	tst.w	r5, #4
 80006ca:	d00b      	beq.n	80006e4 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80006d0:	bf5e      	ittt	pl
 80006d2:	681a      	ldrpl	r2, [r3, #0]
 80006d4:	f022 0204 	bicpl.w	r2, r2, #4
 80006d8:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80006da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80006dc:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 80006de:	b373      	cbz	r3, 800073e <HAL_DMA_IRQHandler+0x8c>
}  
 80006e0:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80006e2:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80006e4:	2402      	movs	r4, #2
 80006e6:	4094      	lsls	r4, r2
 80006e8:	4226      	tst	r6, r4
 80006ea:	d012      	beq.n	8000712 <HAL_DMA_IRQHandler+0x60>
 80006ec:	f015 0f02 	tst.w	r5, #2
 80006f0:	d00f      	beq.n	8000712 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	0695      	lsls	r5, r2, #26
 80006f6:	d406      	bmi.n	8000706 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	f022 020a 	bic.w	r2, r2, #10
 80006fe:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000700:	2301      	movs	r3, #1
 8000702:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8000706:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000708:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 800070a:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800070e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000710:	e7e5      	b.n	80006de <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000712:	2408      	movs	r4, #8
 8000714:	4094      	lsls	r4, r2
 8000716:	4234      	tst	r4, r6
 8000718:	d011      	beq.n	800073e <HAL_DMA_IRQHandler+0x8c>
 800071a:	072c      	lsls	r4, r5, #28
 800071c:	d50f      	bpl.n	800073e <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800071e:	681c      	ldr	r4, [r3, #0]
 8000720:	f024 040e 	bic.w	r4, r4, #14
 8000724:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000726:	2301      	movs	r3, #1
 8000728:	fa03 f202 	lsl.w	r2, r3, r2
 800072c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800072e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000730:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8000734:	2300      	movs	r3, #0
 8000736:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 800073a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800073c:	e7cf      	b.n	80006de <HAL_DMA_IRQHandler+0x2c>
}  
 800073e:	bc70      	pop	{r4, r5, r6}
 8000740:	4770      	bx	lr
	...

08000744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000748:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800074a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80008b4 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000750:	4a56      	ldr	r2, [pc, #344]	; (80008ac <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000752:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000754:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000758:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800075a:	9c01      	ldr	r4, [sp, #4]
 800075c:	40dc      	lsrs	r4, r3
 800075e:	d102      	bne.n	8000766 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000760:	b005      	add	sp, #20
 8000762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000766:	2401      	movs	r4, #1
 8000768:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800076c:	9c01      	ldr	r4, [sp, #4]
 800076e:	ea14 050a 	ands.w	r5, r4, sl
 8000772:	f000 8093 	beq.w	800089c <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000776:	684c      	ldr	r4, [r1, #4]
 8000778:	f024 0b10 	bic.w	fp, r4, #16
 800077c:	f1bb 0f02 	cmp.w	fp, #2
 8000780:	d111      	bne.n	80007a6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000782:	08df      	lsrs	r7, r3, #3
 8000784:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000788:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800078c:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800078e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000792:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000796:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800079a:	690e      	ldr	r6, [r1, #16]
 800079c:	fa06 f60e 	lsl.w	r6, r6, lr
 80007a0:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80007a4:	623e      	str	r6, [r7, #32]
 80007a6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007aa:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80007ac:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ae:	fa07 f70c 	lsl.w	r7, r7, ip
 80007b2:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b4:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ba:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007be:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007c2:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c6:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80007ca:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007cc:	d811      	bhi.n	80007f2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80007ce:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007d0:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007d4:	68ce      	ldr	r6, [r1, #12]
 80007d6:	fa06 fe0c 	lsl.w	lr, r6, ip
 80007da:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80007de:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80007e0:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007e2:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007e6:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80007ea:	409e      	lsls	r6, r3
 80007ec:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80007f0:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80007f2:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007f4:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007f6:	688e      	ldr	r6, [r1, #8]
 80007f8:	fa06 f60c 	lsl.w	r6, r6, ip
 80007fc:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007fe:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000800:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000802:	d54b      	bpl.n	800089c <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000804:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000808:	f046 0601 	orr.w	r6, r6, #1
 800080c:	f8c8 6018 	str.w	r6, [r8, #24]
 8000810:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000814:	f023 0703 	bic.w	r7, r3, #3
 8000818:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800081c:	f006 0601 	and.w	r6, r6, #1
 8000820:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000824:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000826:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800082c:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800082e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000832:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000836:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800083a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800083e:	d02f      	beq.n	80008a0 <HAL_GPIO_Init+0x15c>
 8000840:	4e1b      	ldr	r6, [pc, #108]	; (80008b0 <HAL_GPIO_Init+0x16c>)
 8000842:	42b0      	cmp	r0, r6
 8000844:	d02e      	beq.n	80008a4 <HAL_GPIO_Init+0x160>
 8000846:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800084a:	42b0      	cmp	r0, r6
 800084c:	d02c      	beq.n	80008a8 <HAL_GPIO_Init+0x164>
 800084e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000852:	42b0      	cmp	r0, r6
 8000854:	bf14      	ite	ne
 8000856:	2605      	movne	r6, #5
 8000858:	2603      	moveq	r6, #3
 800085a:	fa06 f60e 	lsl.w	r6, r6, lr
 800085e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000862:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000864:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000866:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000868:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800086c:	bf0c      	ite	eq
 800086e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000870:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000872:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000874:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000876:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800087a:	bf0c      	ite	eq
 800087c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800087e:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000880:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000882:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000884:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000888:	bf0c      	ite	eq
 800088a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800088c:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 800088e:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000890:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000892:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000894:	bf54      	ite	pl
 8000896:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000898:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 800089a:	60d6      	str	r6, [r2, #12]
    position++;
 800089c:	3301      	adds	r3, #1
 800089e:	e75c      	b.n	800075a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008a0:	2600      	movs	r6, #0
 80008a2:	e7da      	b.n	800085a <HAL_GPIO_Init+0x116>
 80008a4:	2601      	movs	r6, #1
 80008a6:	e7d8      	b.n	800085a <HAL_GPIO_Init+0x116>
 80008a8:	2602      	movs	r6, #2
 80008aa:	e7d6      	b.n	800085a <HAL_GPIO_Init+0x116>
 80008ac:	40010400 	.word	0x40010400
 80008b0:	48000400 	.word	0x48000400
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008b8:	b10a      	cbz	r2, 80008be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008ba:	6181      	str	r1, [r0, #24]
 80008bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008be:	6281      	str	r1, [r0, #40]	; 0x28
 80008c0:	4770      	bx	lr

080008c2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80008c2:	6943      	ldr	r3, [r0, #20]
 80008c4:	4059      	eors	r1, r3
 80008c6:	6141      	str	r1, [r0, #20]
 80008c8:	4770      	bx	lr
	...

080008cc <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{ 
 80008cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if((hopamp == NULL) || (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED) \
 80008d0:	4604      	mov	r4, r0
 80008d2:	2800      	cmp	r0, #0
 80008d4:	d066      	beq.n	80009a4 <HAL_OPAMP_Init+0xd8>
 80008d6:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80008da:	2b05      	cmp	r3, #5
 80008dc:	d062      	beq.n	80009a4 <HAL_OPAMP_Init+0xd8>
                      || (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY))
 80008de:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d05e      	beq.n	80009a4 <HAL_OPAMP_Init+0xd8>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }
 
    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <HAL_OPAMP_Init+0xe0>)
 80008e8:	699a      	ldr	r2, [r3, #24]
 80008ea:	f042 0201 	orr.w	r2, r2, #1
 80008ee:	619a      	str	r2, [r3, #24]
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	9b01      	ldr	r3, [sp, #4]
    
    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80008fa:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80008fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000902:	b90b      	cbnz	r3, 8000908 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8000904:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    }

    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8000908:	4620      	mov	r0, r4
 800090a:	f001 fdcb 	bl	80024a4 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */
    
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800090e:	6863      	ldr	r3, [r4, #4]
 8000910:	6821      	ldr	r1, [r4, #0]
 8000912:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8000916:	f8d4 9018 	ldr.w	r9, [r4, #24]
 800091a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800091c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800091e:	4d24      	ldr	r5, [pc, #144]	; (80009b0 <HAL_OPAMP_Init+0xe4>)
 8000920:	f023 0220 	bic.w	r2, r3, #32
 8000924:	2a40      	cmp	r2, #64	; 0x40
 8000926:	f104 081c 	add.w	r8, r4, #28
 800092a:	68e2      	ldr	r2, [r4, #12]
 800092c:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
 8000930:	d11e      	bne.n	8000970 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8000932:	4313      	orrs	r3, r2
 8000934:	ea43 030a 	orr.w	r3, r3, sl
 8000938:	ea43 0309 	orr.w	r3, r3, r9
 800093c:	ea43 0308 	orr.w	r3, r3, r8
 8000940:	ea43 030c 	orr.w	r3, r3, ip
 8000944:	6808      	ldr	r0, [r1, #0]
 8000946:	ea43 030e 	orr.w	r3, r3, lr
 800094a:	ea43 43c7 	orr.w	r3, r3, r7, lsl #19
 800094e:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8000952:	ea00 0605 	and.w	r6, r0, r5
 8000956:	431e      	orrs	r6, r3
 8000958:	600e      	str	r6, [r1, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    } 
    
    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800095a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800095e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000962:	bb0b      	cbnz	r3, 80009a8 <HAL_OPAMP_Init+0xdc>
    {
      /* From RESET state to READY State */
    hopamp->State = HAL_OPAMP_STATE_READY;
 8000964:	2301      	movs	r3, #1
 8000966:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
  
    return status;
    }
}
 800096a:	b003      	add	sp, #12
 800096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8000970:	68a0      	ldr	r0, [r4, #8]
 8000972:	f8d1 b000 	ldr.w	fp, [r1]
 8000976:	4303      	orrs	r3, r0
 8000978:	431a      	orrs	r2, r3
 800097a:	6963      	ldr	r3, [r4, #20]
 800097c:	ea42 020a 	orr.w	r2, r2, sl
 8000980:	431a      	orrs	r2, r3
 8000982:	ea42 0209 	orr.w	r2, r2, r9
 8000986:	ea42 0208 	orr.w	r2, r2, r8
 800098a:	ea42 030c 	orr.w	r3, r2, ip
 800098e:	ea43 030e 	orr.w	r3, r3, lr
 8000992:	ea43 43c7 	orr.w	r3, r3, r7, lsl #19
 8000996:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800099a:	ea0b 0005 	and.w	r0, fp, r5
 800099e:	4303      	orrs	r3, r0
 80009a0:	600b      	str	r3, [r1, #0]
 80009a2:	e7da      	b.n	800095a <HAL_OPAMP_Init+0x8e>
    return HAL_ERROR;
 80009a4:	2001      	movs	r0, #1
 80009a6:	e7e0      	b.n	800096a <HAL_OPAMP_Init+0x9e>
    return status;
 80009a8:	2000      	movs	r0, #0
 80009aa:	e7de      	b.n	800096a <HAL_OPAMP_Init+0x9e>
 80009ac:	40021000 	.word	0x40021000
 80009b0:	e0003811 	.word	0xe0003811

080009b4 <HAL_OPAMP_Start>:
{ 
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if((hopamp == NULL) || (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED))
 80009b4:	b188      	cbz	r0, 80009da <HAL_OPAMP_Start+0x26>
 80009b6:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80009ba:	2b05      	cmp	r3, #5
 80009bc:	d00d      	beq.n	80009da <HAL_OPAMP_Start+0x26>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));
    
    if(hopamp->State == HAL_OPAMP_STATE_READY)
 80009be:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d109      	bne.n	80009da <HAL_OPAMP_Start+0x26>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80009c6:	6802      	ldr	r2, [r0, #0]
 80009c8:	6813      	ldr	r3, [r2, #0]
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6013      	str	r3, [r2, #0]

      /* Update the OPAMP state*/     
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;   
 80009d0:	2304      	movs	r3, #4
 80009d2:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  HAL_StatusTypeDef status = HAL_OK;
 80009d6:	2000      	movs	r0, #0
 80009d8:	4770      	bx	lr
    status = HAL_ERROR;
 80009da:	2001      	movs	r0, #1
    }
    
    
   }
  return status;
}
 80009dc:	4770      	bx	lr

080009de <HAL_OPAMP_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 25 ms.
  */

HAL_StatusTypeDef HAL_OPAMP_SelfCalibrate(OPAMP_HandleTypeDef *hopamp)
{ 
 80009de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t trimmingvaluep = 0U;
  uint32_t delta;
  
  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if((hopamp == NULL) || (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED))
 80009e2:	4604      	mov	r4, r0
 80009e4:	2800      	cmp	r0, #0
 80009e6:	f000 809d 	beq.w	8000b24 <HAL_OPAMP_SelfCalibrate+0x146>
 80009ea:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80009ee:	2b05      	cmp	r3, #5
 80009f0:	f000 8098 	beq.w	8000b24 <HAL_OPAMP_SelfCalibrate+0x146>
  }
  else
  {
  
    /* Check if OPAMP in calibration mode and calibration not yet enable */
    if(hopamp->State ==  HAL_OPAMP_STATE_READY)
 80009f4:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	f040 8093 	bne.w	8000b24 <HAL_OPAMP_SelfCalibrate+0x146>
      /* Check the parameter */
      assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

      /* Set Calibration mode */
      /* Non-inverting input connected to calibration reference voltage. */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 80009fe:	6803      	ldr	r3, [r0, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	f042 0202 	orr.w	r2, r2, #2
 8000a06:	601a      	str	r2, [r3, #0]

      /*  user trimming values are used for offset calibration */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_USERTRIM);
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a0e:	601a      	str	r2, [r3, #0]
      
      /* Enable calibration */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a16:	601a      	str	r2, [r3, #0]
  
      /* 1st calibration - N */
      /* Select 90U% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000a1e:	601a      	str	r2, [r3, #0]
      
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	f042 0201 	orr.w	r2, r2, #1
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	2704      	movs	r7, #4
      
      /* Init trimming counter */    
      /* Medium value */
      trimmingvaluen = 16U; 
      delta = 8U;
 8000a2a:	2608      	movs	r6, #8
      trimmingvaluen = 16U; 
 8000a2c:	2510      	movs	r5, #16
      
      while (delta != 0U)
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen<<OPAMP_INPUT_INVERTING);
 8000a2e:	6822      	ldr	r2, [r4, #0]
 8000a30:	6813      	ldr	r3, [r2, #0]
 8000a32:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000a36:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8000a3a:	6013      	str	r3, [r2, #0]
              
        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */ 
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2U);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f7ff fc0b 	bl	8000258 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 8000a42:	6822      	ldr	r2, [r4, #0]
 8000a44:	6813      	ldr	r3, [r2, #0]
 8000a46:	005b      	lsls	r3, r3, #1
        { 
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluen += delta;
 8000a48:	bf4c      	ite	mi
 8000a4a:	19ad      	addmi	r5, r5, r6
        }
        else
        {
          /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
          trimmingvaluen -= delta;
 8000a4c:	1bad      	subpl	r5, r5, r6
      while (delta != 0U)
 8000a4e:	3f01      	subs	r7, #1
        }
                      
        delta >>= 1U;
 8000a50:	ea4f 0656 	mov.w	r6, r6, lsr #1
      while (delta != 0U)
 8000a54:	d1eb      	bne.n	8000a2e <HAL_OPAMP_SelfCalibrate+0x50>
      }

      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0  */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen<<OPAMP_INPUT_INVERTING);
 8000a56:	6813      	ldr	r3, [r2, #0]
 8000a58:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000a5c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8000a60:	6013      	str	r3, [r2, #0]
      
       /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */ 
       /* Offset trim time: during calibration, minimum time needed between */
       /* two steps to have 1 mV accuracy */
       HAL_Delay(2U);
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff fbf8 	bl	8000258 <HAL_Delay>
      
      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET) 
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	0050      	lsls	r0, r2, #1
 8000a6e:	d506      	bpl.n	8000a7e <HAL_OPAMP_SelfCalibrate+0xa0>
      { 
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluen++;
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen<<OPAMP_INPUT_INVERTING);
 8000a70:	681a      	ldr	r2, [r3, #0]
        trimmingvaluen++;
 8000a72:	3501      	adds	r5, #1
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen<<OPAMP_INPUT_INVERTING);
 8000a74:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8000a78:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8000a7c:	601a      	str	r2, [r3, #0]
      }
       
      /* 2nd calibration - P */
      /* Select 10U% VREF */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000a84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	f04f 0804 	mov.w	r8, #4
      
      /* Init trimming counter */    
      /* Medium value */
      trimmingvaluep = 16U; 
      delta = 8U;
 8000a8e:	2708      	movs	r7, #8
      trimmingvaluep = 16U; 
 8000a90:	2610      	movs	r6, #16
      
      while (delta != 0U)
      {
        /* Set candidate trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 8000a92:	6822      	ldr	r2, [r4, #0]
 8000a94:	6813      	ldr	r3, [r2, #0]
 8000a96:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8000a9a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8000a9e:	6013      	str	r3, [r2, #0]
               
        /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */ 
        /* Offset trim time: during calibration, minimum time needed between */
        /* two steps to have 1 mV accuracy */
        HAL_Delay(2U);
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f7ff fbd9 	bl	8000258 <HAL_Delay>

        if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET) 
 8000aa6:	6822      	ldr	r2, [r4, #0]
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	0059      	lsls	r1, r3, #1
        { 
          /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
          trimmingvaluep += delta;
 8000aac:	bf4c      	ite	mi
 8000aae:	19f6      	addmi	r6, r6, r7
        }
        else
        {
          trimmingvaluep -= delta;
 8000ab0:	1bf6      	subpl	r6, r6, r7
      while (delta != 0U)
 8000ab2:	f1b8 0801 	subs.w	r8, r8, #1
        }
                      
        delta >>= 1U;
 8000ab6:	ea4f 0757 	mov.w	r7, r7, lsr #1
      while (delta != 0U)
 8000aba:	d1ea      	bne.n	8000a92 <HAL_OPAMP_SelfCalibrate+0xb4>
      }
      
      /* Still need to check if righ calibration is current value or un step below */
      /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0U */
      /* Set candidate trimming */
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 8000abc:	6813      	ldr	r3, [r2, #0]
 8000abe:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8000ac2:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8000ac6:	6013      	str	r3, [r2, #0]

       /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */ 
       /* Offset trim time: during calibration, minimum time needed between */
       /* two steps to have 1 mV accuracy */
       HAL_Delay(2U);
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f7ff fbc5 	bl	8000258 <HAL_Delay>
      
      if ((hopamp->Instance->CSR & OPAMP_CSR_OUTCAL) != RESET)
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	0052      	lsls	r2, r2, #1
 8000ad4:	d506      	bpl.n	8000ae4 <HAL_OPAMP_SelfCalibrate+0x106>
      { 
        /* OPAMP_CSR_OUTCAL is actually one value more */
        trimmingvaluep++;
        /* Set right trimming */
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 8000ad6:	681a      	ldr	r2, [r3, #0]
        trimmingvaluep++;
 8000ad8:	3601      	adds	r6, #1
        MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 8000ada:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 8000ade:	ea42 42c6 	orr.w	r2, r2, r6, lsl #19
 8000ae2:	601a      	str	r2, [r3, #0]
      }
           
      /* Disable calibration */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000aea:	601a      	str	r2, [r3, #0]

      /* Disable the OPAMP */
      CLEAR_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	f022 0201 	bic.w	r2, r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
      
      /* Set operating mode  */
      /* Non-inverting input connected to calibration reference voltage. */
      CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_FORCEVP);
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	f022 0202 	bic.w	r2, r2, #2
 8000afa:	601a      	str	r2, [r3, #0]
      /* Write calibration result P */
      hopamp->Init.TrimmingValueP = trimmingvaluep;

      /* Select user timming mode */      
      /* And updated with calibrated settings */
      hopamp->Init.UserTrimming = OPAMP_TRIMMING_USER;
 8000afc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b00:	6262      	str	r2, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 8000b02:	681a      	ldr	r2, [r3, #0]
      hopamp->Init.TrimmingValueP = trimmingvaluep;
 8000b04:	62a6      	str	r6, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 8000b06:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 8000b0a:	ea42 46c6 	orr.w	r6, r2, r6, lsl #19
      hopamp->Init.TrimmingValueN = trimmingvaluen;
 8000b0e:	62e5      	str	r5, [r4, #44]	; 0x2c
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep<<OPAMP_INPUT_NONINVERTING);
 8000b10:	601e      	str	r6, [r3, #0]
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen<<OPAMP_INPUT_INVERTING);
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8000b18:	ea42 6505 	orr.w	r5, r2, r5, lsl #24
 8000b1c:	601d      	str	r5, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b1e:	2000      	movs	r0, #0
 8000b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
      /* OPAMP can not be calibrated from this mode */ 
      status = HAL_ERROR;
    }   
  }
  return status;
}
 8000b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b30:	4605      	mov	r5, r0
 8000b32:	b918      	cbnz	r0, 8000b3c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000b34:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000b36:	b002      	add	sp, #8
 8000b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3c:	6803      	ldr	r3, [r0, #0]
 8000b3e:	07da      	lsls	r2, r3, #31
 8000b40:	d411      	bmi.n	8000b66 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b42:	682b      	ldr	r3, [r5, #0]
 8000b44:	079b      	lsls	r3, r3, #30
 8000b46:	f100 8085 	bmi.w	8000c54 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b4a:	682b      	ldr	r3, [r5, #0]
 8000b4c:	071c      	lsls	r4, r3, #28
 8000b4e:	f100 80f6 	bmi.w	8000d3e <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b52:	682b      	ldr	r3, [r5, #0]
 8000b54:	0758      	lsls	r0, r3, #29
 8000b56:	f100 813f 	bmi.w	8000dd8 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b5a:	69ea      	ldr	r2, [r5, #28]
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	f040 81d6 	bne.w	8000f0e <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8000b62:	2000      	movs	r0, #0
 8000b64:	e7e7      	b.n	8000b36 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b66:	4cba      	ldr	r4, [pc, #744]	; (8000e50 <HAL_RCC_OscConfig+0x324>)
 8000b68:	6863      	ldr	r3, [r4, #4]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d007      	beq.n	8000b82 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b72:	6863      	ldr	r3, [r4, #4]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d116      	bne.n	8000baa <HAL_RCC_OscConfig+0x7e>
 8000b7c:	6863      	ldr	r3, [r4, #4]
 8000b7e:	03df      	lsls	r7, r3, #15
 8000b80:	d513      	bpl.n	8000baa <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b86:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b8a:	6821      	ldr	r1, [r4, #0]
 8000b8c:	fa93 f3a3 	rbit	r3, r3
 8000b90:	fab3 f383 	clz	r3, r3
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	2201      	movs	r2, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	420b      	tst	r3, r1
 8000ba0:	d0cf      	beq.n	8000b42 <HAL_RCC_OscConfig+0x16>
 8000ba2:	686b      	ldr	r3, [r5, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1cc      	bne.n	8000b42 <HAL_RCC_OscConfig+0x16>
 8000ba8:	e7c4      	b.n	8000b34 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000baa:	686a      	ldr	r2, [r5, #4]
 8000bac:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000bb0:	d125      	bne.n	8000bfe <HAL_RCC_OscConfig+0xd2>
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb8:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bbc:	68a9      	ldr	r1, [r5, #8]
 8000bbe:	f023 030f 	bic.w	r3, r3, #15
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc6:	b352      	cbz	r2, 8000c1e <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fb40 	bl	800024c <HAL_GetTick>
 8000bcc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000bd0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd2:	2701      	movs	r7, #1
 8000bd4:	fa96 f3a6 	rbit	r3, r6
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	fa96 f3a6 	rbit	r3, r6
 8000bde:	fab3 f383 	clz	r3, r3
 8000be2:	f003 031f 	and.w	r3, r3, #31
 8000be6:	fa07 f303 	lsl.w	r3, r7, r3
 8000bea:	4213      	tst	r3, r2
 8000bec:	d1a9      	bne.n	8000b42 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bee:	f7ff fb2d 	bl	800024c <HAL_GetTick>
 8000bf2:	eba0 0008 	sub.w	r0, r0, r8
 8000bf6:	2864      	cmp	r0, #100	; 0x64
 8000bf8:	d9ec      	bls.n	8000bd4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	e79b      	b.n	8000b36 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	b932      	cbnz	r2, 8000c10 <HAL_RCC_OscConfig+0xe4>
 8000c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c06:	6023      	str	r3, [r4, #0]
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c0e:	e7d3      	b.n	8000bb8 <HAL_RCC_OscConfig+0x8c>
 8000c10:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000c14:	d1f5      	bne.n	8000c02 <HAL_RCC_OscConfig+0xd6>
 8000c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1a:	6023      	str	r3, [r4, #0]
 8000c1c:	e7c9      	b.n	8000bb2 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000c1e:	f7ff fb15 	bl	800024c <HAL_GetTick>
 8000c22:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000c26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fa96 f3a6 	rbit	r3, r6
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	fa96 f3a6 	rbit	r3, r6
 8000c34:	fab3 f383 	clz	r3, r3
 8000c38:	f003 031f 	and.w	r3, r3, #31
 8000c3c:	fa07 f303 	lsl.w	r3, r7, r3
 8000c40:	4213      	tst	r3, r2
 8000c42:	f43f af7e 	beq.w	8000b42 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c46:	f7ff fb01 	bl	800024c <HAL_GetTick>
 8000c4a:	eba0 0008 	sub.w	r0, r0, r8
 8000c4e:	2864      	cmp	r0, #100	; 0x64
 8000c50:	d9eb      	bls.n	8000c2a <HAL_RCC_OscConfig+0xfe>
 8000c52:	e7d2      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c54:	4c7e      	ldr	r4, [pc, #504]	; (8000e50 <HAL_RCC_OscConfig+0x324>)
 8000c56:	6863      	ldr	r3, [r4, #4]
 8000c58:	f013 0f0c 	tst.w	r3, #12
 8000c5c:	d007      	beq.n	8000c6e <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c5e:	6863      	ldr	r3, [r4, #4]
 8000c60:	f003 030c 	and.w	r3, r3, #12
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d122      	bne.n	8000cae <HAL_RCC_OscConfig+0x182>
 8000c68:	6863      	ldr	r3, [r4, #4]
 8000c6a:	03de      	lsls	r6, r3, #15
 8000c6c:	d41f      	bmi.n	8000cae <HAL_RCC_OscConfig+0x182>
 8000c6e:	2302      	movs	r3, #2
 8000c70:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c74:	6821      	ldr	r1, [r4, #0]
 8000c76:	fa93 f3a3 	rbit	r3, r3
 8000c7a:	fab3 f383 	clz	r3, r3
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	2201      	movs	r2, #1
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	420b      	tst	r3, r1
 8000c8a:	d003      	beq.n	8000c94 <HAL_RCC_OscConfig+0x168>
 8000c8c:	692b      	ldr	r3, [r5, #16]
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	f47f af50 	bne.w	8000b34 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c94:	6821      	ldr	r1, [r4, #0]
 8000c96:	23f8      	movs	r3, #248	; 0xf8
 8000c98:	fa93 f3a3 	rbit	r3, r3
 8000c9c:	fab3 f283 	clz	r2, r3
 8000ca0:	696b      	ldr	r3, [r5, #20]
 8000ca2:	4093      	lsls	r3, r2
 8000ca4:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	6023      	str	r3, [r4, #0]
 8000cac:	e74d      	b.n	8000b4a <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cae:	692a      	ldr	r2, [r5, #16]
 8000cb0:	2601      	movs	r6, #1
 8000cb2:	b30a      	cbz	r2, 8000cf8 <HAL_RCC_OscConfig+0x1cc>
 8000cb4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000cb8:	fab3 f383 	clz	r3, r3
 8000cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	2702      	movs	r7, #2
 8000cc8:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000cca:	f7ff fabf 	bl	800024c <HAL_GetTick>
 8000cce:	4680      	mov	r8, r0
 8000cd0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd4:	6822      	ldr	r2, [r4, #0]
 8000cd6:	fa97 f3a7 	rbit	r3, r7
 8000cda:	fab3 f383 	clz	r3, r3
 8000cde:	f003 031f 	and.w	r3, r3, #31
 8000ce2:	fa06 f303 	lsl.w	r3, r6, r3
 8000ce6:	4213      	tst	r3, r2
 8000ce8:	d1d4      	bne.n	8000c94 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cea:	f7ff faaf 	bl	800024c <HAL_GetTick>
 8000cee:	eba0 0008 	sub.w	r0, r0, r8
 8000cf2:	2802      	cmp	r0, #2
 8000cf4:	d9ec      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x1a4>
 8000cf6:	e780      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
 8000cf8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000cfc:	fab3 f383 	clz	r3, r3
 8000d00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	2702      	movs	r7, #2
 8000d0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fa9d 	bl	800024c <HAL_GetTick>
 8000d12:	4680      	mov	r8, r0
 8000d14:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d18:	6822      	ldr	r2, [r4, #0]
 8000d1a:	fa97 f3a7 	rbit	r3, r7
 8000d1e:	fab3 f383 	clz	r3, r3
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	fa06 f303 	lsl.w	r3, r6, r3
 8000d2a:	4213      	tst	r3, r2
 8000d2c:	f43f af0d 	beq.w	8000b4a <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d30:	f7ff fa8c 	bl	800024c <HAL_GetTick>
 8000d34:	eba0 0008 	sub.w	r0, r0, r8
 8000d38:	2802      	cmp	r0, #2
 8000d3a:	d9eb      	bls.n	8000d14 <HAL_RCC_OscConfig+0x1e8>
 8000d3c:	e75d      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d3e:	69aa      	ldr	r2, [r5, #24]
 8000d40:	4e43      	ldr	r6, [pc, #268]	; (8000e50 <HAL_RCC_OscConfig+0x324>)
 8000d42:	4944      	ldr	r1, [pc, #272]	; (8000e54 <HAL_RCC_OscConfig+0x328>)
 8000d44:	2401      	movs	r4, #1
 8000d46:	b31a      	cbz	r2, 8000d90 <HAL_RCC_OscConfig+0x264>
 8000d48:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000d4c:	fab3 f383 	clz	r3, r3
 8000d50:	440b      	add	r3, r1
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	2702      	movs	r7, #2
 8000d56:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000d58:	f7ff fa78 	bl	800024c <HAL_GetTick>
 8000d5c:	4680      	mov	r8, r0
 8000d5e:	fa97 f3a7 	rbit	r3, r7
 8000d62:	fa97 f3a7 	rbit	r3, r7
 8000d66:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000d6c:	fa97 f3a7 	rbit	r3, r7
 8000d70:	fab3 f383 	clz	r3, r3
 8000d74:	f003 031f 	and.w	r3, r3, #31
 8000d78:	fa04 f303 	lsl.w	r3, r4, r3
 8000d7c:	4213      	tst	r3, r2
 8000d7e:	f47f aee8 	bne.w	8000b52 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d82:	f7ff fa63 	bl	800024c <HAL_GetTick>
 8000d86:	eba0 0008 	sub.w	r0, r0, r8
 8000d8a:	2802      	cmp	r0, #2
 8000d8c:	d9e7      	bls.n	8000d5e <HAL_RCC_OscConfig+0x232>
 8000d8e:	e734      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
 8000d90:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	440b      	add	r3, r1
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	2702      	movs	r7, #2
 8000d9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000da0:	f7ff fa54 	bl	800024c <HAL_GetTick>
 8000da4:	4680      	mov	r8, r0
 8000da6:	fa97 f3a7 	rbit	r3, r7
 8000daa:	fa97 f3a7 	rbit	r3, r7
 8000dae:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000db4:	fa97 f3a7 	rbit	r3, r7
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	f003 031f 	and.w	r3, r3, #31
 8000dc0:	fa04 f303 	lsl.w	r3, r4, r3
 8000dc4:	4213      	tst	r3, r2
 8000dc6:	f43f aec4 	beq.w	8000b52 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dca:	f7ff fa3f 	bl	800024c <HAL_GetTick>
 8000dce:	eba0 0008 	sub.w	r0, r0, r8
 8000dd2:	2802      	cmp	r0, #2
 8000dd4:	d9e7      	bls.n	8000da6 <HAL_RCC_OscConfig+0x27a>
 8000dd6:	e710      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dd8:	4c1d      	ldr	r4, [pc, #116]	; (8000e50 <HAL_RCC_OscConfig+0x324>)
 8000dda:	69e3      	ldr	r3, [r4, #28]
 8000ddc:	00d9      	lsls	r1, r3, #3
 8000dde:	d434      	bmi.n	8000e4a <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de0:	69e3      	ldr	r3, [r4, #28]
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de6:	61e3      	str	r3, [r4, #28]
 8000de8:	69e3      	ldr	r3, [r4, #28]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000df2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df4:	4f18      	ldr	r7, [pc, #96]	; (8000e58 <HAL_RCC_OscConfig+0x32c>)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	05da      	lsls	r2, r3, #23
 8000dfa:	d52f      	bpl.n	8000e5c <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfc:	68eb      	ldr	r3, [r5, #12]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d13d      	bne.n	8000e7e <HAL_RCC_OscConfig+0x352>
 8000e02:	6a23      	ldr	r3, [r4, #32]
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fa1f 	bl	800024c <HAL_GetTick>
 8000e0e:	2702      	movs	r7, #2
 8000e10:	4682      	mov	sl, r0
 8000e12:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e14:	f04f 0801 	mov.w	r8, #1
 8000e18:	fa97 f3a7 	rbit	r3, r7
 8000e1c:	fa97 f3a7 	rbit	r3, r7
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d06c      	beq.n	8000efe <HAL_RCC_OscConfig+0x3d2>
 8000e24:	6a22      	ldr	r2, [r4, #32]
 8000e26:	fa99 f3a9 	rbit	r3, r9
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	fa08 f303 	lsl.w	r3, r8, r3
 8000e36:	4213      	tst	r3, r2
 8000e38:	d058      	beq.n	8000eec <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f43f ae8d 	beq.w	8000b5a <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e40:	69e3      	ldr	r3, [r4, #28]
 8000e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e46:	61e3      	str	r3, [r4, #28]
 8000e48:	e687      	b.n	8000b5a <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	e7d2      	b.n	8000df4 <HAL_RCC_OscConfig+0x2c8>
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000
 8000e54:	10908120 	.word	0x10908120
 8000e58:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e64:	f7ff f9f2 	bl	800024c <HAL_GetTick>
 8000e68:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	d4c5      	bmi.n	8000dfc <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e70:	f7ff f9ec 	bl	800024c <HAL_GetTick>
 8000e74:	eba0 0008 	sub.w	r0, r0, r8
 8000e78:	2864      	cmp	r0, #100	; 0x64
 8000e7a:	d9f6      	bls.n	8000e6a <HAL_RCC_OscConfig+0x33e>
 8000e7c:	e6bd      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7e:	bb3b      	cbnz	r3, 8000ed0 <HAL_RCC_OscConfig+0x3a4>
 8000e80:	6a23      	ldr	r3, [r4, #32]
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	6223      	str	r3, [r4, #32]
 8000e88:	6a23      	ldr	r3, [r4, #32]
 8000e8a:	f023 0304 	bic.w	r3, r3, #4
 8000e8e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e90:	f7ff f9dc 	bl	800024c <HAL_GetTick>
 8000e94:	2702      	movs	r7, #2
 8000e96:	4682      	mov	sl, r0
 8000e98:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e9a:	f04f 0801 	mov.w	r8, #1
 8000e9e:	fa97 f3a7 	rbit	r3, r7
 8000ea2:	fa97 f3a7 	rbit	r3, r7
 8000ea6:	b373      	cbz	r3, 8000f06 <HAL_RCC_OscConfig+0x3da>
 8000ea8:	6a22      	ldr	r2, [r4, #32]
 8000eaa:	fa99 f3a9 	rbit	r3, r9
 8000eae:	fab3 f383 	clz	r3, r3
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	fa08 f303 	lsl.w	r3, r8, r3
 8000eba:	4213      	tst	r3, r2
 8000ebc:	d0bd      	beq.n	8000e3a <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ebe:	f7ff f9c5 	bl	800024c <HAL_GetTick>
 8000ec2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ec6:	eba0 000a 	sub.w	r0, r0, sl
 8000eca:	4298      	cmp	r0, r3
 8000ecc:	d9e7      	bls.n	8000e9e <HAL_RCC_OscConfig+0x372>
 8000ece:	e694      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed0:	2b05      	cmp	r3, #5
 8000ed2:	6a23      	ldr	r3, [r4, #32]
 8000ed4:	d103      	bne.n	8000ede <HAL_RCC_OscConfig+0x3b2>
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6223      	str	r3, [r4, #32]
 8000edc:	e791      	b.n	8000e02 <HAL_RCC_OscConfig+0x2d6>
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	6223      	str	r3, [r4, #32]
 8000ee4:	6a23      	ldr	r3, [r4, #32]
 8000ee6:	f023 0304 	bic.w	r3, r3, #4
 8000eea:	e78d      	b.n	8000e08 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eec:	f7ff f9ae 	bl	800024c <HAL_GetTick>
 8000ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ef4:	eba0 000a 	sub.w	r0, r0, sl
 8000ef8:	4298      	cmp	r0, r3
 8000efa:	d98d      	bls.n	8000e18 <HAL_RCC_OscConfig+0x2ec>
 8000efc:	e67d      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
 8000efe:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f04:	e78f      	b.n	8000e26 <HAL_RCC_OscConfig+0x2fa>
 8000f06:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f0c:	e7cd      	b.n	8000eaa <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f0e:	4c41      	ldr	r4, [pc, #260]	; (8001014 <HAL_RCC_OscConfig+0x4e8>)
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	f43f ae0c 	beq.w	8000b34 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f1c:	2a02      	cmp	r2, #2
 8000f1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f22:	d152      	bne.n	8000fca <HAL_RCC_OscConfig+0x49e>
 8000f24:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f3a:	f7ff f987 	bl	800024c <HAL_GetTick>
 8000f3e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000f42:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f44:	2601      	movs	r6, #1
 8000f46:	fa97 f3a7 	rbit	r3, r7
 8000f4a:	6822      	ldr	r2, [r4, #0]
 8000f4c:	fa97 f3a7 	rbit	r3, r7
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	fa06 f303 	lsl.w	r3, r6, r3
 8000f5c:	4213      	tst	r3, r2
 8000f5e:	d12d      	bne.n	8000fbc <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f60:	6862      	ldr	r2, [r4, #4]
 8000f62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f64:	6a29      	ldr	r1, [r5, #32]
 8000f66:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	6063      	str	r3, [r4, #4]
 8000f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f74:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000f8a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000f8c:	f7ff f95e 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f90:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000f92:	4607      	mov	r7, r0
 8000f94:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f98:	6822      	ldr	r2, [r4, #0]
 8000f9a:	fa95 f3a5 	rbit	r3, r5
 8000f9e:	fab3 f383 	clz	r3, r3
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	fa06 f303 	lsl.w	r3, r6, r3
 8000faa:	4213      	tst	r3, r2
 8000fac:	f47f add9 	bne.w	8000b62 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb0:	f7ff f94c 	bl	800024c <HAL_GetTick>
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9ec      	bls.n	8000f94 <HAL_RCC_OscConfig+0x468>
 8000fba:	e61e      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fbc:	f7ff f946 	bl	800024c <HAL_GetTick>
 8000fc0:	eba0 0008 	sub.w	r0, r0, r8
 8000fc4:	2802      	cmp	r0, #2
 8000fc6:	d9be      	bls.n	8000f46 <HAL_RCC_OscConfig+0x41a>
 8000fc8:	e617      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
 8000fca:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000fce:	fab3 f383 	clz	r3, r3
 8000fd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fe0:	f7ff f934 	bl	800024c <HAL_GetTick>
 8000fe4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000fe8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fea:	2601      	movs	r6, #1
 8000fec:	fa95 f3a5 	rbit	r3, r5
 8000ff0:	6822      	ldr	r2, [r4, #0]
 8000ff2:	fa95 f3a5 	rbit	r3, r5
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	fa06 f303 	lsl.w	r3, r6, r3
 8001002:	4213      	tst	r3, r2
 8001004:	f43f adad 	beq.w	8000b62 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001008:	f7ff f920 	bl	800024c <HAL_GetTick>
 800100c:	1bc0      	subs	r0, r0, r7
 800100e:	2802      	cmp	r0, #2
 8001010:	d9ec      	bls.n	8000fec <HAL_RCC_OscConfig+0x4c0>
 8001012:	e5f2      	b.n	8000bfa <HAL_RCC_OscConfig+0xce>
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001018:	b570      	push	{r4, r5, r6, lr}
 800101a:	b086      	sub	sp, #24
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	9302      	str	r3, [sp, #8]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	9304      	str	r3, [sp, #16]
  gpio.Pull      = GPIO_NOPULL;
  gpio.Pin       = MCO1_PIN;
  gpio.Alternate = GPIO_AF0_MCO;

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001024:	4c0f      	ldr	r4, [pc, #60]	; (8001064 <HAL_RCC_MCOConfig+0x4c>)
{
 8001026:	4616      	mov	r6, r2
  gpio.Pull      = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
  gpio.Pin       = MCO1_PIN;
 800102a:	f44f 7280 	mov.w	r2, #256	; 0x100
  gpio.Pull      = GPIO_NOPULL;
 800102e:	9303      	str	r3, [sp, #12]
  gpio.Pin       = MCO1_PIN;
 8001030:	9201      	str	r2, [sp, #4]
  gpio.Alternate = GPIO_AF0_MCO;
 8001032:	9305      	str	r3, [sp, #20]
  MCO1_CLK_ENABLE();
 8001034:	6963      	ldr	r3, [r4, #20]
 8001036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103a:	6163      	str	r3, [r4, #20]
 800103c:	6963      	ldr	r3, [r4, #20]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
{
 8001042:	460d      	mov	r5, r1
  MCO1_CLK_ENABLE();
 8001044:	9300      	str	r3, [sp, #0]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001046:	a901      	add	r1, sp, #4
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  MCO1_CLK_ENABLE();
 800104c:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800104e:	f7ff fb79 	bl	8000744 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001052:	6861      	ldr	r1, [r4, #4]
 8001054:	f021 41ee 	bic.w	r1, r1, #1996488704	; 0x77000000
 8001058:	4331      	orrs	r1, r6
 800105a:	4329      	orrs	r1, r5
 800105c:	6061      	str	r1, [r4, #4]
}
 800105e:	b006      	add	sp, #24
 8001060:	bd70      	pop	{r4, r5, r6, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001068:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800106a:	4c13      	ldr	r4, [pc, #76]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x50>)
 800106c:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800106e:	f001 030c 	and.w	r3, r1, #12
 8001072:	2b08      	cmp	r3, #8
 8001074:	d11e      	bne.n	80010b4 <HAL_RCC_GetSysClockFreq+0x4c>
 8001076:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800107a:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800107e:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001082:	fab3 f383 	clz	r3, r3
 8001086:	fa22 f303 	lsr.w	r3, r2, r3
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_RCC_GetSysClockFreq+0x54>)
 800108c:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800108e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001090:	220f      	movs	r2, #15
 8001092:	fa92 f2a2 	rbit	r2, r2
 8001096:	fab2 f282 	clz	r2, r2
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	40d3      	lsrs	r3, r2
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x58>)
 80010a2:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80010a4:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80010a6:	bf4a      	itet	mi
 80010a8:	4b06      	ldrmi	r3, [pc, #24]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80010aa:	4b07      	ldrpl	r3, [pc, #28]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80010ac:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80010b0:	4358      	muls	r0, r3
 80010b2:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	08002720 	.word	0x08002720
 80010c0:	08002730 	.word	0x08002730
 80010c4:	007a1200 	.word	0x007a1200
 80010c8:	003d0900 	.word	0x003d0900

080010cc <HAL_RCC_ClockConfig>:
{
 80010cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010d0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80010d2:	4604      	mov	r4, r0
 80010d4:	b910      	cbnz	r0, 80010dc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_RCC_ClockConfig+0x144>)
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	428b      	cmp	r3, r1
 80010e6:	d32e      	bcc.n	8001146 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e8:	6822      	ldr	r2, [r4, #0]
 80010ea:	0791      	lsls	r1, r2, #30
 80010ec:	d436      	bmi.n	800115c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ee:	07d2      	lsls	r2, r2, #31
 80010f0:	d43c      	bmi.n	800116c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010f2:	4a47      	ldr	r2, [pc, #284]	; (8001210 <HAL_RCC_ClockConfig+0x144>)
 80010f4:	6813      	ldr	r3, [r2, #0]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	429d      	cmp	r5, r3
 80010fc:	d375      	bcc.n	80011ea <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fe:	6822      	ldr	r2, [r4, #0]
 8001100:	4d44      	ldr	r5, [pc, #272]	; (8001214 <HAL_RCC_ClockConfig+0x148>)
 8001102:	f012 0f04 	tst.w	r2, #4
 8001106:	d17c      	bne.n	8001202 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001108:	0713      	lsls	r3, r2, #28
 800110a:	d506      	bpl.n	800111a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800110c:	686b      	ldr	r3, [r5, #4]
 800110e:	6922      	ldr	r2, [r4, #16]
 8001110:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001114:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001118:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800111a:	f7ff ffa5 	bl	8001068 <HAL_RCC_GetSysClockFreq>
 800111e:	686b      	ldr	r3, [r5, #4]
 8001120:	22f0      	movs	r2, #240	; 0xf0
 8001122:	fa92 f2a2 	rbit	r2, r2
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800112e:	40d3      	lsrs	r3, r2
 8001130:	4a39      	ldr	r2, [pc, #228]	; (8001218 <HAL_RCC_ClockConfig+0x14c>)
 8001132:	5cd3      	ldrb	r3, [r2, r3]
 8001134:	40d8      	lsrs	r0, r3
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <HAL_RCC_ClockConfig+0x150>)
 8001138:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff f844 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8001140:	2000      	movs	r0, #0
 8001142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001146:	6813      	ldr	r3, [r2, #0]
 8001148:	f023 0307 	bic.w	r3, r3, #7
 800114c:	430b      	orrs	r3, r1
 800114e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001150:	6813      	ldr	r3, [r2, #0]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	4299      	cmp	r1, r3
 8001158:	d1bd      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xa>
 800115a:	e7c5      	b.n	80010e8 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800115c:	492d      	ldr	r1, [pc, #180]	; (8001214 <HAL_RCC_ClockConfig+0x148>)
 800115e:	68a0      	ldr	r0, [r4, #8]
 8001160:	684b      	ldr	r3, [r1, #4]
 8001162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001166:	4303      	orrs	r3, r0
 8001168:	604b      	str	r3, [r1, #4]
 800116a:	e7c0      	b.n	80010ee <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116c:	6862      	ldr	r2, [r4, #4]
 800116e:	4e29      	ldr	r6, [pc, #164]	; (8001214 <HAL_RCC_ClockConfig+0x148>)
 8001170:	2a01      	cmp	r2, #1
 8001172:	d127      	bne.n	80011c4 <HAL_RCC_ClockConfig+0xf8>
 8001174:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001178:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117c:	6831      	ldr	r1, [r6, #0]
 800117e:	fa93 f3a3 	rbit	r3, r3
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	d0a1      	beq.n	80010d6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001192:	6873      	ldr	r3, [r6, #4]
 8001194:	f023 0303 	bic.w	r3, r3, #3
 8001198:	431a      	orrs	r2, r3
 800119a:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 800119c:	f7ff f856 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80011a4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	6873      	ldr	r3, [r6, #4]
 80011a8:	6862      	ldr	r2, [r4, #4]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011b2:	d09e      	beq.n	80010f2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b4:	f7ff f84a 	bl	800024c <HAL_GetTick>
 80011b8:	1bc0      	subs	r0, r0, r7
 80011ba:	4540      	cmp	r0, r8
 80011bc:	d9f3      	bls.n	80011a6 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 80011be:	2003      	movs	r0, #3
}
 80011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011c4:	2a02      	cmp	r2, #2
 80011c6:	bf0c      	ite	eq
 80011c8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80011cc:	2302      	movne	r3, #2
 80011ce:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d2:	6830      	ldr	r0, [r6, #0]
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	2101      	movs	r1, #1
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	4203      	tst	r3, r0
 80011e8:	e7d2      	b.n	8001190 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	f023 0307 	bic.w	r3, r3, #7
 80011f0:	432b      	orrs	r3, r5
 80011f2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f4:	6813      	ldr	r3, [r2, #0]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	429d      	cmp	r5, r3
 80011fc:	f47f af6b 	bne.w	80010d6 <HAL_RCC_ClockConfig+0xa>
 8001200:	e77d      	b.n	80010fe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001202:	686b      	ldr	r3, [r5, #4]
 8001204:	68e1      	ldr	r1, [r4, #12]
 8001206:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800120a:	430b      	orrs	r3, r1
 800120c:	606b      	str	r3, [r5, #4]
 800120e:	e77b      	b.n	8001108 <HAL_RCC_ClockConfig+0x3c>
 8001210:	40022000 	.word	0x40022000
 8001214:	40021000 	.word	0x40021000
 8001218:	0800275f 	.word	0x0800275f
 800121c:	20000008 	.word	0x20000008

08001220 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001220:	4b01      	ldr	r3, [pc, #4]	; (8001228 <HAL_RCC_GetHCLKFreq+0x8>)
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008

0800122c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_RCC_GetPCLK1Freq+0x24>)
 800122e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	fa92 f2a2 	rbit	r2, r2
 8001238:	fab2 f282 	clz	r2, r2
 800123c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001240:	40d3      	lsrs	r3, r2
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001248:	6810      	ldr	r0, [r2, #0]
}    
 800124a:	40d8      	lsrs	r0, r3
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	0800276f 	.word	0x0800276f
 8001258:	20000008 	.word	0x20000008

0800125c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_RCC_GetPCLK2Freq+0x24>)
 800125e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	fa92 f2a2 	rbit	r2, r2
 8001268:	fab2 f282 	clz	r2, r2
 800126c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001270:	40d3      	lsrs	r3, r2
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001278:	6810      	ldr	r0, [r2, #0]
} 
 800127a:	40d8      	lsrs	r0, r3
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	0800276f 	.word	0x0800276f
 8001288:	20000008 	.word	0x20000008

0800128c <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800128c:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800128e:	2302      	movs	r3, #2
 8001290:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800129c:	2301      	movs	r3, #1
 800129e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 80012a2:	2000      	movs	r0, #0
 80012a4:	4770      	bx	lr

080012a6 <HAL_TIM_OC_MspInit>:
 80012a6:	4770      	bx	lr

080012a8 <HAL_TIM_PeriodElapsedCallback>:
 80012a8:	4770      	bx	lr

080012aa <HAL_TIM_OC_DelayElapsedCallback>:
 80012aa:	4770      	bx	lr

080012ac <HAL_TIM_IC_CaptureCallback>:
 80012ac:	4770      	bx	lr

080012ae <HAL_TIM_PWM_PulseFinishedCallback>:
 80012ae:	4770      	bx	lr

080012b0 <HAL_TIM_TriggerCallback>:
 80012b0:	4770      	bx	lr

080012b2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012b2:	6803      	ldr	r3, [r0, #0]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	0791      	lsls	r1, r2, #30
{
 80012b8:	b510      	push	{r4, lr}
 80012ba:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012bc:	d50f      	bpl.n	80012de <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	0792      	lsls	r2, r2, #30
 80012c2:	d50c      	bpl.n	80012de <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80012c4:	f06f 0202 	mvn.w	r2, #2
 80012c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012ca:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012cc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012ce:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012d0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012d2:	f000 8085 	beq.w	80013e0 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80012d6:	f7ff ffe9 	bl	80012ac <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012da:	2300      	movs	r3, #0
 80012dc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	0752      	lsls	r2, r2, #29
 80012e4:	d510      	bpl.n	8001308 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	0750      	lsls	r0, r2, #29
 80012ea:	d50d      	bpl.n	8001308 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80012ec:	f06f 0204 	mvn.w	r2, #4
 80012f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012f2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012f4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012f6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012fa:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80012fc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012fe:	d075      	beq.n	80013ec <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001300:	f7ff ffd4 	bl	80012ac <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001304:	2300      	movs	r3, #0
 8001306:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	0711      	lsls	r1, r2, #28
 800130e:	d50f      	bpl.n	8001330 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	0712      	lsls	r2, r2, #28
 8001314:	d50c      	bpl.n	8001330 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001316:	f06f 0208 	mvn.w	r2, #8
 800131a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800131c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800131e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001320:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001322:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001324:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001326:	d067      	beq.n	80013f8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001328:	f7ff ffc0 	bl	80012ac <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800132c:	2300      	movs	r3, #0
 800132e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	06d0      	lsls	r0, r2, #27
 8001336:	d510      	bpl.n	800135a <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	06d1      	lsls	r1, r2, #27
 800133c:	d50d      	bpl.n	800135a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800133e:	f06f 0210 	mvn.w	r2, #16
 8001342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001344:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001346:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001348:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800134c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800134e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001350:	d058      	beq.n	8001404 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001352:	f7ff ffab 	bl	80012ac <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001356:	2300      	movs	r3, #0
 8001358:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	07d2      	lsls	r2, r2, #31
 8001360:	d508      	bpl.n	8001374 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	07d0      	lsls	r0, r2, #31
 8001366:	d505      	bpl.n	8001374 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001368:	f06f 0201 	mvn.w	r2, #1
 800136c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff ff9a 	bl	80012a8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001374:	6823      	ldr	r3, [r4, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	0611      	lsls	r1, r2, #24
 800137a:	d508      	bpl.n	800138e <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	0612      	lsls	r2, r2, #24
 8001380:	d505      	bpl.n	800138e <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001382:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001386:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001388:	4620      	mov	r0, r4
 800138a:	f000 fb96 	bl	8001aba <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	05d0      	lsls	r0, r2, #23
 8001394:	d508      	bpl.n	80013a8 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	0611      	lsls	r1, r2, #24
 800139a:	d505      	bpl.n	80013a8 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800139c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80013a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80013a2:	4620      	mov	r0, r4
 80013a4:	f000 fb8a 	bl	8001abc <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	0652      	lsls	r2, r2, #25
 80013ae:	d508      	bpl.n	80013c2 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	0650      	lsls	r0, r2, #25
 80013b4:	d505      	bpl.n	80013c2 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80013b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80013ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff ff77 	bl	80012b0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	0691      	lsls	r1, r2, #26
 80013c8:	d522      	bpl.n	8001410 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	0692      	lsls	r2, r2, #26
 80013ce:	d51f      	bpl.n	8001410 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80013d0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80013d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80013d6:	611a      	str	r2, [r3, #16]
    }
  }
}
 80013d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80013dc:	f000 bb6c 	b.w	8001ab8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013e0:	f7ff ff63 	bl	80012aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7ff ff62 	bl	80012ae <HAL_TIM_PWM_PulseFinishedCallback>
 80013ea:	e776      	b.n	80012da <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ec:	f7ff ff5d 	bl	80012aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff ff5c 	bl	80012ae <HAL_TIM_PWM_PulseFinishedCallback>
 80013f6:	e785      	b.n	8001304 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013f8:	f7ff ff57 	bl	80012aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff ff56 	bl	80012ae <HAL_TIM_PWM_PulseFinishedCallback>
 8001402:	e793      	b.n	800132c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001404:	f7ff ff51 	bl	80012aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001408:	4620      	mov	r0, r4
 800140a:	f7ff ff50 	bl	80012ae <HAL_TIM_PWM_PulseFinishedCallback>
 800140e:	e7a2      	b.n	8001356 <HAL_TIM_IRQHandler+0xa4>
 8001410:	bd10      	pop	{r4, pc}
	...

08001414 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8001416:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001418:	4290      	cmp	r0, r2
{
 800141a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800141c:	d005      	beq.n	800142a <TIM_Base_SetConfig+0x16>
 800141e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001422:	d002      	beq.n	800142a <TIM_Base_SetConfig+0x16>
 8001424:	4c1e      	ldr	r4, [pc, #120]	; (80014a0 <TIM_Base_SetConfig+0x8c>)
 8001426:	42a0      	cmp	r0, r4
 8001428:	d10c      	bne.n	8001444 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800142a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800142c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001430:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001432:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001436:	d010      	beq.n	800145a <TIM_Base_SetConfig+0x46>
 8001438:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800143c:	d00d      	beq.n	800145a <TIM_Base_SetConfig+0x46>
 800143e:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <TIM_Base_SetConfig+0x8c>)
 8001440:	4290      	cmp	r0, r2
 8001442:	d00a      	beq.n	800145a <TIM_Base_SetConfig+0x46>
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <TIM_Base_SetConfig+0x90>)
 8001446:	4290      	cmp	r0, r2
 8001448:	d007      	beq.n	800145a <TIM_Base_SetConfig+0x46>
 800144a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144e:	4290      	cmp	r0, r2
 8001450:	d003      	beq.n	800145a <TIM_Base_SetConfig+0x46>
 8001452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001456:	4290      	cmp	r0, r2
 8001458:	d103      	bne.n	8001462 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800145a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800145c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001460:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001462:	694a      	ldr	r2, [r1, #20]
 8001464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001468:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800146a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800146c:	688b      	ldr	r3, [r1, #8]
 800146e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001470:	680b      	ldr	r3, [r1, #0]
 8001472:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <TIM_Base_SetConfig+0x88>)
 8001476:	4298      	cmp	r0, r3
 8001478:	d00b      	beq.n	8001492 <TIM_Base_SetConfig+0x7e>
 800147a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800147e:	4298      	cmp	r0, r3
 8001480:	d007      	beq.n	8001492 <TIM_Base_SetConfig+0x7e>
 8001482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001486:	4298      	cmp	r0, r3
 8001488:	d003      	beq.n	8001492 <TIM_Base_SetConfig+0x7e>
 800148a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800148e:	4298      	cmp	r0, r3
 8001490:	d101      	bne.n	8001496 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001492:	690b      	ldr	r3, [r1, #16]
 8001494:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001496:	2301      	movs	r3, #1
 8001498:	6143      	str	r3, [r0, #20]
 800149a:	bd10      	pop	{r4, pc}
 800149c:	40012c00 	.word	0x40012c00
 80014a0:	40000400 	.word	0x40000400
 80014a4:	40014000 	.word	0x40014000

080014a8 <HAL_TIM_Base_Init>:
{ 
 80014a8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80014aa:	4604      	mov	r4, r0
 80014ac:	b1a0      	cbz	r0, 80014d8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014b6:	b91b      	cbnz	r3, 80014c0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80014bc:	f001 f808 	bl	80024d0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80014c0:	2302      	movs	r3, #2
 80014c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80014c6:	6820      	ldr	r0, [r4, #0]
 80014c8:	1d21      	adds	r1, r4, #4
 80014ca:	f7ff ffa3 	bl	8001414 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80014ce:	2301      	movs	r3, #1
 80014d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80014d4:	2000      	movs	r0, #0
 80014d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014d8:	2001      	movs	r0, #1
}
 80014da:	bd10      	pop	{r4, pc}

080014dc <HAL_TIM_OC_Init>:
{
 80014dc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80014de:	4604      	mov	r4, r0
 80014e0:	b1a0      	cbz	r0, 800150c <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014ea:	b91b      	cbnz	r3, 80014f4 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80014f0:	f7ff fed9 	bl	80012a6 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 80014fa:	6820      	ldr	r0, [r4, #0]
 80014fc:	1d21      	adds	r1, r4, #4
 80014fe:	f7ff ff89 	bl	8001414 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001502:	2301      	movs	r3, #1
 8001504:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001508:	2000      	movs	r0, #0
 800150a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800150c:	2001      	movs	r0, #1
}
 800150e:	bd10      	pop	{r4, pc}

08001510 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001510:	6a03      	ldr	r3, [r0, #32]
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001518:	6a03      	ldr	r3, [r0, #32]
{
 800151a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800151c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800151e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001520:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001522:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001526:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800152a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800152c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800152e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001532:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001534:	4d17      	ldr	r5, [pc, #92]	; (8001594 <TIM_OC1_SetConfig+0x84>)
 8001536:	42a8      	cmp	r0, r5
 8001538:	d00b      	beq.n	8001552 <TIM_OC1_SetConfig+0x42>
 800153a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800153e:	42a8      	cmp	r0, r5
 8001540:	d007      	beq.n	8001552 <TIM_OC1_SetConfig+0x42>
 8001542:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001546:	42a8      	cmp	r0, r5
 8001548:	d003      	beq.n	8001552 <TIM_OC1_SetConfig+0x42>
 800154a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800154e:	42a8      	cmp	r0, r5
 8001550:	d11a      	bne.n	8001588 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001552:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001554:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001558:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800155a:	4d0e      	ldr	r5, [pc, #56]	; (8001594 <TIM_OC1_SetConfig+0x84>)
 800155c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800155e:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001562:	d00b      	beq.n	800157c <TIM_OC1_SetConfig+0x6c>
 8001564:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001568:	42a8      	cmp	r0, r5
 800156a:	d007      	beq.n	800157c <TIM_OC1_SetConfig+0x6c>
 800156c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001570:	42a8      	cmp	r0, r5
 8001572:	d003      	beq.n	800157c <TIM_OC1_SetConfig+0x6c>
 8001574:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001578:	42a8      	cmp	r0, r5
 800157a:	d105      	bne.n	8001588 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800157c:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001580:	698e      	ldr	r6, [r1, #24]
 8001582:	694c      	ldr	r4, [r1, #20]
 8001584:	4334      	orrs	r4, r6
 8001586:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001588:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800158a:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800158c:	684a      	ldr	r2, [r1, #4]
 800158e:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001590:	6203      	str	r3, [r0, #32]
 8001592:	bd70      	pop	{r4, r5, r6, pc}
 8001594:	40012c00 	.word	0x40012c00

08001598 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001598:	6a03      	ldr	r3, [r0, #32]
 800159a:	f023 0310 	bic.w	r3, r3, #16
 800159e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015a0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80015a2:	6842      	ldr	r2, [r0, #4]
{
 80015a4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80015a6:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80015aa:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80015ae:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015b2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80015b6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80015b8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80015bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80015c0:	4d10      	ldr	r5, [pc, #64]	; (8001604 <TIM_OC2_SetConfig+0x6c>)
 80015c2:	42a8      	cmp	r0, r5
 80015c4:	d10e      	bne.n	80015e4 <TIM_OC2_SetConfig+0x4c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80015c6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80015c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80015cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80015d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80015d4:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015d6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80015d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015dc:	4335      	orrs	r5, r6
 80015de:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80015e2:	e009      	b.n	80015f8 <TIM_OC2_SetConfig+0x60>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80015e4:	4d08      	ldr	r5, [pc, #32]	; (8001608 <TIM_OC2_SetConfig+0x70>)
 80015e6:	42a8      	cmp	r0, r5
 80015e8:	d0f4      	beq.n	80015d4 <TIM_OC2_SetConfig+0x3c>
 80015ea:	4d08      	ldr	r5, [pc, #32]	; (800160c <TIM_OC2_SetConfig+0x74>)
 80015ec:	42a8      	cmp	r0, r5
 80015ee:	d0f1      	beq.n	80015d4 <TIM_OC2_SetConfig+0x3c>
 80015f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015f4:	42a8      	cmp	r0, r5
 80015f6:	d0ed      	beq.n	80015d4 <TIM_OC2_SetConfig+0x3c>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015f8:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80015fa:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80015fc:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80015fe:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001600:	6203      	str	r3, [r0, #32]
}
 8001602:	bd70      	pop	{r4, r5, r6, pc}
 8001604:	40012c00 	.word	0x40012c00
 8001608:	40014000 	.word	0x40014000
 800160c:	40014400 	.word	0x40014400

08001610 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001610:	6a03      	ldr	r3, [r0, #32]
 8001612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001616:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001618:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800161a:	6842      	ldr	r2, [r0, #4]
{
 800161c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800161e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001620:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001622:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001626:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800162a:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800162c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800162e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001632:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001636:	4d11      	ldr	r5, [pc, #68]	; (800167c <TIM_OC3_SetConfig+0x6c>)
 8001638:	42a8      	cmp	r0, r5
 800163a:	d10e      	bne.n	800165a <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800163c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800163e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001642:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800164a:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800164c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800164e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001652:	4335      	orrs	r5, r6
 8001654:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001658:	e009      	b.n	800166e <TIM_OC3_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800165a:	4d09      	ldr	r5, [pc, #36]	; (8001680 <TIM_OC3_SetConfig+0x70>)
 800165c:	42a8      	cmp	r0, r5
 800165e:	d0f4      	beq.n	800164a <TIM_OC3_SetConfig+0x3a>
 8001660:	4d08      	ldr	r5, [pc, #32]	; (8001684 <TIM_OC3_SetConfig+0x74>)
 8001662:	42a8      	cmp	r0, r5
 8001664:	d0f1      	beq.n	800164a <TIM_OC3_SetConfig+0x3a>
 8001666:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800166a:	42a8      	cmp	r0, r5
 800166c:	d0ed      	beq.n	800164a <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800166e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001670:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001672:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001674:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001676:	6203      	str	r3, [r0, #32]
}
 8001678:	bd70      	pop	{r4, r5, r6, pc}
 800167a:	bf00      	nop
 800167c:	40012c00 	.word	0x40012c00
 8001680:	40014000 	.word	0x40014000
 8001684:	40014400 	.word	0x40014400

08001688 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001688:	6a03      	ldr	r3, [r0, #32]
 800168a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800168e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001690:	6a02      	ldr	r2, [r0, #32]
{
 8001692:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001694:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001696:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001698:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800169a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016a6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80016a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016ac:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80016b0:	4d0c      	ldr	r5, [pc, #48]	; (80016e4 <TIM_OC4_SetConfig+0x5c>)
 80016b2:	42a8      	cmp	r0, r5
 80016b4:	d00b      	beq.n	80016ce <TIM_OC4_SetConfig+0x46>
 80016b6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80016ba:	42a8      	cmp	r0, r5
 80016bc:	d007      	beq.n	80016ce <TIM_OC4_SetConfig+0x46>
 80016be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016c2:	42a8      	cmp	r0, r5
 80016c4:	d003      	beq.n	80016ce <TIM_OC4_SetConfig+0x46>
 80016c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016ca:	42a8      	cmp	r0, r5
 80016cc:	d104      	bne.n	80016d8 <TIM_OC4_SetConfig+0x50>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80016ce:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80016d0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80016d4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016d8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80016da:	61c3      	str	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80016dc:	684b      	ldr	r3, [r1, #4]
 80016de:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80016e0:	6202      	str	r2, [r0, #32]
 80016e2:	bd30      	pop	{r4, r5, pc}
 80016e4:	40012c00 	.word	0x40012c00

080016e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80016e8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80016ea:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016ec:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016ee:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016f2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80016f6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016f8:	6083      	str	r3, [r0, #8]
 80016fa:	bd10      	pop	{r4, pc}

080016fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80016fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001700:	2b01      	cmp	r3, #1
{
 8001702:	b570      	push	{r4, r5, r6, lr}
 8001704:	4604      	mov	r4, r0
 8001706:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800170a:	d01a      	beq.n	8001742 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 800170c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001710:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001712:	2301      	movs	r3, #1
 8001714:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001718:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800171a:	4b52      	ldr	r3, [pc, #328]	; (8001864 <HAL_TIM_ConfigClockSource+0x168>)
 800171c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800171e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001720:	680b      	ldr	r3, [r1, #0]
 8001722:	2b40      	cmp	r3, #64	; 0x40
 8001724:	d075      	beq.n	8001812 <HAL_TIM_ConfigClockSource+0x116>
 8001726:	d818      	bhi.n	800175a <HAL_TIM_ConfigClockSource+0x5e>
 8001728:	2b10      	cmp	r3, #16
 800172a:	f000 808f 	beq.w	800184c <HAL_TIM_ConfigClockSource+0x150>
 800172e:	d809      	bhi.n	8001744 <HAL_TIM_ConfigClockSource+0x48>
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 8085 	beq.w	8001840 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001736:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001738:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800173a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800173e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001742:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001744:	2b20      	cmp	r3, #32
 8001746:	f000 8087 	beq.w	8001858 <HAL_TIM_ConfigClockSource+0x15c>
 800174a:	2b30      	cmp	r3, #48	; 0x30
 800174c:	d1f3      	bne.n	8001736 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 800174e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001754:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001758:	e033      	b.n	80017c2 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800175a:	2b70      	cmp	r3, #112	; 0x70
 800175c:	d033      	beq.n	80017c6 <HAL_TIM_ConfigClockSource+0xca>
 800175e:	d81b      	bhi.n	8001798 <HAL_TIM_ConfigClockSource+0x9c>
 8001760:	2b50      	cmp	r3, #80	; 0x50
 8001762:	d03f      	beq.n	80017e4 <HAL_TIM_ConfigClockSource+0xe8>
 8001764:	2b60      	cmp	r3, #96	; 0x60
 8001766:	d1e6      	bne.n	8001736 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001768:	684d      	ldr	r5, [r1, #4]
 800176a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800176c:	6a01      	ldr	r1, [r0, #32]
 800176e:	f021 0110 	bic.w	r1, r1, #16
 8001772:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001774:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001776:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001778:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800177c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001780:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001784:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001788:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800178a:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 800178c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800178e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001792:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001796:	e014      	b.n	80017c2 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800179c:	d00c      	beq.n	80017b8 <HAL_TIM_ConfigClockSource+0xbc>
 800179e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a2:	d1c8      	bne.n	8001736 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80017a4:	68cb      	ldr	r3, [r1, #12]
 80017a6:	684a      	ldr	r2, [r1, #4]
 80017a8:	6889      	ldr	r1, [r1, #8]
 80017aa:	f7ff ff9d 	bl	80016e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017ae:	6822      	ldr	r2, [r4, #0]
 80017b0:	6893      	ldr	r3, [r2, #8]
 80017b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b6:	e013      	b.n	80017e0 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80017b8:	6883      	ldr	r3, [r0, #8]
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017be:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80017c2:	6083      	str	r3, [r0, #8]
 80017c4:	e7b7      	b.n	8001736 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80017c6:	68cb      	ldr	r3, [r1, #12]
 80017c8:	684a      	ldr	r2, [r1, #4]
 80017ca:	6889      	ldr	r1, [r1, #8]
 80017cc:	f7ff ff8c 	bl	80016e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80017d0:	6822      	ldr	r2, [r4, #0]
 80017d2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80017d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017e0:	6093      	str	r3, [r2, #8]
    break;
 80017e2:	e7a8      	b.n	8001736 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80017e4:	684a      	ldr	r2, [r1, #4]
 80017e6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80017e8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017ea:	6a05      	ldr	r5, [r0, #32]
 80017ec:	f025 0501 	bic.w	r5, r5, #1
 80017f0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80017f2:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017f4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017fc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001800:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001802:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001804:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001806:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800180c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001810:	e7d7      	b.n	80017c2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001812:	684a      	ldr	r2, [r1, #4]
 8001814:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001816:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001818:	6a05      	ldr	r5, [r0, #32]
 800181a:	f025 0501 	bic.w	r5, r5, #1
 800181e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001820:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001822:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800182a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800182e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001830:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001832:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001834:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800183a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800183e:	e7c0      	b.n	80017c2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001840:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001846:	f043 0307 	orr.w	r3, r3, #7
 800184a:	e7ba      	b.n	80017c2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 800184c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800184e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001852:	f043 0317 	orr.w	r3, r3, #23
 8001856:	e7b4      	b.n	80017c2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001858:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800185a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800185e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001862:	e7ae      	b.n	80017c2 <HAL_TIM_ConfigClockSource+0xc6>
 8001864:	fffe0088 	.word	0xfffe0088

08001868 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001868:	6a03      	ldr	r3, [r0, #32]
{
 800186a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 800186c:	2401      	movs	r4, #1
 800186e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001870:	ea23 0304 	bic.w	r3, r3, r4
 8001874:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001876:	6a03      	ldr	r3, [r0, #32]
 8001878:	408a      	lsls	r2, r1
 800187a:	431a      	orrs	r2, r3
 800187c:	6202      	str	r2, [r0, #32]
 800187e:	bd10      	pop	{r4, pc}

08001880 <HAL_TIM_PWM_Start>:
{
 8001880:	b510      	push	{r4, lr}
 8001882:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001884:	2201      	movs	r2, #1
 8001886:	6800      	ldr	r0, [r0, #0]
 8001888:	f7ff ffee 	bl	8001868 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	4a0c      	ldr	r2, [pc, #48]	; (80018c0 <HAL_TIM_PWM_Start+0x40>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00b      	beq.n	80018ac <HAL_TIM_PWM_Start+0x2c>
 8001894:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001898:	4293      	cmp	r3, r2
 800189a:	d007      	beq.n	80018ac <HAL_TIM_PWM_Start+0x2c>
 800189c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d003      	beq.n	80018ac <HAL_TIM_PWM_Start+0x2c>
 80018a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d103      	bne.n	80018b4 <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 80018ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018b2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
} 
 80018bc:	2000      	movs	r0, #0
 80018be:	bd10      	pop	{r4, pc}
 80018c0:	40012c00 	.word	0x40012c00

080018c4 <HAL_TIM_OC_Start>:
 80018c4:	f7ff bfdc 	b.w	8001880 <HAL_TIM_PWM_Start>

080018c8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80018c8:	6a03      	ldr	r3, [r0, #32]
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ce:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018d0:	6a02      	ldr	r2, [r0, #32]
{
 80018d2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80018d4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80018d6:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80018e2:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80018e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80018e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80018ea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018ee:	4d0d      	ldr	r5, [pc, #52]	; (8001924 <TIM_OC5_SetConfig+0x5c>)
 80018f0:	42a8      	cmp	r0, r5
 80018f2:	d00b      	beq.n	800190c <TIM_OC5_SetConfig+0x44>
 80018f4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80018f8:	42a8      	cmp	r0, r5
 80018fa:	d007      	beq.n	800190c <TIM_OC5_SetConfig+0x44>
 80018fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001900:	42a8      	cmp	r0, r5
 8001902:	d003      	beq.n	800190c <TIM_OC5_SetConfig+0x44>
 8001904:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001908:	42a8      	cmp	r0, r5
 800190a:	d104      	bne.n	8001916 <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800190c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800190e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001912:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001916:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001918:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800191a:	684b      	ldr	r3, [r1, #4]
 800191c:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800191e:	6202      	str	r2, [r0, #32]
 8001920:	bd30      	pop	{r4, r5, pc}
 8001922:	bf00      	nop
 8001924:	40012c00 	.word	0x40012c00

08001928 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001928:	6a03      	ldr	r3, [r0, #32]
 800192a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800192e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001930:	6a02      	ldr	r2, [r0, #32]
{
 8001932:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001934:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001936:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001938:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001942:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001946:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001948:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800194c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001950:	4d0c      	ldr	r5, [pc, #48]	; (8001984 <TIM_OC6_SetConfig+0x5c>)
 8001952:	42a8      	cmp	r0, r5
 8001954:	d00b      	beq.n	800196e <TIM_OC6_SetConfig+0x46>
 8001956:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800195a:	42a8      	cmp	r0, r5
 800195c:	d007      	beq.n	800196e <TIM_OC6_SetConfig+0x46>
 800195e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001962:	42a8      	cmp	r0, r5
 8001964:	d003      	beq.n	800196e <TIM_OC6_SetConfig+0x46>
 8001966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800196a:	42a8      	cmp	r0, r5
 800196c:	d104      	bne.n	8001978 <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800196e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001970:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001974:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001978:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800197a:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800197c:	684b      	ldr	r3, [r1, #4]
 800197e:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001980:	6202      	str	r2, [r0, #32]
 8001982:	bd30      	pop	{r4, r5, pc}
 8001984:	40012c00 	.word	0x40012c00

08001988 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim); 
 8001988:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800198c:	2b01      	cmp	r3, #1
{  
 800198e:	b510      	push	{r4, lr}
 8001990:	4604      	mov	r4, r0
 8001992:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 8001996:	d010      	beq.n	80019ba <HAL_TIM_OC_ConfigChannel+0x32>
 8001998:	2301      	movs	r3, #1
  switch (Channel)
 800199a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim); 
 800199c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80019a0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80019a4:	d01c      	beq.n	80019e0 <HAL_TIM_OC_ConfigChannel+0x58>
 80019a6:	d809      	bhi.n	80019bc <HAL_TIM_OC_ConfigChannel+0x34>
 80019a8:	b192      	cbz	r2, 80019d0 <HAL_TIM_OC_ConfigChannel+0x48>
 80019aa:	2a04      	cmp	r2, #4
 80019ac:	d014      	beq.n	80019d8 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80019ae:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 80019b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80019b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 80019b6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80019ba:	bd10      	pop	{r4, pc}
  switch (Channel)
 80019bc:	2a10      	cmp	r2, #16
 80019be:	d013      	beq.n	80019e8 <HAL_TIM_OC_ConfigChannel+0x60>
 80019c0:	2a14      	cmp	r2, #20
 80019c2:	d015      	beq.n	80019f0 <HAL_TIM_OC_ConfigChannel+0x68>
 80019c4:	2a0c      	cmp	r2, #12
 80019c6:	d1f2      	bne.n	80019ae <HAL_TIM_OC_ConfigChannel+0x26>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019c8:	6820      	ldr	r0, [r4, #0]
 80019ca:	f7ff fe5d 	bl	8001688 <TIM_OC4_SetConfig>
    break;
 80019ce:	e7ee      	b.n	80019ae <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019d0:	6820      	ldr	r0, [r4, #0]
 80019d2:	f7ff fd9d 	bl	8001510 <TIM_OC1_SetConfig>
    break;
 80019d6:	e7ea      	b.n	80019ae <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019d8:	6820      	ldr	r0, [r4, #0]
 80019da:	f7ff fddd 	bl	8001598 <TIM_OC2_SetConfig>
    break;
 80019de:	e7e6      	b.n	80019ae <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	f7ff fe15 	bl	8001610 <TIM_OC3_SetConfig>
    break;
 80019e6:	e7e2      	b.n	80019ae <HAL_TIM_OC_ConfigChannel+0x26>
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 80019e8:	6820      	ldr	r0, [r4, #0]
 80019ea:	f7ff ff6d 	bl	80018c8 <TIM_OC5_SetConfig>
    break;
 80019ee:	e7de      	b.n	80019ae <HAL_TIM_OC_ConfigChannel+0x26>
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 80019f0:	6820      	ldr	r0, [r4, #0]
 80019f2:	f7ff ff99 	bl	8001928 <TIM_OC6_SetConfig>
    break;
 80019f6:	e7da      	b.n	80019ae <HAL_TIM_OC_ConfigChannel+0x26>

080019f8 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80019f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019fc:	2b01      	cmp	r3, #1
{
 80019fe:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001a00:	d018      	beq.n	8001a34 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 8001a02:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001a04:	4d0c      	ldr	r5, [pc, #48]	; (8001a38 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8001a06:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001a08:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001a0a:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001a0c:	bf02      	ittt	eq
 8001a0e:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001a10:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001a14:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a16:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a18:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a1e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001a20:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8001a24:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a26:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8001a28:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001a2a:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001a2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001a34:	2002      	movs	r0, #2
} 
 8001a36:	bd30      	pop	{r4, r5, pc}
 8001a38:	40012c00 	.word	0x40012c00

08001a3c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8001a3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a40:	2b01      	cmp	r3, #1
{
 8001a42:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001a44:	d034      	beq.n	8001ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001a46:	68cb      	ldr	r3, [r1, #12]
 8001a48:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001a4a:	4c1a      	ldr	r4, [pc, #104]	; (8001ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a50:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001a52:	684a      	ldr	r2, [r1, #4]
 8001a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a58:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001a5a:	680a      	ldr	r2, [r1, #0]
 8001a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001a62:	690a      	ldr	r2, [r1, #16]
 8001a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001a6a:	694a      	ldr	r2, [r1, #20]
 8001a6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001a72:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001a74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8001a7a:	698a      	ldr	r2, [r1, #24]
 8001a7c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001a84:	6802      	ldr	r2, [r0, #0]
 8001a86:	42a2      	cmp	r2, r4
 8001a88:	d10c      	bne.n	8001aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8001a8a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001a8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001a90:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001a94:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001a96:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a9c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001a9e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8001ab0:	2002      	movs	r0, #2
}
 8001ab2:	bd10      	pop	{r4, pc}
 8001ab4:	40012c00 	.word	0x40012c00

08001ab8 <HAL_TIMEx_CommutationCallback>:
 8001ab8:	4770      	bx	lr

08001aba <HAL_TIMEx_BreakCallback>:
 8001aba:	4770      	bx	lr

08001abc <HAL_TIMEx_Break2Callback>:
{
 8001abc:	4770      	bx	lr

08001abe <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001abe:	6803      	ldr	r3, [r0, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ac6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_UART_TxCpltCallback>:
 8001ad8:	4770      	bx	lr

08001ada <HAL_UART_RxCpltCallback>:
 8001ada:	4770      	bx	lr

08001adc <HAL_UART_ErrorCallback>:
 8001adc:	4770      	bx	lr

08001ade <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ade:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001ae0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001ae8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8001aec:	f7ff fff6 	bl	8001adc <HAL_UART_ErrorCallback>
 8001af0:	bd08      	pop	{r3, pc}
	...

08001af4 <UART_SetConfig>:
{
 8001af4:	b538      	push	{r3, r4, r5, lr}
 8001af6:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001af8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001afa:	6921      	ldr	r1, [r4, #16]
 8001afc:	68a3      	ldr	r3, [r4, #8]
 8001afe:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b00:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b02:	430b      	orrs	r3, r1
 8001b04:	6961      	ldr	r1, [r4, #20]
 8001b06:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b08:	4949      	ldr	r1, [pc, #292]	; (8001c30 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b0a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b0c:	4001      	ands	r1, r0
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b12:	686b      	ldr	r3, [r5, #4]
 8001b14:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b16:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b20:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b22:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b24:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b28:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <UART_SetConfig+0x140>)
 8001b30:	429d      	cmp	r5, r3
 8001b32:	d112      	bne.n	8001b5a <UART_SetConfig+0x66>
 8001b34:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001b38:	493f      	ldr	r1, [pc, #252]	; (8001c38 <UART_SetConfig+0x144>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b44:	5ccb      	ldrb	r3, [r1, r3]
 8001b46:	d13b      	bne.n	8001bc0 <UART_SetConfig+0xcc>
    switch (clocksource)
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d836      	bhi.n	8001bba <UART_SetConfig+0xc6>
 8001b4c:	e8df f003 	tbb	[pc, r3]
 8001b50:	3524210f 	.word	0x3524210f
 8001b54:	3535352d 	.word	0x3535352d
 8001b58:	30          	.byte	0x30
 8001b59:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <UART_SetConfig+0x148>)
 8001b5c:	429d      	cmp	r5, r3
 8001b5e:	d003      	beq.n	8001b68 <UART_SetConfig+0x74>
 8001b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b64:	429d      	cmp	r5, r3
 8001b66:	d15e      	bne.n	8001c26 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b68:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b6c:	d131      	bne.n	8001bd2 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b6e:	f7ff fb5d 	bl	800122c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b72:	6861      	ldr	r1, [r4, #4]
 8001b74:	084a      	lsrs	r2, r1, #1
 8001b76:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b7e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b80:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001b82:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001b86:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b88:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
 8001b90:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001b92:	f7ff fb63 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 8001b96:	e7ec      	b.n	8001b72 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001b98:	6860      	ldr	r0, [r4, #4]
 8001b9a:	0843      	lsrs	r3, r0, #1
 8001b9c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001ba0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ba4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ba8:	e7e9      	b.n	8001b7e <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001baa:	f7ff fa5d 	bl	8001068 <HAL_RCC_GetSysClockFreq>
 8001bae:	e7e0      	b.n	8001b72 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001bb0:	6860      	ldr	r0, [r4, #4]
 8001bb2:	0843      	lsrs	r3, r0, #1
 8001bb4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001bb8:	e7f4      	b.n	8001ba4 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8001bba:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e7e0      	b.n	8001b82 <UART_SetConfig+0x8e>
    switch (clocksource)
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d833      	bhi.n	8001c2c <UART_SetConfig+0x138>
 8001bc4:	e8df f003 	tbb	[pc, r3]
 8001bc8:	321b1005 	.word	0x321b1005
 8001bcc:	32323227 	.word	0x32323227
 8001bd0:	2a          	.byte	0x2a
 8001bd1:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bd2:	f7ff fb2b 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8001bd6:	6863      	ldr	r3, [r4, #4]
 8001bd8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001bdc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001be0:	b280      	uxth	r0, r0
 8001be2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001be4:	2000      	movs	r0, #0
        break;
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001be8:	f7ff fb38 	bl	800125c <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bec:	6863      	ldr	r3, [r4, #4]
 8001bee:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001bf2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <UART_SetConfig+0x140>)
 8001bf8:	b280      	uxth	r0, r0
 8001bfa:	60d8      	str	r0, [r3, #12]
 8001bfc:	e7f2      	b.n	8001be4 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001bfe:	6862      	ldr	r2, [r4, #4]
 8001c00:	0853      	lsrs	r3, r2, #1
 8001c02:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001c06:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <UART_SetConfig+0x140>)
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	60d3      	str	r3, [r2, #12]
 8001c14:	e7e6      	b.n	8001be4 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c16:	f7ff fa27 	bl	8001068 <HAL_RCC_GetSysClockFreq>
 8001c1a:	e7e7      	b.n	8001bec <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c1c:	6862      	ldr	r2, [r4, #4]
 8001c1e:	0853      	lsrs	r3, r2, #1
 8001c20:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c24:	e7f1      	b.n	8001c0a <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c26:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c2a:	d0c6      	beq.n	8001bba <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8001c2c:	2001      	movs	r0, #1
  return ret;
 8001c2e:	bd38      	pop	{r3, r4, r5, pc}
 8001c30:	efff69f3 	.word	0xefff69f3
 8001c34:	40013800 	.word	0x40013800
 8001c38:	08002740 	.word	0x08002740
 8001c3c:	40004400 	.word	0x40004400

08001c40 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c42:	07da      	lsls	r2, r3, #31
{
 8001c44:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c46:	d506      	bpl.n	8001c56 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c48:	6801      	ldr	r1, [r0, #0]
 8001c4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c4c:	684a      	ldr	r2, [r1, #4]
 8001c4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c52:	4322      	orrs	r2, r4
 8001c54:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c56:	079c      	lsls	r4, r3, #30
 8001c58:	d506      	bpl.n	8001c68 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c5a:	6801      	ldr	r1, [r0, #0]
 8001c5c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001c5e:	684a      	ldr	r2, [r1, #4]
 8001c60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c64:	4322      	orrs	r2, r4
 8001c66:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c68:	0759      	lsls	r1, r3, #29
 8001c6a:	d506      	bpl.n	8001c7a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c6c:	6801      	ldr	r1, [r0, #0]
 8001c6e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001c70:	684a      	ldr	r2, [r1, #4]
 8001c72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c76:	4322      	orrs	r2, r4
 8001c78:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c7a:	071a      	lsls	r2, r3, #28
 8001c7c:	d506      	bpl.n	8001c8c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c7e:	6801      	ldr	r1, [r0, #0]
 8001c80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c82:	684a      	ldr	r2, [r1, #4]
 8001c84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c88:	4322      	orrs	r2, r4
 8001c8a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c8c:	06dc      	lsls	r4, r3, #27
 8001c8e:	d506      	bpl.n	8001c9e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c90:	6801      	ldr	r1, [r0, #0]
 8001c92:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001c94:	688a      	ldr	r2, [r1, #8]
 8001c96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c9a:	4322      	orrs	r2, r4
 8001c9c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c9e:	0699      	lsls	r1, r3, #26
 8001ca0:	d506      	bpl.n	8001cb0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ca2:	6801      	ldr	r1, [r0, #0]
 8001ca4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001ca6:	688a      	ldr	r2, [r1, #8]
 8001ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cac:	4322      	orrs	r2, r4
 8001cae:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cb0:	065a      	lsls	r2, r3, #25
 8001cb2:	d50f      	bpl.n	8001cd4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cb4:	6801      	ldr	r1, [r0, #0]
 8001cb6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001cb8:	684a      	ldr	r2, [r1, #4]
 8001cba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001cbe:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cc0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cc4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cc6:	d105      	bne.n	8001cd4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001cc8:	684a      	ldr	r2, [r1, #4]
 8001cca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ccc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001cd0:	4322      	orrs	r2, r4
 8001cd2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	d506      	bpl.n	8001ce6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001cd8:	6802      	ldr	r2, [r0, #0]
 8001cda:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001cdc:	6853      	ldr	r3, [r2, #4]
 8001cde:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	6053      	str	r3, [r2, #4]
 8001ce6:	bd10      	pop	{r4, pc}

08001ce8 <UART_WaitOnFlagUntilTimeout>:
{
 8001ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cec:	9d06      	ldr	r5, [sp, #24]
 8001cee:	4604      	mov	r4, r0
 8001cf0:	460f      	mov	r7, r1
 8001cf2:	4616      	mov	r6, r2
 8001cf4:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cf6:	6821      	ldr	r1, [r4, #0]
 8001cf8:	69ca      	ldr	r2, [r1, #28]
 8001cfa:	ea37 0302 	bics.w	r3, r7, r2
 8001cfe:	bf0c      	ite	eq
 8001d00:	2201      	moveq	r2, #1
 8001d02:	2200      	movne	r2, #0
 8001d04:	42b2      	cmp	r2, r6
 8001d06:	d002      	beq.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001d08:	2000      	movs	r0, #0
}
 8001d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001d0e:	1c6b      	adds	r3, r5, #1
 8001d10:	d0f2      	beq.n	8001cf8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d12:	b99d      	cbnz	r5, 8001d3c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001d26:	2320      	movs	r3, #32
 8001d28:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001d2c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001d30:	2300      	movs	r3, #0
 8001d32:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001d36:	2003      	movs	r0, #3
 8001d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d3c:	f7fe fa86 	bl	800024c <HAL_GetTick>
 8001d40:	eba0 0008 	sub.w	r0, r0, r8
 8001d44:	4285      	cmp	r5, r0
 8001d46:	d2d6      	bcs.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0xe>
 8001d48:	e7e4      	b.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x2c>

08001d4a <UART_CheckIdleState>:
{
 8001d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d4c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4e:	2600      	movs	r6, #0
 8001d50:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001d52:	f7fe fa7b 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001d5c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d5e:	d417      	bmi.n	8001d90 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	075b      	lsls	r3, r3, #29
 8001d66:	d50a      	bpl.n	8001d7e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	462b      	mov	r3, r5
 8001d72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7ff ffb6 	bl	8001ce8 <UART_WaitOnFlagUntilTimeout>
 8001d7c:	b9a0      	cbnz	r0, 8001da8 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001d7e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001d80:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001d82:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001d86:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001d8a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001d8e:	e00c      	b.n	8001daa <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4632      	mov	r2, r6
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7ff ffa2 	bl	8001ce8 <UART_WaitOnFlagUntilTimeout>
 8001da4:	2800      	cmp	r0, #0
 8001da6:	d0db      	beq.n	8001d60 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001da8:	2003      	movs	r0, #3
}
 8001daa:	b002      	add	sp, #8
 8001dac:	bd70      	pop	{r4, r5, r6, pc}

08001dae <HAL_UART_Init>:
{
 8001dae:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001db0:	4604      	mov	r4, r0
 8001db2:	b360      	cbz	r0, 8001e0e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001db4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001db8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dbc:	b91b      	cbnz	r3, 8001dc6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001dbe:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001dc2:	f000 fbb1 	bl	8002528 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001dc6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001dc8:	2324      	movs	r3, #36	; 0x24
 8001dca:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001dce:	6813      	ldr	r3, [r2, #0]
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff fe8c 	bl	8001af4 <UART_SetConfig>
 8001ddc:	2801      	cmp	r0, #1
 8001dde:	d016      	beq.n	8001e0e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001de2:	b113      	cbz	r3, 8001dea <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff ff2b 	bl	8001c40 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dfa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001e02:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001e04:	601a      	str	r2, [r3, #0]
}
 8001e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001e0a:	f7ff bf9e 	b.w	8001d4a <UART_CheckIdleState>
}
 8001e0e:	2001      	movs	r0, #1
 8001e10:	bd10      	pop	{r4, pc}

08001e12 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e12:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001e16:	2b21      	cmp	r3, #33	; 0x21
 8001e18:	d127      	bne.n	8001e6a <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8001e1a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001e1e:	6802      	ldr	r2, [r0, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	b94b      	cbnz	r3, 8001e38 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001e24:	6811      	ldr	r1, [r2, #0]
 8001e26:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001e2a:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e2c:	6811      	ldr	r1, [r2, #0]
 8001e2e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001e32:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8001e34:	2000      	movs	r0, #0
 8001e36:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e38:	6883      	ldr	r3, [r0, #8]
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001e40:	d10e      	bne.n	8001e60 <UART_Transmit_IT+0x4e>
 8001e42:	6901      	ldr	r1, [r0, #16]
 8001e44:	b961      	cbnz	r1, 8001e60 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e46:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001e4a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001e4e:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001e50:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001e52:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8001e5e:	e7e9      	b.n	8001e34 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001e60:	1c59      	adds	r1, r3, #1
 8001e62:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	8513      	strh	r3, [r2, #40]	; 0x28
 8001e68:	e7f3      	b.n	8001e52 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8001e6a:	2002      	movs	r0, #2
  }
}
 8001e6c:	4770      	bx	lr

08001e6e <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e6e:	6801      	ldr	r1, [r0, #0]
{
 8001e70:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e72:	680b      	ldr	r3, [r1, #0]
 8001e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e78:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8001e80:	f7ff fe2a 	bl	8001ad8 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001e84:	2000      	movs	r0, #0
 8001e86:	bd08      	pop	{r3, pc}

08001e88 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e88:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001e8c:	2b22      	cmp	r3, #34	; 0x22
{
 8001e8e:	b510      	push	{r4, lr}
 8001e90:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e92:	d129      	bne.n	8001ee8 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001e94:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e96:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 8001e98:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea0:	ea02 0201 	and.w	r2, r2, r1
 8001ea4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001ea6:	d11b      	bne.n	8001ee0 <UART_Receive_IT+0x58>
 8001ea8:	6901      	ldr	r1, [r0, #16]
 8001eaa:	b9c9      	cbnz	r1, 8001ee0 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8001eac:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8001eb0:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8001eb2:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8001eb6:	3c01      	subs	r4, #1
 8001eb8:	b2a4      	uxth	r4, r4
 8001eba:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8001ebe:	b96c      	cbnz	r4, 8001edc <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ec0:	6803      	ldr	r3, [r0, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8001ed8:	f7ff fdff 	bl	8001ada <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 8001edc:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8001ede:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001ee0:	1c59      	adds	r1, r3, #1
 8001ee2:	6541      	str	r1, [r0, #84]	; 0x54
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	e7e4      	b.n	8001eb2 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	bd10      	pop	{r4, pc}

08001ef4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001ef4:	6802      	ldr	r2, [r0, #0]
 8001ef6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ef8:	6811      	ldr	r1, [r2, #0]
{
 8001efa:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001efc:	f013 050f 	ands.w	r5, r3, #15
{
 8001f00:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001f02:	d107      	bne.n	8001f14 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f04:	069e      	lsls	r6, r3, #26
 8001f06:	d505      	bpl.n	8001f14 <HAL_UART_IRQHandler+0x20>
 8001f08:	068e      	lsls	r6, r1, #26
 8001f0a:	d503      	bpl.n	8001f14 <HAL_UART_IRQHandler+0x20>
}
 8001f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001f10:	f7ff bfba 	b.w	8001e88 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8001f14:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8001f16:	2d00      	cmp	r5, #0
 8001f18:	d05c      	beq.n	8001fd4 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001f1a:	f010 0501 	ands.w	r5, r0, #1
 8001f1e:	d102      	bne.n	8001f26 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001f20:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001f24:	d056      	beq.n	8001fd4 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f26:	07d8      	lsls	r0, r3, #31
 8001f28:	d507      	bpl.n	8001f3a <HAL_UART_IRQHandler+0x46>
 8001f2a:	05ce      	lsls	r6, r1, #23
 8001f2c:	d505      	bpl.n	8001f3a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001f2e:	2001      	movs	r0, #1
 8001f30:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f32:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001f34:	f040 0001 	orr.w	r0, r0, #1
 8001f38:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f3a:	0798      	lsls	r0, r3, #30
 8001f3c:	d506      	bpl.n	8001f4c <HAL_UART_IRQHandler+0x58>
 8001f3e:	b12d      	cbz	r5, 8001f4c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001f40:	2002      	movs	r0, #2
 8001f42:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f44:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001f46:	f040 0004 	orr.w	r0, r0, #4
 8001f4a:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f4c:	075e      	lsls	r6, r3, #29
 8001f4e:	d506      	bpl.n	8001f5e <HAL_UART_IRQHandler+0x6a>
 8001f50:	b12d      	cbz	r5, 8001f5e <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001f52:	2004      	movs	r0, #4
 8001f54:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f56:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001f58:	f040 0002 	orr.w	r0, r0, #2
 8001f5c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001f5e:	0718      	lsls	r0, r3, #28
 8001f60:	d507      	bpl.n	8001f72 <HAL_UART_IRQHandler+0x7e>
 8001f62:	068e      	lsls	r6, r1, #26
 8001f64:	d400      	bmi.n	8001f68 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f66:	b125      	cbz	r5, 8001f72 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001f68:	2008      	movs	r0, #8
 8001f6a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f6c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001f6e:	4302      	orrs	r2, r0
 8001f70:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f72:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d050      	beq.n	800201a <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f78:	0698      	lsls	r0, r3, #26
 8001f7a:	d504      	bpl.n	8001f86 <HAL_UART_IRQHandler+0x92>
 8001f7c:	068a      	lsls	r2, r1, #26
 8001f7e:	d502      	bpl.n	8001f86 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff ff81 	bl	8001e88 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001f86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001f88:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8001f8a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001f8c:	d404      	bmi.n	8001f98 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001f92:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001f96:	d019      	beq.n	8001fcc <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8001f98:	f7ff fd91 	bl	8001abe <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	0656      	lsls	r6, r2, #25
 8001fa2:	d50f      	bpl.n	8001fc4 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fa4:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001fa6:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fac:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001fae:	b148      	cbz	r0, 8001fc4 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_UART_IRQHandler+0x128>)
 8001fb2:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fb4:	f7fe fb59 	bl	800066a <HAL_DMA_Abort_IT>
 8001fb8:	b378      	cbz	r0, 800201a <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fba:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8001fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001fc2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff fd89 	bl	8001adc <HAL_UART_ErrorCallback>
 8001fca:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001fcc:	f7ff fd86 	bl	8001adc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd0:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001fd4:	02dd      	lsls	r5, r3, #11
 8001fd6:	d50e      	bpl.n	8001ff6 <HAL_UART_IRQHandler+0x102>
 8001fd8:	0246      	lsls	r6, r0, #9
 8001fda:	d50c      	bpl.n	8001ff6 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8001fdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fe0:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 8001fe8:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8001fea:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8001fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8001ff2:	f000 b815 	b.w	8002020 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ff6:	061d      	lsls	r5, r3, #24
 8001ff8:	d506      	bpl.n	8002008 <HAL_UART_IRQHandler+0x114>
 8001ffa:	0608      	lsls	r0, r1, #24
 8001ffc:	d504      	bpl.n	8002008 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8001ffe:	4620      	mov	r0, r4
}
 8002000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002004:	f7ff bf05 	b.w	8001e12 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002008:	065a      	lsls	r2, r3, #25
 800200a:	d506      	bpl.n	800201a <HAL_UART_IRQHandler+0x126>
 800200c:	064b      	lsls	r3, r1, #25
 800200e:	d504      	bpl.n	800201a <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002010:	4620      	mov	r0, r4
}
 8002012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8002016:	f7ff bf2a 	b.w	8001e6e <UART_EndTransmit_IT>
 800201a:	bd70      	pop	{r4, r5, r6, pc}
 800201c:	08001adf 	.word	0x08001adf

08002020 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002020:	4770      	bx	lr
	...

08002024 <LUT_Prepare>:
void LUT_Prepare();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void LUT_Prepare()
{
 8002024:	b082      	sub	sp, #8
	volatile int i;
	volatile int max;
	volatile float step = 4095/LUT_SIZE;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <LUT_Prepare+0x3c>)
 8002028:	9301      	str	r3, [sp, #4]
	for (i=max;i<LUT_SIZE;i++)
	{
		dac_lut[i] = max - (i - max);
	}*/
	for(i=0;i<LUT_SIZE;i++)
		dac_lut[i] = step*i;
 800202a:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <LUT_Prepare+0x40>)
	for(i=0;i<LUT_SIZE;i++)
 800202c:	2300      	movs	r3, #0
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	9b00      	ldr	r3, [sp, #0]
 8002032:	2b13      	cmp	r3, #19
 8002034:	dd01      	ble.n	800203a <LUT_Prepare+0x16>
}
 8002036:	b002      	add	sp, #8
 8002038:	4770      	bx	lr
		dac_lut[i] = step*i;
 800203a:	9900      	ldr	r1, [sp, #0]
 800203c:	eddd 7a00 	vldr	s15, [sp]
 8002040:	ed9d 7a01 	vldr	s14, [sp, #4]
 8002044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800204c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002050:	ee17 3a90 	vmov	r3, s15
 8002054:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	for(i=0;i<LUT_SIZE;i++)
 8002058:	9b00      	ldr	r3, [sp, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	e7e7      	b.n	8002030 <LUT_Prepare+0xc>
 8002060:	434c0000 	.word	0x434c0000
 8002064:	20000168 	.word	0x20000168

08002068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002068:	b510      	push	{r4, lr}
 800206a:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800206c:	2301      	movs	r3, #1
 800206e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002070:	2310      	movs	r3, #16
 8002072:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002074:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002076:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002078:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 800207c:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002080:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002082:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8002084:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002086:	f7fe fd51 	bl	8000b2c <HAL_RCC_OscConfig>
 800208a:	b100      	cbz	r0, 800208e <SystemClock_Config+0x26>
 800208c:	e7fe      	b.n	800208c <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208e:	230f      	movs	r3, #15
 8002090:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002092:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002094:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002098:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800209a:	4621      	mov	r1, r4
 800209c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800209e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020a0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020a2:	f7ff f813 	bl	80010cc <HAL_RCC_ClockConfig>
 80020a6:	4604      	mov	r4, r0
 80020a8:	b100      	cbz	r0, 80020ac <SystemClock_Config+0x44>
 80020aa:	e7fe      	b.n	80020aa <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_128);
 80020ac:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80020b0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80020b4:	f7fe ffb0 	bl	8001018 <HAL_RCC_MCOConfig>

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80020b8:	f7ff f8b2 	bl	8001220 <HAL_RCC_GetHCLKFreq>
 80020bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80020c4:	f7fe f92e 	bl	8000324 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020c8:	2004      	movs	r0, #4
 80020ca:	f7fe f941 	bl	8000350 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020ce:	4622      	mov	r2, r4
 80020d0:	4621      	mov	r1, r4
 80020d2:	f04f 30ff 	mov.w	r0, #4294967295
 80020d6:	f7fe f8e5 	bl	80002a4 <HAL_NVIC_SetPriority>
}
 80020da:	b010      	add	sp, #64	; 0x40
 80020dc:	bd10      	pop	{r4, pc}
	...

080020e0 <main>:
{
 80020e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020e4:	4c9b      	ldr	r4, [pc, #620]	; (8002354 <main+0x274>)
{
 80020e6:	b0a1      	sub	sp, #132	; 0x84
  HAL_Init();
 80020e8:	f7fe f892 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 80020ec:	f7ff ffbc 	bl	8002068 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020f0:	6963      	ldr	r3, [r4, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020f2:	4899      	ldr	r0, [pc, #612]	; (8002358 <main+0x278>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f8:	6163      	str	r3, [r4, #20]
 80020fa:	6963      	ldr	r3, [r4, #20]
 80020fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002100:	9304      	str	r3, [sp, #16]
 8002102:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	6963      	ldr	r3, [r4, #20]
 8002106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210a:	6163      	str	r3, [r4, #20]
 800210c:	6963      	ldr	r3, [r4, #20]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	9305      	str	r3, [sp, #20]
 8002114:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002116:	6963      	ldr	r3, [r4, #20]
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6163      	str	r3, [r4, #20]
 800211e:	6963      	ldr	r3, [r4, #20]
 8002120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002128:	2108      	movs	r1, #8

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212c:	2603      	movs	r6, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212e:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002130:	2702      	movs	r7, #2
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002132:	f7fe fbc1 	bl	80008b8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002136:	a915      	add	r1, sp, #84	; 0x54
 8002138:	4888      	ldr	r0, [pc, #544]	; (800235c <main+0x27c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800213a:	9715      	str	r7, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213c:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002140:	f7fe fb00 	bl	8000744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA9 
                           PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_9 
 8002144:	f640 6323 	movw	r3, #3619	; 0xe23
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	a915      	add	r1, sp, #84	; 0x54
 800214a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_9 
 800214e:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002150:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	9517      	str	r5, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f7fe faf6 	bl	8000744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8002158:	23f3      	movs	r3, #243	; 0xf3
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	a915      	add	r1, sp, #84	; 0x54
 800215c:	487e      	ldr	r0, [pc, #504]	; (8002358 <main+0x278>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 800215e:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002160:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	9517      	str	r5, [sp, #92]	; 0x5c

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002164:	f44f 7680 	mov.w	r6, #256	; 0x100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f7fe faec 	bl	8000744 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	a915      	add	r1, sp, #84	; 0x54
 800216e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002178:	9519      	str	r5, [sp, #100]	; 0x64
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800217a:	9615      	str	r6, [sp, #84]	; 0x54

  /*Configure GPIO pin : JUMPER_Pin */
  GPIO_InitStruct.Pin = JUMPER_Pin;
 800217c:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	f7fe fae0 	bl	8000744 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(JUMPER_GPIO_Port, &GPIO_InitStruct);
 8002184:	a915      	add	r1, sp, #84	; 0x54
 8002186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218c:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = JUMPER_Pin;
 8002190:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(JUMPER_GPIO_Port, &GPIO_InitStruct);
 8002194:	f7fe fad6 	bl	8000744 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin;
 8002198:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800219a:	a915      	add	r1, sp, #84	; 0x54
 800219c:	486e      	ldr	r0, [pc, #440]	; (8002358 <main+0x278>)
  GPIO_InitStruct.Pin = LD3_Pin;
 800219e:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	9517      	str	r5, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	9716      	str	r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f7fe facd 	bl	8000744 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021aa:	6963      	ldr	r3, [r4, #20]
 80021ac:	433b      	orrs	r3, r7
 80021ae:	6163      	str	r3, [r4, #20]
 80021b0:	6963      	ldr	r3, [r4, #20]
  hdac1.Instance = DAC1;
 80021b2:	4c6b      	ldr	r4, [pc, #428]	; (8002360 <main+0x280>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b4:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80021b6:	462a      	mov	r2, r5
 80021b8:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021ba:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80021bc:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021be:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80021c0:	f7fe f870 	bl	80002a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80021c4:	200d      	movs	r0, #13
 80021c6:	f7fe f8a1 	bl	800030c <HAL_NVIC_EnableIRQ>
  hdac1.Instance = DAC1;
 80021ca:	4b66      	ldr	r3, [pc, #408]	; (8002364 <main+0x284>)
 80021cc:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7fe f8cf 	bl	8000372 <HAL_DAC_Init>
 80021d4:	4625      	mov	r5, r4
 80021d6:	4602      	mov	r2, r0
 80021d8:	b100      	cbz	r0, 80021dc <main+0xfc>
 80021da:	e7fe      	b.n	80021da <main+0xfa>
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 80021dc:	231c      	movs	r3, #28
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80021de:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021e0:	a915      	add	r1, sp, #84	; 0x54
 80021e2:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 80021e4:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021e6:	f7fe f957 	bl	8000498 <HAL_DAC_ConfigChannel>
 80021ea:	b100      	cbz	r0, 80021ee <main+0x10e>
 80021ec:	e7fe      	b.n	80021ec <main+0x10c>
  hopamp2.Instance = OPAMP2;
 80021ee:	4c5e      	ldr	r4, [pc, #376]	; (8002368 <main+0x288>)
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 80021f0:	4b5e      	ldr	r3, [pc, #376]	; (800236c <main+0x28c>)
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021f2:	6120      	str	r0, [r4, #16]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 80021f4:	f04f 0e60 	mov.w	lr, #96	; 0x60
 80021f8:	e884 4008 	stmia.w	r4, {r3, lr}
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80021fc:	f04f 090c 	mov.w	r9, #12
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_USER;
 8002200:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  hopamp2.Init.TrimmingValueP = 0;
 8002204:	62a0      	str	r0, [r4, #40]	; 0x28
  hopamp2.Init.TrimmingValueN = 0;
 8002206:	62e0      	str	r0, [r4, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8002208:	4620      	mov	r0, r4
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800220a:	f8c4 900c 	str.w	r9, [r4, #12]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_USER;
 800220e:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8002210:	f7fe fb5c 	bl	80008cc <HAL_OPAMP_Init>
 8002214:	b100      	cbz	r0, 8002218 <main+0x138>
 8002216:	e7fe      	b.n	8002216 <main+0x136>
  if (HAL_OPAMP_SelfCalibrate(&hopamp2) != HAL_OK)
 8002218:	4620      	mov	r0, r4
 800221a:	f7fe fbe0 	bl	80009de <HAL_OPAMP_SelfCalibrate>
 800221e:	b100      	cbz	r0, 8002222 <main+0x142>
 8002220:	e7fe      	b.n	8002220 <main+0x140>
  huart2.Instance = USART2;
 8002222:	4b53      	ldr	r3, [pc, #332]	; (8002370 <main+0x290>)
  huart2.Init.BaudRate = 38400;
 8002224:	4953      	ldr	r1, [pc, #332]	; (8002374 <main+0x294>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002226:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 38400;
 8002228:	f44f 4216 	mov.w	r2, #38400	; 0x9600
  huart2.Init.StopBits = UART_STOPBITS_1;
 800222c:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800222e:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002230:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002232:	61d8      	str	r0, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002234:	6218      	str	r0, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002236:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002238:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 38400;
 800223a:	e883 0006 	stmia.w	r3, {r1, r2}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800223e:	f8c3 9014 	str.w	r9, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002242:	f7ff fdb4 	bl	8001dae <HAL_UART_Init>
 8002246:	b100      	cbz	r0, 800224a <main+0x16a>
 8002248:	e7fe      	b.n	8002248 <main+0x168>
  htim15.Instance = TIM15;
 800224a:	4c4b      	ldr	r4, [pc, #300]	; (8002378 <main+0x298>)
 800224c:	4b4b      	ldr	r3, [pc, #300]	; (800237c <main+0x29c>)
 800224e:	6023      	str	r3, [r4, #0]
  htim15.Init.Period = 2079;
 8002250:	f640 031f 	movw	r3, #2079	; 0x81f
  htim15.Init.Prescaler = 0;
 8002254:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002256:	60a0      	str	r0, [r4, #8]
  htim15.Init.Period = 2079;
 8002258:	60e3      	str	r3, [r4, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225a:	6120      	str	r0, [r4, #16]
  htim15.Init.RepetitionCounter = 0;
 800225c:	6160      	str	r0, [r4, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800225e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002260:	4620      	mov	r0, r4
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002262:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002264:	f7ff f920 	bl	80014a8 <HAL_TIM_Base_Init>
 8002268:	b100      	cbz	r0, 800226c <main+0x18c>
 800226a:	e7fe      	b.n	800226a <main+0x18a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226c:	a920      	add	r1, sp, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800226e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002270:	f841 8d58 	str.w	r8, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002274:	f7ff fa42 	bl	80016fc <HAL_TIM_ConfigClockSource>
 8002278:	b100      	cbz	r0, 800227c <main+0x19c>
 800227a:	e7fe      	b.n	800227a <main+0x19a>
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff f92d 	bl	80014dc <HAL_TIM_OC_Init>
 8002282:	b100      	cbz	r0, 8002286 <main+0x1a6>
 8002284:	e7fe      	b.n	8002284 <main+0x1a4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002286:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002288:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800228a:	a907      	add	r1, sp, #28
 800228c:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800228e:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002290:	f7ff fbb2 	bl	80019f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002294:	b100      	cbz	r0, 8002298 <main+0x1b8>
 8002296:	e7fe      	b.n	8002296 <main+0x1b6>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002298:	2330      	movs	r3, #48	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800229a:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800229c:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229e:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022a0:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a2:	2204      	movs	r2, #4
 80022a4:	a90e      	add	r1, sp, #56	; 0x38
 80022a6:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80022a8:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 1;
 80022aa:	970f      	str	r7, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80022ac:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022ae:	f7ff fb6b 	bl	8001988 <HAL_TIM_OC_ConfigChannel>
 80022b2:	b100      	cbz	r0, 80022b6 <main+0x1d6>
 80022b4:	e7fe      	b.n	80022b4 <main+0x1d4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022b6:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80022bc:	a915      	add	r1, sp, #84	; 0x54
 80022be:	482e      	ldr	r0, [pc, #184]	; (8002378 <main+0x298>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022c0:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022c2:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022c4:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 80022c6:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022c8:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022ca:	921a      	str	r2, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022cc:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022ce:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80022d0:	f7ff fbb4 	bl	8001a3c <HAL_TIMEx_ConfigBreakDeadTime>
 80022d4:	4604      	mov	r4, r0
 80022d6:	b100      	cbz	r0, 80022da <main+0x1fa>
 80022d8:	e7fe      	b.n	80022d8 <main+0x1f8>
  HAL_TIM_MspPostInit(&htim15);
 80022da:	4827      	ldr	r0, [pc, #156]	; (8002378 <main+0x298>)
 80022dc:	f000 f90c 	bl	80024f8 <HAL_TIM_MspPostInit>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80022e0:	4622      	mov	r2, r4
 80022e2:	4621      	mov	r1, r4
 80022e4:	2018      	movs	r0, #24
 80022e6:	f7fd ffdd 	bl	80002a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80022ea:	2018      	movs	r0, #24
 80022ec:	f7fe f80e 	bl	800030c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022f0:	4622      	mov	r2, r4
 80022f2:	4621      	mov	r1, r4
 80022f4:	2026      	movs	r0, #38	; 0x26
 80022f6:	f7fd ffd5 	bl	80002a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022fa:	2026      	movs	r0, #38	; 0x26
 80022fc:	f7fe f806 	bl	800030c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8002300:	4622      	mov	r2, r4
 8002302:	4621      	mov	r1, r4
 8002304:	2036      	movs	r0, #54	; 0x36
 8002306:	f7fd ffcd 	bl	80002a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800230a:	2036      	movs	r0, #54	; 0x36
 800230c:	f7fd fffe 	bl	800030c <HAL_NVIC_EnableIRQ>
  HAL_TIM_OC_Start(&htim15, TIM_CHANNEL_2);
 8002310:	2104      	movs	r1, #4
 8002312:	4819      	ldr	r0, [pc, #100]	; (8002378 <main+0x298>)
 8002314:	f7ff fad6 	bl	80018c4 <HAL_TIM_OC_Start>
  LUT_Prepare();
 8002318:	f7ff fe84 	bl	8002024 <LUT_Prepare>
  __HAL_DAC_ENABLE(&hdac1, DAC_CHANNEL_1);
 800231c:	682a      	ldr	r2, [r5, #0]
  HAL_TIM_Base_Start(&htim15);
 800231e:	4816      	ldr	r0, [pc, #88]	; (8002378 <main+0x298>)
  __HAL_DAC_ENABLE(&hdac1, DAC_CHANNEL_1);
 8002320:	6813      	ldr	r3, [r2, #0]
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start(&htim15);
 8002328:	f7fe ffb0 	bl	800128c <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_lut, LUT_SIZE, DAC_ALIGN_12B_R);
 800232c:	4621      	mov	r1, r4
 800232e:	9400      	str	r4, [sp, #0]
 8002330:	2314      	movs	r3, #20
 8002332:	4a13      	ldr	r2, [pc, #76]	; (8002380 <main+0x2a0>)
 8002334:	480a      	ldr	r0, [pc, #40]	; (8002360 <main+0x280>)
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002336:	4c08      	ldr	r4, [pc, #32]	; (8002358 <main+0x278>)
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_lut, LUT_SIZE, DAC_ALIGN_12B_R);
 8002338:	f7fe f84a 	bl	80003d0 <HAL_DAC_Start_DMA>
  HAL_OPAMP_Start(&hopamp2);
 800233c:	480a      	ldr	r0, [pc, #40]	; (8002368 <main+0x288>)
 800233e:	f7fe fb39 	bl	80009b4 <HAL_OPAMP_Start>
	  HAL_Delay(300);
 8002342:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002346:	f7fd ff87 	bl	8000258 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800234a:	2108      	movs	r1, #8
 800234c:	4620      	mov	r0, r4
 800234e:	f7fe fab8 	bl	80008c2 <HAL_GPIO_TogglePin>
 8002352:	e7f6      	b.n	8002342 <main+0x262>
 8002354:	40021000 	.word	0x40021000
 8002358:	48000400 	.word	0x48000400
 800235c:	48001400 	.word	0x48001400
 8002360:	20000060 	.word	0x20000060
 8002364:	40007400 	.word	0x40007400
 8002368:	2000002c 	.word	0x2000002c
 800236c:	4001003c 	.word	0x4001003c
 8002370:	200000f8 	.word	0x200000f8
 8002374:	40004400 	.word	0x40004400
 8002378:	20000074 	.word	0x20000074
 800237c:	40014000 	.word	0x40014000
 8002380:	20000168 	.word	0x20000168

08002384 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002384:	e7fe      	b.n	8002384 <_Error_Handler>
	...

08002388 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_MspInit+0x88>)
{
 800238a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	619a      	str	r2, [r3, #24]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	f002 0201 	and.w	r2, r2, #1
 800239a:	9200      	str	r2, [sp, #0]
 800239c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	69da      	ldr	r2, [r3, #28]
 80023a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023a4:	61da      	str	r2, [r3, #28]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ae:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b2:	f7fd ff65 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	4611      	mov	r1, r2
 80023ba:	f06f 000b 	mvn.w	r0, #11
 80023be:	f7fd ff71 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	4611      	mov	r1, r2
 80023c6:	f06f 000a 	mvn.w	r0, #10
 80023ca:	f7fd ff6b 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	4611      	mov	r1, r2
 80023d2:	f06f 0009 	mvn.w	r0, #9
 80023d6:	f7fd ff65 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	4611      	mov	r1, r2
 80023de:	f06f 0004 	mvn.w	r0, #4
 80023e2:	f7fd ff5f 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	4611      	mov	r1, r2
 80023ea:	f06f 0003 	mvn.w	r0, #3
 80023ee:	f7fd ff59 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	4611      	mov	r1, r2
 80023f6:	f06f 0001 	mvn.w	r0, #1
 80023fa:	f7fd ff53 	bl	80002a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	4611      	mov	r1, r2
 8002402:	f04f 30ff 	mov.w	r0, #4294967295
 8002406:	f7fd ff4d 	bl	80002a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240a:	b003      	add	sp, #12
 800240c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002414:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 8002416:	6802      	ldr	r2, [r0, #0]
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_DAC_MspInit+0x7c>)
 800241a:	429a      	cmp	r2, r3
{
 800241c:	b087      	sub	sp, #28
 800241e:	4605      	mov	r5, r0
  if(hdac->Instance==DAC1)
 8002420:	d134      	bne.n	800248c <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002422:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2600      	movs	r6, #0
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002428:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800242a:	4c1a      	ldr	r4, [pc, #104]	; (8002494 <HAL_DAC_MspInit+0x80>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 800242c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002430:	61da      	str	r2, [r3, #28]
 8002432:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	9603      	str	r6, [sp, #12]
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800243e:	2710      	movs	r7, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002440:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002446:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002448:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800244a:	9701      	str	r7, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f7fe f97a 	bl	8000744 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_DAC_MspInit+0x84>)
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002452:	60a6      	str	r6, [r4, #8]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002454:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	60e3      	str	r3, [r4, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800245c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002460:	6123      	str	r3, [r4, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002466:	6163      	str	r3, [r4, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002468:	4620      	mov	r0, r4
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800246a:	2320      	movs	r3, #32
 800246c:	61a3      	str	r3, [r4, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800246e:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002470:	f7fe f88e 	bl	8000590 <HAL_DMA_Init>
 8002474:	b118      	cbz	r0, 800247e <HAL_DAC_MspInit+0x6a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002476:	2174      	movs	r1, #116	; 0x74
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <HAL_DAC_MspInit+0x88>)
 800247a:	f7ff ff83 	bl	8002384 <_Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_DAC_MspInit+0x8c>)
 8002480:	6813      	ldr	r3, [r2, #0]
 8002482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002486:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002488:	60ac      	str	r4, [r5, #8]
 800248a:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800248c:	b007      	add	sp, #28
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	40007400 	.word	0x40007400
 8002494:	200000b4 	.word	0x200000b4
 8002498:	40020030 	.word	0x40020030
 800249c:	08002744 	.word	0x08002744
 80024a0:	40010000 	.word	0x40010000

080024a4 <HAL_OPAMP_MspInit>:
  }

}

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80024a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hopamp->Instance==OPAMP2)
 80024a6:	6802      	ldr	r2, [r0, #0]
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_OPAMP_MspInit+0x28>)
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d10a      	bne.n	80024c4 <HAL_OPAMP_MspInit+0x20>
  
    /**OPAMP2 GPIO Configuration    
    PA6     ------> OPAMP2_VOUT
    PA7     ------> OPAMP2_VINP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ae:	23c0      	movs	r3, #192	; 0xc0
 80024b0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024b2:	2303      	movs	r3, #3
 80024b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f7fe f940 	bl	8000744 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 80024c4:	b007      	add	sp, #28
 80024c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ca:	bf00      	nop
 80024cc:	4001003c 	.word	0x4001003c

080024d0 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM15)
 80024d0:	6802      	ldr	r2, [r0, #0]
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_TIM_Base_MspInit+0x24>)
 80024d4:	429a      	cmp	r2, r3
{
 80024d6:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM15)
 80024d8:	d10a      	bne.n	80024f0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80024da:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024e4:	619a      	str	r2, [r3, #24]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80024f0:	b002      	add	sp, #8
 80024f2:	4770      	bx	lr
 80024f4:	40014000 	.word	0x40014000

080024f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM15)
 80024fa:	6802      	ldr	r2, [r0, #0]
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_TIM_MspPostInit+0x2c>)
 80024fe:	429a      	cmp	r2, r3
 8002500:	d10d      	bne.n	800251e <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM15_MspPostInit 0 */
  
    /**TIM15 GPIO Configuration    
    PA3     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002502:	2308      	movs	r3, #8
 8002504:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002512:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002518:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f7fe f913 	bl	8000744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800251e:	b007      	add	sp, #28
 8002520:	f85d fb04 	ldr.w	pc, [sp], #4
 8002524:	40014000 	.word	0x40014000

08002528 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800252a:	6802      	ldr	r2, [r0, #0]
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_UART_MspInit+0x48>)
 800252e:	429a      	cmp	r2, r3
 8002530:	d11a      	bne.n	8002568 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002532:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800253e:	61da      	str	r2, [r3, #28]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800254a:	f248 0304 	movw	r3, #32772	; 0x8004
 800254e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002560:	2307      	movs	r3, #7
 8002562:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002564:	f7fe f8ee 	bl	8000744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002568:	b007      	add	sp, #28
 800256a:	f85d fb04 	ldr.w	pc, [sp], #4
 800256e:	bf00      	nop
 8002570:	40004400 	.word	0x40004400

08002574 <NMI_Handler>:
 8002574:	4770      	bx	lr

08002576 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002576:	e7fe      	b.n	8002576 <HardFault_Handler>

08002578 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002578:	e7fe      	b.n	8002578 <MemManage_Handler>

0800257a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800257a:	e7fe      	b.n	800257a <BusFault_Handler>

0800257c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800257c:	e7fe      	b.n	800257c <UsageFault_Handler>

0800257e <SVC_Handler>:
 800257e:	4770      	bx	lr

08002580 <DebugMon_Handler>:
 8002580:	4770      	bx	lr

08002582 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002582:	4770      	bx	lr

08002584 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002584:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002586:	f7fd fe55 	bl	8000234 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800258e:	f7fd beec 	b.w	800036a <HAL_SYSTICK_IRQHandler>
	...

08002594 <DMA1_Channel3_IRQHandler>:
* @brief This function handles DMA1 channel3 global interrupt.
*/
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	uint32_t source_it = hdma_dac1_ch1.Instance->CCR;
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <DMA1_Channel3_IRQHandler+0x3c>)
{
 8002596:	b507      	push	{r0, r1, r2, lr}
	uint32_t source_it = hdma_dac1_ch1.Instance->CCR;
 8002598:	681a      	ldr	r2, [r3, #0]
	uint32_t flag_it = hdma_dac1_ch1.DmaBaseAddress->ISR;
 800259a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  	if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma_dac1_ch1.ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800259c:	6c18      	ldr	r0, [r3, #64]	; 0x40
	uint32_t source_it = hdma_dac1_ch1.Instance->CCR;
 800259e:	6812      	ldr	r2, [r2, #0]
	uint32_t flag_it = hdma_dac1_ch1.DmaBaseAddress->ISR;
 80025a0:	6809      	ldr	r1, [r1, #0]
  	if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma_dac1_ch1.ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025a2:	2302      	movs	r3, #2
 80025a4:	4083      	lsls	r3, r0
 80025a6:	420b      	tst	r3, r1
 80025a8:	d00b      	beq.n	80025c2 <DMA1_Channel3_IRQHandler+0x2e>
 80025aa:	0793      	lsls	r3, r2, #30
 80025ac:	d509      	bpl.n	80025c2 <DMA1_Channel3_IRQHandler+0x2e>
  	{
  		HAL_TIM_Base_Start(&htim15);
 80025ae:	4809      	ldr	r0, [pc, #36]	; (80025d4 <DMA1_Channel3_IRQHandler+0x40>)
 80025b0:	f7fe fe6c 	bl	800128c <HAL_TIM_Base_Start>
  		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_lut, LUT_SIZE, DAC_ALIGN_12B_R);
 80025b4:	2100      	movs	r1, #0
 80025b6:	9100      	str	r1, [sp, #0]
 80025b8:	2314      	movs	r3, #20
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <DMA1_Channel3_IRQHandler+0x44>)
 80025bc:	4807      	ldr	r0, [pc, #28]	; (80025dc <DMA1_Channel3_IRQHandler+0x48>)
 80025be:	f7fd ff07 	bl	80003d0 <HAL_DAC_Start_DMA>
  	}

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <DMA1_Channel3_IRQHandler+0x3c>)
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025c4:	b003      	add	sp, #12
 80025c6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80025ca:	f7fe b872 	b.w	80006b2 <HAL_DMA_IRQHandler>
 80025ce:	bf00      	nop
 80025d0:	200000b4 	.word	0x200000b4
 80025d4:	20000074 	.word	0x20000074
 80025d8:	20000168 	.word	0x20000168
 80025dc:	20000060 	.word	0x20000060

080025e0 <TIM1_BRK_TIM15_IRQHandler>:
void TIM1_BRK_TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80025e0:	4801      	ldr	r0, [pc, #4]	; (80025e8 <TIM1_BRK_TIM15_IRQHandler+0x8>)
 80025e2:	f7fe be66 	b.w	80012b2 <HAL_TIM_IRQHandler>
 80025e6:	bf00      	nop
 80025e8:	20000074 	.word	0x20000074

080025ec <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025ec:	4801      	ldr	r0, [pc, #4]	; (80025f4 <USART2_IRQHandler+0x8>)
 80025ee:	f7ff bc81 	b.w	8001ef4 <HAL_UART_IRQHandler>
 80025f2:	bf00      	nop
 80025f4:	200000f8 	.word	0x200000f8

080025f8 <TIM6_DAC1_IRQHandler>:
void TIM6_DAC1_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80025f8:	4801      	ldr	r0, [pc, #4]	; (8002600 <TIM6_DAC1_IRQHandler+0x8>)
 80025fa:	f7fd bf98 	b.w	800052e <HAL_DAC_IRQHandler>
 80025fe:	bf00      	nop
 8002600:	20000060 	.word	0x20000060

08002604 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002604:	4915      	ldr	r1, [pc, #84]	; (800265c <SystemInit+0x58>)
 8002606:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800260a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <SystemInit+0x5c>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800261c:	6858      	ldr	r0, [r3, #4]
 800261e:	4a11      	ldr	r2, [pc, #68]	; (8002664 <SystemInit+0x60>)
 8002620:	4002      	ands	r2, r0
 8002622:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800262a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800262e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002636:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800263e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002642:	f022 020f 	bic.w	r2, r2, #15
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <SystemInit+0x64>)
 800264c:	4002      	ands	r2, r0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002658:	608b      	str	r3, [r1, #8]
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00
 8002660:	40021000 	.word	0x40021000
 8002664:	f87fc00c 	.word	0xf87fc00c
 8002668:	ff00fccc 	.word	0xff00fccc

0800266c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800266c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002670:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002672:	e003      	b.n	800267c <LoopCopyDataInit>

08002674 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002676:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002678:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800267a:	3104      	adds	r1, #4

0800267c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002680:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002682:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002684:	d3f6      	bcc.n	8002674 <CopyDataInit>
	ldr	r2, =_sbss
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002688:	e002      	b.n	8002690 <LoopFillZerobss>

0800268a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800268a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800268c:	f842 3b04 	str.w	r3, [r2], #4

08002690 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <LoopForever+0x16>)
	cmp	r2, r3
 8002692:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002694:	d3f9      	bcc.n	800268a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002696:	f7ff ffb5 	bl	8002604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800269a:	f000 f811 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800269e:	f7ff fd1f 	bl	80020e0 <main>

080026a2 <LoopForever>:

LoopForever:
    b LoopForever
 80026a2:	e7fe      	b.n	80026a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026a4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80026a8:	08002780 	.word	0x08002780
	ldr	r0, =_sdata
 80026ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026b0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80026b4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80026b8:	20000190 	.word	0x20000190

080026bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026bc:	e7fe      	b.n	80026bc <ADC1_2_IRQHandler>
	...

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4e0d      	ldr	r6, [pc, #52]	; (80026f8 <__libc_init_array+0x38>)
 80026c4:	4c0d      	ldr	r4, [pc, #52]	; (80026fc <__libc_init_array+0x3c>)
 80026c6:	1ba4      	subs	r4, r4, r6
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	2500      	movs	r5, #0
 80026cc:	42a5      	cmp	r5, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	4e0b      	ldr	r6, [pc, #44]	; (8002700 <__libc_init_array+0x40>)
 80026d2:	4c0c      	ldr	r4, [pc, #48]	; (8002704 <__libc_init_array+0x44>)
 80026d4:	f000 f818 	bl	8002708 <_init>
 80026d8:	1ba4      	subs	r4, r4, r6
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	2500      	movs	r5, #0
 80026de:	42a5      	cmp	r5, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026e8:	4798      	blx	r3
 80026ea:	3501      	adds	r5, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026f2:	4798      	blx	r3
 80026f4:	3501      	adds	r5, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	08002778 	.word	0x08002778
 80026fc:	08002778 	.word	0x08002778
 8002700:	08002778 	.word	0x08002778
 8002704:	0800277c 	.word	0x0800277c

08002708 <_init>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr

08002714 <_fini>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr
